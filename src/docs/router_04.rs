#[derive(
    Clone,
    Copy,
    dioxus_router::prelude::Routable,
    PartialEq,
    Eq,
    Hash,
    Debug,
    serde::Serialize,
    serde::Deserialize
)]
pub enum BookRoute {
    #[route("/")]
    Index {},
    #[route("/getting_started")]
    GettingStartedIndex {},
    #[route("/getting_started/choosing_a_web_renderer")]
    GettingStartedChoosingAWebRenderer {},
    #[route("/getting_started/wasm")]
    GettingStartedWasm {},
    #[route("/getting_started/liveview")]
    GettingStartedLiveview {},
    #[route("/getting_started/fullstack")]
    GettingStartedFullstack {},
    #[route("/getting_started/desktop")]
    GettingStartedDesktop {},
    #[route("/getting_started/mobile")]
    GettingStartedMobile {},
    #[route("/getting_started/tui")]
    GettingStartedTui {},
    #[route("/guide")]
    GuideIndex {},
    #[route("/guide/your_first_component")]
    GuideYourFirstComponent {},
    #[route("/guide/state")]
    GuideState {},
    #[route("/guide/data_fetching")]
    GuideDataFetching {},
    #[route("/guide/full_code")]
    GuideFullCode {},
    #[route("/reference")]
    ReferenceIndex {},
    #[route("/reference/rsx")]
    ReferenceRsx {},
    #[route("/reference/components")]
    ReferenceComponents {},
    #[route("/reference/component_props")]
    ReferenceComponentProps {},
    #[route("/reference/event_handlers")]
    ReferenceEventHandlers {},
    #[route("/reference/hooks")]
    ReferenceHooks {},
    #[route("/reference/user_input")]
    ReferenceUserInput {},
    #[route("/reference/context")]
    ReferenceContext {},
    #[route("/reference/dynamic_rendering")]
    ReferenceDynamicRendering {},
    #[route("/reference/router")]
    ReferenceRouter {},
    #[route("/reference/use_future")]
    ReferenceUseFuture {},
    #[route("/reference/use_coroutine")]
    ReferenceUseCoroutine {},
    #[route("/reference/spawn")]
    ReferenceSpawn {},
    #[route("/reference/desktop")]
    ReferenceDesktopIndex {},
    #[route("/reference/web")]
    ReferenceWebIndex {},
    #[route("/reference/ssr")]
    ReferenceSsr {},
    #[route("/reference/liveview")]
    ReferenceLiveview {},
    #[route("/reference/fullstack")]
    ReferenceFullstackIndex {},
    #[route("/reference/fullstack/server_functions")]
    ReferenceFullstackServerFunctions {},
    #[route("/reference/fullstack/extractors")]
    ReferenceFullstackExtractors {},
    #[route("/reference/fullstack/middleware")]
    ReferenceFullstackMiddleware {},
    #[route("/reference/fullstack/authentication")]
    ReferenceFullstackAuthentication {},
    #[route("/reference/fullstack/routing")]
    ReferenceFullstackRouting {},
    #[route("/router")]
    RouterIndex {},
    #[route("/router/example")]
    RouterExampleIndex {},
    #[route("/router/example/first-route")]
    RouterExampleFirstRoute {},
    #[route("/router/example/building-a-nest")]
    RouterExampleBuildingANest {},
    #[route("/router/example/navigation-targets")]
    RouterExampleNavigationTargets {},
    #[route("/router/example/redirection-perfection")]
    RouterExampleRedirectionPerfection {},
    #[route("/router/example/full-code")]
    RouterExampleFullCode {},
    #[route("/router/reference")]
    RouterReferenceIndex {},
    #[route("/router/reference/routes")]
    RouterReferenceRoutesIndex {},
    #[route("/router/reference/routes/nested")]
    RouterReferenceRoutesNested {},
    #[route("/router/reference/layouts")]
    RouterReferenceLayouts {},
    #[route("/router/reference/navigation")]
    RouterReferenceNavigationIndex {},
    #[route("/router/reference/navigation/programmatic")]
    RouterReferenceNavigationProgrammatic {},
    #[route("/router/reference/history-providers")]
    RouterReferenceHistoryProviders {},
    #[route("/router/reference/history-buttons")]
    RouterReferenceHistoryButtons {},
    #[route("/router/reference/static-generation")]
    RouterReferenceStaticGeneration {},
    #[route("/router/reference/routing-update-callback")]
    RouterReferenceRoutingUpdateCallback {},
    #[route("/cookbook")]
    CookbookIndex {},
    #[route("/cookbook/publishing")]
    CookbookPublishing {},
    #[route("/cookbook/antipatterns")]
    CookbookAntipatterns {},
    #[route("/cookbook/error_handling")]
    CookbookErrorHandling {},
    #[route("/cookbook/integrations")]
    CookbookIntegrationsIndex {},
    #[route("/cookbook/integrations/logging")]
    CookbookIntegrationsLogging {},
    #[route("/cookbook/integrations/internationalization")]
    CookbookIntegrationsInternationalization {},
    #[route("/cookbook/state")]
    CookbookStateIndex {},
    #[route("/cookbook/state/external")]
    CookbookStateExternalIndex {},
    #[route("/cookbook/state/custom_hooks")]
    CookbookStateCustomHooksIndex {},
    #[route("/cookbook/testing")]
    CookbookTesting {},
    #[route("/cookbook/examples")]
    CookbookExamples {},
    #[route("/cookbook/tailwind")]
    CookbookTailwind {},
    #[route("/cookbook/custom_renderer")]
    CookbookCustomRenderer {},
    #[route("/cookbook/optimizing")]
    CookbookOptimizing {},
    #[route("/CLI")]
    CliIndex {},
    #[route("/CLI/installation")]
    CliInstallation {},
    #[route("/CLI/creating")]
    CliCreating {},
    #[route("/CLI/configure")]
    CliConfigure {},
    #[route("/CLI/translate")]
    CliTranslate {},
    #[route("/contributing")]
    ContributingIndex {},
    #[route("/contributing/project_structure")]
    ContributingProjectStructure {},
    #[route("/contributing/walkthrough_readme")]
    ContributingWalkthroughReadme {},
    #[route("/contributing/guiding_principles")]
    ContributingGuidingPrinciples {},
    #[route("/contributing/roadmap")]
    ContributingRoadmap {},
    #[route("/migration")]
    MigrationIndex {},
    #[route("/migration/router")]
    MigrationRouter {},
    #[route("/migration/hot_reload")]
    MigrationHotReload {},
}
impl BookRoute {
    pub fn sections(&self) -> &[use_mdbook::mdbook_shared::Section] {
        &self.page().sections
    }
    pub fn page(&self) -> &use_mdbook::mdbook_shared::Page<Self> {
        LAZY_BOOK.get_page(self)
    }
    pub fn page_id(&self) -> use_mdbook::mdbook_shared::PageId {
        match self {
            BookRoute::Index {} => use_mdbook::mdbook_shared::PageId(0usize),
            BookRoute::GettingStartedIndex {} => {
                use_mdbook::mdbook_shared::PageId(1usize)
            }
            BookRoute::GettingStartedChoosingAWebRenderer {} => {
                use_mdbook::mdbook_shared::PageId(2usize)
            }
            BookRoute::GettingStartedWasm {} => use_mdbook::mdbook_shared::PageId(3usize),
            BookRoute::GettingStartedLiveview {} => {
                use_mdbook::mdbook_shared::PageId(4usize)
            }
            BookRoute::GettingStartedFullstack {} => {
                use_mdbook::mdbook_shared::PageId(5usize)
            }
            BookRoute::GettingStartedDesktop {} => {
                use_mdbook::mdbook_shared::PageId(6usize)
            }
            BookRoute::GettingStartedMobile {} => {
                use_mdbook::mdbook_shared::PageId(7usize)
            }
            BookRoute::GettingStartedTui {} => use_mdbook::mdbook_shared::PageId(8usize),
            BookRoute::GuideIndex {} => use_mdbook::mdbook_shared::PageId(9usize),
            BookRoute::GuideYourFirstComponent {} => {
                use_mdbook::mdbook_shared::PageId(10usize)
            }
            BookRoute::GuideState {} => use_mdbook::mdbook_shared::PageId(11usize),
            BookRoute::GuideDataFetching {} => use_mdbook::mdbook_shared::PageId(12usize),
            BookRoute::GuideFullCode {} => use_mdbook::mdbook_shared::PageId(13usize),
            BookRoute::ReferenceIndex {} => use_mdbook::mdbook_shared::PageId(14usize),
            BookRoute::ReferenceRsx {} => use_mdbook::mdbook_shared::PageId(15usize),
            BookRoute::ReferenceComponents {} => {
                use_mdbook::mdbook_shared::PageId(16usize)
            }
            BookRoute::ReferenceComponentProps {} => {
                use_mdbook::mdbook_shared::PageId(17usize)
            }
            BookRoute::ReferenceEventHandlers {} => {
                use_mdbook::mdbook_shared::PageId(18usize)
            }
            BookRoute::ReferenceHooks {} => use_mdbook::mdbook_shared::PageId(19usize),
            BookRoute::ReferenceUserInput {} => {
                use_mdbook::mdbook_shared::PageId(20usize)
            }
            BookRoute::ReferenceContext {} => use_mdbook::mdbook_shared::PageId(21usize),
            BookRoute::ReferenceDynamicRendering {} => {
                use_mdbook::mdbook_shared::PageId(22usize)
            }
            BookRoute::ReferenceRouter {} => use_mdbook::mdbook_shared::PageId(23usize),
            BookRoute::ReferenceUseFuture {} => {
                use_mdbook::mdbook_shared::PageId(24usize)
            }
            BookRoute::ReferenceUseCoroutine {} => {
                use_mdbook::mdbook_shared::PageId(25usize)
            }
            BookRoute::ReferenceSpawn {} => use_mdbook::mdbook_shared::PageId(26usize),
            BookRoute::ReferenceDesktopIndex {} => {
                use_mdbook::mdbook_shared::PageId(27usize)
            }
            BookRoute::ReferenceWebIndex {} => use_mdbook::mdbook_shared::PageId(28usize),
            BookRoute::ReferenceSsr {} => use_mdbook::mdbook_shared::PageId(29usize),
            BookRoute::ReferenceLiveview {} => use_mdbook::mdbook_shared::PageId(30usize),
            BookRoute::ReferenceFullstackIndex {} => {
                use_mdbook::mdbook_shared::PageId(31usize)
            }
            BookRoute::ReferenceFullstackServerFunctions {} => {
                use_mdbook::mdbook_shared::PageId(32usize)
            }
            BookRoute::ReferenceFullstackExtractors {} => {
                use_mdbook::mdbook_shared::PageId(33usize)
            }
            BookRoute::ReferenceFullstackMiddleware {} => {
                use_mdbook::mdbook_shared::PageId(34usize)
            }
            BookRoute::ReferenceFullstackAuthentication {} => {
                use_mdbook::mdbook_shared::PageId(35usize)
            }
            BookRoute::ReferenceFullstackRouting {} => {
                use_mdbook::mdbook_shared::PageId(36usize)
            }
            BookRoute::RouterIndex {} => use_mdbook::mdbook_shared::PageId(37usize),
            BookRoute::RouterExampleIndex {} => {
                use_mdbook::mdbook_shared::PageId(38usize)
            }
            BookRoute::RouterExampleFirstRoute {} => {
                use_mdbook::mdbook_shared::PageId(39usize)
            }
            BookRoute::RouterExampleBuildingANest {} => {
                use_mdbook::mdbook_shared::PageId(40usize)
            }
            BookRoute::RouterExampleNavigationTargets {} => {
                use_mdbook::mdbook_shared::PageId(41usize)
            }
            BookRoute::RouterExampleRedirectionPerfection {} => {
                use_mdbook::mdbook_shared::PageId(42usize)
            }
            BookRoute::RouterExampleFullCode {} => {
                use_mdbook::mdbook_shared::PageId(43usize)
            }
            BookRoute::RouterReferenceIndex {} => {
                use_mdbook::mdbook_shared::PageId(44usize)
            }
            BookRoute::RouterReferenceRoutesIndex {} => {
                use_mdbook::mdbook_shared::PageId(45usize)
            }
            BookRoute::RouterReferenceRoutesNested {} => {
                use_mdbook::mdbook_shared::PageId(46usize)
            }
            BookRoute::RouterReferenceLayouts {} => {
                use_mdbook::mdbook_shared::PageId(47usize)
            }
            BookRoute::RouterReferenceNavigationIndex {} => {
                use_mdbook::mdbook_shared::PageId(48usize)
            }
            BookRoute::RouterReferenceNavigationProgrammatic {} => {
                use_mdbook::mdbook_shared::PageId(49usize)
            }
            BookRoute::RouterReferenceHistoryProviders {} => {
                use_mdbook::mdbook_shared::PageId(50usize)
            }
            BookRoute::RouterReferenceHistoryButtons {} => {
                use_mdbook::mdbook_shared::PageId(51usize)
            }
            BookRoute::RouterReferenceStaticGeneration {} => {
                use_mdbook::mdbook_shared::PageId(52usize)
            }
            BookRoute::RouterReferenceRoutingUpdateCallback {} => {
                use_mdbook::mdbook_shared::PageId(53usize)
            }
            BookRoute::CookbookIndex {} => use_mdbook::mdbook_shared::PageId(54usize),
            BookRoute::CookbookPublishing {} => {
                use_mdbook::mdbook_shared::PageId(55usize)
            }
            BookRoute::CookbookAntipatterns {} => {
                use_mdbook::mdbook_shared::PageId(56usize)
            }
            BookRoute::CookbookErrorHandling {} => {
                use_mdbook::mdbook_shared::PageId(57usize)
            }
            BookRoute::CookbookIntegrationsIndex {} => {
                use_mdbook::mdbook_shared::PageId(58usize)
            }
            BookRoute::CookbookIntegrationsLogging {} => {
                use_mdbook::mdbook_shared::PageId(59usize)
            }
            BookRoute::CookbookIntegrationsInternationalization {} => {
                use_mdbook::mdbook_shared::PageId(60usize)
            }
            BookRoute::CookbookStateIndex {} => {
                use_mdbook::mdbook_shared::PageId(61usize)
            }
            BookRoute::CookbookStateExternalIndex {} => {
                use_mdbook::mdbook_shared::PageId(62usize)
            }
            BookRoute::CookbookStateCustomHooksIndex {} => {
                use_mdbook::mdbook_shared::PageId(63usize)
            }
            BookRoute::CookbookTesting {} => use_mdbook::mdbook_shared::PageId(64usize),
            BookRoute::CookbookExamples {} => use_mdbook::mdbook_shared::PageId(65usize),
            BookRoute::CookbookTailwind {} => use_mdbook::mdbook_shared::PageId(66usize),
            BookRoute::CookbookCustomRenderer {} => {
                use_mdbook::mdbook_shared::PageId(67usize)
            }
            BookRoute::CookbookOptimizing {} => {
                use_mdbook::mdbook_shared::PageId(68usize)
            }
            BookRoute::CliIndex {} => use_mdbook::mdbook_shared::PageId(69usize),
            BookRoute::CliInstallation {} => use_mdbook::mdbook_shared::PageId(70usize),
            BookRoute::CliCreating {} => use_mdbook::mdbook_shared::PageId(71usize),
            BookRoute::CliConfigure {} => use_mdbook::mdbook_shared::PageId(72usize),
            BookRoute::CliTranslate {} => use_mdbook::mdbook_shared::PageId(73usize),
            BookRoute::ContributingIndex {} => use_mdbook::mdbook_shared::PageId(74usize),
            BookRoute::ContributingProjectStructure {} => {
                use_mdbook::mdbook_shared::PageId(75usize)
            }
            BookRoute::ContributingWalkthroughReadme {} => {
                use_mdbook::mdbook_shared::PageId(76usize)
            }
            BookRoute::ContributingGuidingPrinciples {} => {
                use_mdbook::mdbook_shared::PageId(77usize)
            }
            BookRoute::ContributingRoadmap {} => {
                use_mdbook::mdbook_shared::PageId(78usize)
            }
            BookRoute::MigrationIndex {} => use_mdbook::mdbook_shared::PageId(79usize),
            BookRoute::MigrationRouter {} => use_mdbook::mdbook_shared::PageId(80usize),
            BookRoute::MigrationHotReload {} => {
                use_mdbook::mdbook_shared::PageId(81usize)
            }
        }
    }
}
impl Default for BookRoute {
    fn default() -> Self {
        BookRoute::Index {}
    }
}
pub static LAZY_BOOK: use_mdbook::Lazy<use_mdbook::mdbook_shared::MdBook<BookRoute>> = use_mdbook::Lazy::new(||
{
    {
        let mut page_id_mapping = ::std::collections::HashMap::new();
        let mut pages = Vec::new();
        pages
            .push((
                0usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Introduction".to_string(),
                        url: BookRoute::Index {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Introduction".to_string(),
                                id: "introduction".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Features".to_string(),
                                id: "features".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Multiplatform".to_string(),
                                id: "multiplatform".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Stability".to_string(),
                                id: "stability".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(0usize),
                    }
                },
            ));
        page_id_mapping
            .insert(BookRoute::Index {}, ::use_mdbook::mdbook_shared::PageId(0usize));
        pages
            .push((
                1usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Getting Started".to_string(),
                        url: BookRoute::GettingStartedIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Getting Started".to_string(),
                                id: "getting-started".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Prerequisites".to_string(),
                                id: "prerequisites".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "An Editor".to_string(),
                                id: "an-editor".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Rust".to_string(),
                                id: "rust".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setup Guides".to_string(),
                                id: "setup-guides".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(1usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GettingStartedIndex {},
                ::use_mdbook::mdbook_shared::PageId(1usize),
            );
        pages
            .push((
                2usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Choosing A Web Renderer".to_string(),
                        url: BookRoute::GettingStartedChoosingAWebRenderer {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Choosing a web renderer".to_string(),
                                id: "choosing-a-web-renderer".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Dioxus Liveview".to_string(),
                                id: "dioxus-liveview".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Dioxus Web".to_string(),
                                id: "dioxus-web".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Dioxus Fullstack".to_string(),
                                id: "dioxus-fullstack".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(2usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GettingStartedChoosingAWebRenderer {
                },
                ::use_mdbook::mdbook_shared::PageId(2usize),
            );
        pages
            .push((
                3usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Web".to_string(),
                        url: BookRoute::GettingStartedWasm {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web".to_string(),
                                id: "web".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Support".to_string(),
                                id: "support".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Tooling".to_string(),
                                id: "tooling".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Creating a Project".to_string(),
                                id: "creating-a-project".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Hot Reload".to_string(),
                                id: "hot-reload".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setup".to_string(),
                                id: "setup".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Usage".to_string(),
                                id: "usage".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Limitations".to_string(),
                                id: "limitations".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(3usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GettingStartedWasm {},
                ::use_mdbook::mdbook_shared::PageId(3usize),
            );
        pages
            .push((
                4usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Liveview".to_string(),
                        url: BookRoute::GettingStartedLiveview {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Liveview".to_string(),
                                id: "liveview".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Support".to_string(),
                                id: "support".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setup".to_string(),
                                id: "setup".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Hot Reload".to_string(),
                                id: "hot-reload".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setup".to_string(),
                                id: "setup".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Usage".to_string(),
                                id: "usage".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Limitations".to_string(),
                                id: "limitations".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(4usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GettingStartedLiveview {
                },
                ::use_mdbook::mdbook_shared::PageId(4usize),
            );
        pages
            .push((
                5usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Fullstack".to_string(),
                        url: BookRoute::GettingStartedFullstack {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Fullstack".to_string(),
                                id: "fullstack".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Getting Started".to_string(),
                                id: "getting-started".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setup".to_string(),
                                id: "setup".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Hot Reload".to_string(),
                                id: "hot-reload".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Usage".to_string(),
                                id: "usage".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Limitations".to_string(),
                                id: "limitations".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(5usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GettingStartedFullstack {
                },
                ::use_mdbook::mdbook_shared::PageId(5usize),
            );
        pages
            .push((
                6usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Desktop".to_string(),
                        url: BookRoute::GettingStartedDesktop {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Desktop overview".to_string(),
                                id: "desktop-overview".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Examples".to_string(),
                                id: "examples".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Getting started".to_string(),
                                id: "getting-started".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Platform-specific dependencies".to_string(),
                                id: "platform-specific-dependencies".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Windows".to_string(),
                                id: "windows".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Linux".to_string(),
                                id: "linux".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "MacOS".to_string(),
                                id: "macos".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Creating a Project".to_string(),
                                id: "creating-a-project".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Hot Reload".to_string(),
                                id: "hot-reload".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setup".to_string(),
                                id: "setup".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Usage".to_string(),
                                id: "usage".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Limitations".to_string(),
                                id: "limitations".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(6usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GettingStartedDesktop {
                },
                ::use_mdbook::mdbook_shared::PageId(6usize),
            );
        pages
            .push((
                7usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Mobile".to_string(),
                        url: BookRoute::GettingStartedMobile {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Mobile App".to_string(),
                                id: "mobile-app".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Support".to_string(),
                                id: "support".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Getting Set up".to_string(),
                                id: "getting-set-up".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setting up dependencies".to_string(),
                                id: "setting-up-dependencies".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Android".to_string(),
                                id: "android".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "IOS".to_string(),
                                id: "ios".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setting up your project".to_string(),
                                id: "setting-up-your-project".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Running".to_string(),
                                id: "running".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "IOS".to_string(),
                                id: "ios".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Android".to_string(),
                                id: "android".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(7usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GettingStartedMobile {},
                ::use_mdbook::mdbook_shared::PageId(7usize),
            );
        pages
            .push((
                8usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Terminal UI".to_string(),
                        url: BookRoute::GettingStartedTui {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Terminal UI".to_string(),
                                id: "terminal-ui".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Support".to_string(),
                                id: "support".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Getting Set up".to_string(),
                                id: "getting-set-up".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Hot Reload".to_string(),
                                id: "hot-reload".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setup".to_string(),
                                id: "setup".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Usage".to_string(),
                                id: "usage".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Limitations".to_string(),
                                id: "limitations".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(8usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GettingStartedTui {},
                ::use_mdbook::mdbook_shared::PageId(8usize),
            );
        pages
            .push((
                9usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Guide".to_string(),
                        url: BookRoute::GuideIndex {},
                        segments: vec![],
                        sections: vec![],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(9usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GuideIndex {},
                ::use_mdbook::mdbook_shared::PageId(9usize),
            );
        pages
            .push((
                10usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Your First Component".to_string(),
                        url: BookRoute::GuideYourFirstComponent {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Your First Component".to_string(),
                                id: "your-first-component".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Dynamic Text".to_string(),
                                id: "dynamic-text".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Creating Elements".to_string(),
                                id: "creating-elements".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setting Attributes".to_string(),
                                id: "setting-attributes".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Creating a Component".to_string(),
                                id: "creating-a-component".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Creating Props".to_string(),
                                id: "creating-props".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Cleaning Up Our Interface".to_string(),
                                id: "cleaning-up-our-interface".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(10usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GuideYourFirstComponent {
                },
                ::use_mdbook::mdbook_shared::PageId(10usize),
            );
        pages
            .push((
                11usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "State".to_string(),
                        url: BookRoute::GuideState {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Interactivity".to_string(),
                                id: "interactivity".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Creating a Preview".to_string(),
                                id: "creating-a-preview".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Event Handlers".to_string(),
                                id: "event-handlers".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "State".to_string(),
                                id: "state".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The Rules of Hooks".to_string(),
                                id: "the-rules-of-hooks".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "No Hooks in Conditionals".to_string(),
                                id: "no-hooks-in-conditionals".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "No Hooks in Closures".to_string(),
                                id: "no-hooks-in-closures".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "No Hooks in Loops".to_string(),
                                id: "no-hooks-in-loops".to_string(),
                                level: 4usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(11usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GuideState {},
                ::use_mdbook::mdbook_shared::PageId(11usize),
            );
        pages
            .push((
                12usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Data Fetching".to_string(),
                        url: BookRoute::GuideDataFetching {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Fetching Data".to_string(),
                                id: "fetching-data".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Defining the API".to_string(),
                                id: "defining-the-api".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Working with Async".to_string(),
                                id: "working-with-async".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Lazily Fetching Data".to_string(),
                                id: "lazily-fetching-data".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(12usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GuideDataFetching {},
                ::use_mdbook::mdbook_shared::PageId(12usize),
            );
        pages
            .push((
                13usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Full Code".to_string(),
                        url: BookRoute::GuideFullCode {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Conclusion".to_string(),
                                id: "conclusion".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Challenges".to_string(),
                                id: "challenges".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The full code for the hacker news project"
                                    .to_string(),
                                id: "the-full-code-for-the-hacker-news-project".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(13usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::GuideFullCode {},
                ::use_mdbook::mdbook_shared::PageId(13usize),
            );
        pages
            .push((
                14usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Reference".to_string(),
                        url: BookRoute::ReferenceIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Dioxus Reference".to_string(),
                                id: "dioxus-reference".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Rendering".to_string(),
                                id: "rendering".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "State".to_string(),
                                id: "state".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Platforms".to_string(),
                                id: "platforms".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(14usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceIndex {},
                ::use_mdbook::mdbook_shared::PageId(14usize),
            );
        pages
            .push((
                15usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "RSX".to_string(),
                        url: BookRoute::ReferenceRsx {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Describing the UI".to_string(),
                                id: "describing-the-ui".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "RSX Features".to_string(),
                                id: "rsx-features".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Attributes".to_string(),
                                id: "attributes".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Custom Attributes".to_string(),
                                id: "custom-attributes".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Special Attributes".to_string(),
                                id: "special-attributes".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The HTML Escape Hatch".to_string(),
                                id: "the-html-escape-hatch".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Boolean Attributes".to_string(),
                                id: "boolean-attributes".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Interpolation".to_string(),
                                id: "interpolation".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Children".to_string(),
                                id: "children".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Fragments".to_string(),
                                id: "fragments".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Expressions".to_string(),
                                id: "expressions".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Loops".to_string(),
                                id: "loops".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "If statements".to_string(),
                                id: "if-statements".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(15usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceRsx {},
                ::use_mdbook::mdbook_shared::PageId(15usize),
            );
        pages
            .push((
                16usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Components".to_string(),
                        url: BookRoute::ReferenceComponents {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Components".to_string(),
                                id: "components".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(16usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceComponents {},
                ::use_mdbook::mdbook_shared::PageId(16usize),
            );
        pages
            .push((
                17usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Props".to_string(),
                        url: BookRoute::ReferenceComponentProps {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Component Props".to_string(),
                                id: "component-props".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Component props are a single struct annotated with "
                                    .to_string(),
                                id: "component-props-are-a-single-struct-annotated-with"
                                    .to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Owned Props".to_string(),
                                id: "owned-props".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Borrowed Props".to_string(),
                                id: "borrowed-props".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Prop Options".to_string(),
                                id: "prop-options".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Optional Props".to_string(),
                                id: "optional-props".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Explicitly Required ".to_string(),
                                id: "explicitly-required".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Default Props".to_string(),
                                id: "default-props".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Automatic Conversion with ".to_string(),
                                id: "automatic-conversion-with".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The ".to_string(),
                                id: "the".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Component Children".to_string(),
                                id: "component-children".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The ".to_string(),
                                id: "the".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(17usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceComponentProps {
                },
                ::use_mdbook::mdbook_shared::PageId(17usize),
            );
        pages
            .push((
                18usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Event Handlers".to_string(),
                        url: BookRoute::ReferenceEventHandlers {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Event Handlers".to_string(),
                                id: "event-handlers".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The ".to_string(),
                                id: "the".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Event propagation".to_string(),
                                id: "event-propagation".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Prevent Default".to_string(),
                                id: "prevent-default".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Handler Props".to_string(),
                                id: "handler-props".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Custom Data".to_string(),
                                id: "custom-data".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(18usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceEventHandlers {
                },
                ::use_mdbook::mdbook_shared::PageId(18usize),
            );
        pages
            .push((
                19usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Hooks".to_string(),
                        url: BookRoute::ReferenceHooks {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Hooks and component state".to_string(),
                                id: "hooks-and-component-state".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "use_state hook".to_string(),
                                id: "use_state-hook".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Out-of-date UseState".to_string(),
                                id: "out-of-date-usestate".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Rules of hooks".to_string(),
                                id: "rules-of-hooks".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "No hooks in conditionals".to_string(),
                                id: "no-hooks-in-conditionals".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "No hooks in closures".to_string(),
                                id: "no-hooks-in-closures".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "No hooks in loops".to_string(),
                                id: "no-hooks-in-loops".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "use_ref hook".to_string(),
                                id: "use_ref-hook".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Additional resources".to_string(),
                                id: "additional-resources".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(19usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceHooks {},
                ::use_mdbook::mdbook_shared::PageId(19usize),
            );
        pages
            .push((
                20usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "User Input".to_string(),
                        url: BookRoute::ReferenceUserInput {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "User Input".to_string(),
                                id: "user-input".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Controlled Inputs".to_string(),
                                id: "controlled-inputs".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Uncontrolled Inputs".to_string(),
                                id: "uncontrolled-inputs".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Handling files".to_string(),
                                id: "handling-files".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(20usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceUserInput {},
                ::use_mdbook::mdbook_shared::PageId(20usize),
            );
        pages
            .push((
                21usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Context".to_string(),
                        url: BookRoute::ReferenceContext {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Sharing State".to_string(),
                                id: "sharing-state".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Lifting State".to_string(),
                                id: "lifting-state".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Using Shared State".to_string(),
                                id: "using-shared-state".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(21usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceContext {},
                ::use_mdbook::mdbook_shared::PageId(21usize),
            );
        pages
            .push((
                22usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Dynamic Rendering".to_string(),
                        url: BookRoute::ReferenceDynamicRendering {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Dynamic Rendering".to_string(),
                                id: "dynamic-rendering".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Conditional Rendering".to_string(),
                                id: "conditional-rendering".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Improving the ".to_string(),
                                id: "improving-the".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Inspecting ".to_string(),
                                id: "inspecting".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Rendering Nothing".to_string(),
                                id: "rendering-nothing".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Rendering Lists".to_string(),
                                id: "rendering-lists".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Inline for loops".to_string(),
                                id: "inline-for-loops".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The ".to_string(),
                                id: "the".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(22usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceDynamicRendering {
                },
                ::use_mdbook::mdbook_shared::PageId(22usize),
            );
        pages
            .push((
                23usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Routing".to_string(),
                        url: BookRoute::ReferenceRouter {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Router".to_string(),
                                id: "router".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "What is it?".to_string(),
                                id: "what-is-it?".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Using the router".to_string(),
                                id: "using-the-router".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Links".to_string(),
                                id: "links".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "More reading".to_string(),
                                id: "more-reading".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(23usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceRouter {},
                ::use_mdbook::mdbook_shared::PageId(23usize),
            );
        pages
            .push((
                24usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "UseFuture".to_string(),
                        url: BookRoute::ReferenceUseFuture {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "UseFuture".to_string(),
                                id: "usefuture".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Restarting the Future".to_string(),
                                id: "restarting-the-future".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Dependencies".to_string(),
                                id: "dependencies".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(24usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceUseFuture {},
                ::use_mdbook::mdbook_shared::PageId(24usize),
            );
        pages
            .push((
                25usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "UseCoroutine".to_string(),
                        url: BookRoute::ReferenceUseCoroutine {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Coroutines".to_string(),
                                id: "coroutines".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The ".to_string(),
                                id: "the".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Yielding Values".to_string(),
                                id: "yielding-values".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Sending Values".to_string(),
                                id: "sending-values".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Automatic injection into the Context API"
                                    .to_string(),
                                id: "automatic-injection-into-the-context-api".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(25usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceUseCoroutine {
                },
                ::use_mdbook::mdbook_shared::PageId(25usize),
            );
        pages
            .push((
                26usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Spawn".to_string(),
                        url: BookRoute::ReferenceSpawn {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Spawning Futures".to_string(),
                                id: "spawning-futures".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Spawning Tokio Tasks".to_string(),
                                id: "spawning-tokio-tasks".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(26usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceSpawn {},
                ::use_mdbook::mdbook_shared::PageId(26usize),
            );
        pages
            .push((
                27usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Desktop".to_string(),
                        url: BookRoute::ReferenceDesktopIndex {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Desktop".to_string(),
                                id: "desktop".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Running Javascript".to_string(),
                                id: "running-javascript".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Custom Assets".to_string(),
                                id: "custom-assets".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Integrating with Wry".to_string(),
                                id: "integrating-with-wry".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(27usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceDesktopIndex {
                },
                ::use_mdbook::mdbook_shared::PageId(27usize),
            );
        pages
            .push((
                28usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Web".to_string(),
                        url: BookRoute::ReferenceWebIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web".to_string(),
                                id: "web".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Running Javascript".to_string(),
                                id: "running-javascript".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Customizing Index Template".to_string(),
                                id: "customizing-index-template".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(28usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceWebIndex {},
                ::use_mdbook::mdbook_shared::PageId(28usize),
            );
        pages
            .push((
                29usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "SSR".to_string(),
                        url: BookRoute::ReferenceSsr {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Server-Side Rendering".to_string(),
                                id: "server-side-rendering".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setup".to_string(),
                                id: "setup".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Multithreaded Support".to_string(),
                                id: "multithreaded-support".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(29usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceSsr {},
                ::use_mdbook::mdbook_shared::PageId(29usize),
            );
        pages
            .push((
                30usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Liveview".to_string(),
                        url: BookRoute::ReferenceLiveview {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Liveview".to_string(),
                                id: "liveview".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Router Integration".to_string(),
                                id: "router-integration".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Managing Latency".to_string(),
                                id: "managing-latency".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(30usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceLiveview {},
                ::use_mdbook::mdbook_shared::PageId(30usize),
            );
        pages
            .push((
                31usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Fullstack".to_string(),
                        url: BookRoute::ReferenceFullstackIndex {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Fullstack development".to_string(),
                                id: "fullstack-development".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(31usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceFullstackIndex {
                },
                ::use_mdbook::mdbook_shared::PageId(31usize),
            );
        pages
            .push((
                32usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Server Functions".to_string(),
                        url: BookRoute::ReferenceFullstackServerFunctions {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Communicating with the server".to_string(),
                                id: "communicating-with-the-server".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Cached data fetching".to_string(),
                                id: "cached-data-fetching".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Running the client with dioxus-desktop".to_string(),
                                id: "running-the-client-with-dioxus-desktop".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Client code".to_string(),
                                id: "client-code".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Server code".to_string(),
                                id: "server-code".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(32usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceFullstackServerFunctions {
                },
                ::use_mdbook::mdbook_shared::PageId(32usize),
            );
        pages
            .push((
                33usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Extractors".to_string(),
                        url: BookRoute::ReferenceFullstackExtractors {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Extractors".to_string(),
                                id: "extractors".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(33usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceFullstackExtractors {
                },
                ::use_mdbook::mdbook_shared::PageId(33usize),
            );
        pages
            .push((
                34usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Middleware".to_string(),
                        url: BookRoute::ReferenceFullstackMiddleware {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Middleware".to_string(),
                                id: "middleware".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(34usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceFullstackMiddleware {
                },
                ::use_mdbook::mdbook_shared::PageId(34usize),
            );
        pages
            .push((
                35usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Authentication".to_string(),
                        url: BookRoute::ReferenceFullstackAuthentication {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Authentication".to_string(),
                                id: "authentication".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(35usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceFullstackAuthentication {
                },
                ::use_mdbook::mdbook_shared::PageId(35usize),
            );
        pages
            .push((
                36usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Routing".to_string(),
                        url: BookRoute::ReferenceFullstackRouting {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Routing".to_string(),
                                id: "routing".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(36usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ReferenceFullstackRouting {
                },
                ::use_mdbook::mdbook_shared::PageId(36usize),
            );
        pages
            .push((
                37usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Router".to_string(),
                        url: BookRoute::RouterIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Introduction".to_string(),
                                id: "introduction".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(37usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterIndex {},
                ::use_mdbook::mdbook_shared::PageId(37usize),
            );
        pages
            .push((
                38usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Example Project".to_string(),
                        url: BookRoute::RouterExampleIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Overview".to_string(),
                                id: "overview".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "You'll learn how to".to_string(),
                                id: "you'll-learn-how-to".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(38usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterExampleIndex {},
                ::use_mdbook::mdbook_shared::PageId(38usize),
            );
        pages
            .push((
                39usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Creating Our First Route".to_string(),
                        url: BookRoute::RouterExampleFirstRoute {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Creating Our First Route".to_string(),
                                id: "creating-our-first-route".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Fundamentals".to_string(),
                                id: "fundamentals".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Creating Routes".to_string(),
                                id: "creating-routes".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Fallback Route".to_string(),
                                id: "fallback-route".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Conclusion".to_string(),
                                id: "conclusion".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(39usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterExampleFirstRoute {
                },
                ::use_mdbook::mdbook_shared::PageId(39usize),
            );
        pages
            .push((
                40usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Building a Nest".to_string(),
                        url: BookRoute::RouterExampleBuildingANest {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Building a Nest".to_string(),
                                id: "building-a-nest".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Site Navigation".to_string(),
                                id: "site-navigation".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "URL Parameters and Nested Routes".to_string(),
                                id: "url-parameters-and-nested-routes".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Conclusion".to_string(),
                                id: "conclusion".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(40usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterExampleBuildingANest {
                },
                ::use_mdbook::mdbook_shared::PageId(40usize),
            );
        pages
            .push((
                41usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Navigation Targets".to_string(),
                        url: BookRoute::RouterExampleNavigationTargets {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Navigation Targets".to_string(),
                                id: "navigation-targets".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "What is a navigation target?".to_string(),
                                id: "what-is-a-navigation-target?".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "External navigation".to_string(),
                                id: "external-navigation".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(41usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterExampleNavigationTargets {
                },
                ::use_mdbook::mdbook_shared::PageId(41usize),
            );
        pages
            .push((
                42usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Redirection Perfection".to_string(),
                        url: BookRoute::RouterExampleRedirectionPerfection {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Redirection Perfection".to_string(),
                                id: "redirection-perfection".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Creating Redirects".to_string(),
                                id: "creating-redirects".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Conclusion".to_string(),
                                id: "conclusion".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Challenges".to_string(),
                                id: "challenges".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(42usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterExampleRedirectionPerfection {
                },
                ::use_mdbook::mdbook_shared::PageId(42usize),
            );
        pages
            .push((
                43usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Full Code".to_string(),
                        url: BookRoute::RouterExampleFullCode {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Full Code".to_string(),
                                id: "full-code".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(43usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterExampleFullCode {
                },
                ::use_mdbook::mdbook_shared::PageId(43usize),
            );
        pages
            .push((
                44usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Reference".to_string(),
                        url: BookRoute::RouterReferenceIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Adding the router to your application".to_string(),
                                id: "adding-the-router-to-your-application".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(44usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterReferenceIndex {},
                ::use_mdbook::mdbook_shared::PageId(44usize),
            );
        pages
            .push((
                45usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Defining Routes".to_string(),
                        url: BookRoute::RouterReferenceRoutesIndex {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Defining Routes".to_string(),
                                id: "defining-routes".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Route Segments".to_string(),
                                id: "route-segments".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Static segments".to_string(),
                                id: "static-segments".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Dynamic Segments".to_string(),
                                id: "dynamic-segments".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Catch All Segments".to_string(),
                                id: "catch-all-segments".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Query Segments".to_string(),
                                id: "query-segments".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(45usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterReferenceRoutesIndex {
                },
                ::use_mdbook::mdbook_shared::PageId(45usize),
            );
        pages
            .push((
                46usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Nested Routes".to_string(),
                        url: BookRoute::RouterReferenceRoutesNested {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Nested Routes".to_string(),
                                id: "nested-routes".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Nesting".to_string(),
                                id: "nesting".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(46usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterReferenceRoutesNested {
                },
                ::use_mdbook::mdbook_shared::PageId(46usize),
            );
        pages
            .push((
                47usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Layouts".to_string(),
                        url: BookRoute::RouterReferenceLayouts {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Layouts".to_string(),
                                id: "layouts".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Layouts with dynamic segments".to_string(),
                                id: "layouts-with-dynamic-segments".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(47usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterReferenceLayouts {
                },
                ::use_mdbook::mdbook_shared::PageId(47usize),
            );
        pages
            .push((
                48usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Navigation".to_string(),
                        url: BookRoute::RouterReferenceNavigationIndex {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Links & Navigation".to_string(),
                                id: "links-&-navigation".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(48usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterReferenceNavigationIndex {
                },
                ::use_mdbook::mdbook_shared::PageId(48usize),
            );
        pages
            .push((
                49usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Programmatic Navigation".to_string(),
                        url: BookRoute::RouterReferenceNavigationProgrammatic {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Programmatic Navigation".to_string(),
                                id: "programmatic-navigation".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Using a Navigator".to_string(),
                                id: "using-a-navigator".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "External Navigation Targets".to_string(),
                                id: "external-navigation-targets".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(49usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterReferenceNavigationProgrammatic {
                },
                ::use_mdbook::mdbook_shared::PageId(49usize),
            );
        pages
            .push((
                50usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "History Providers".to_string(),
                        url: BookRoute::RouterReferenceHistoryProviders {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "History Providers".to_string(),
                                id: "history-providers".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(50usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterReferenceHistoryProviders {
                },
                ::use_mdbook::mdbook_shared::PageId(50usize),
            );
        pages
            .push((
                51usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "History Buttons".to_string(),
                        url: BookRoute::RouterReferenceHistoryButtons {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "History Buttons".to_string(),
                                id: "history-buttons".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(51usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterReferenceHistoryButtons {
                },
                ::use_mdbook::mdbook_shared::PageId(51usize),
            );
        pages
            .push((
                52usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Static Generation".to_string(),
                        url: BookRoute::RouterReferenceStaticGeneration {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Static Generation".to_string(),
                                id: "static-generation".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Getting the Sitemap".to_string(),
                                id: "getting-the-sitemap".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Generating a Sitemap".to_string(),
                                id: "generating-a-sitemap".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Example".to_string(),
                                id: "example".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(52usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterReferenceStaticGeneration {
                },
                ::use_mdbook::mdbook_shared::PageId(52usize),
            );
        pages
            .push((
                53usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Routing Update Callback".to_string(),
                        url: BookRoute::RouterReferenceRoutingUpdateCallback {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Routing Update Callback".to_string(),
                                id: "routing-update-callback".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "How does the callback behave?".to_string(),
                                id: "how-does-the-callback-behave?".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Code Example".to_string(),
                                id: "code-example".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(53usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::RouterReferenceRoutingUpdateCallback {
                },
                ::use_mdbook::mdbook_shared::PageId(53usize),
            );
        pages
            .push((
                54usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Cookbook".to_string(),
                        url: BookRoute::CookbookIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Cookbook".to_string(),
                                id: "cookbook".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(54usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookIndex {},
                ::use_mdbook::mdbook_shared::PageId(54usize),
            );
        pages
            .push((
                55usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Publishing".to_string(),
                        url: BookRoute::CookbookPublishing {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Publishing".to_string(),
                                id: "publishing".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web: Publishing with GitHub Pages".to_string(),
                                id: "web:-publishing-with-github-pages".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Desktop: Creating an installer".to_string(),
                                id: "desktop:-creating-an-installer".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Preparing your application for bundling"
                                    .to_string(),
                                id: "preparing-your-application-for-bundling".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Install ".to_string(),
                                id: "install".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Building".to_string(),
                                id: "building".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(55usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookPublishing {},
                ::use_mdbook::mdbook_shared::PageId(55usize),
            );
        pages
            .push((
                56usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Anti-patterns".to_string(),
                        url: BookRoute::CookbookAntipatterns {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Antipatterns".to_string(),
                                id: "antipatterns".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Unnecessarily Nested Fragments".to_string(),
                                id: "unnecessarily-nested-fragments".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Incorrect Iterator Keys".to_string(),
                                id: "incorrect-iterator-keys".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Avoid Interior Mutability in Props".to_string(),
                                id: "avoid-interior-mutability-in-props".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Avoid Updating State During Render".to_string(),
                                id: "avoid-updating-state-during-render".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(56usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookAntipatterns {},
                ::use_mdbook::mdbook_shared::PageId(56usize),
            );
        pages
            .push((
                57usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Error Handling".to_string(),
                        url: BookRoute::CookbookErrorHandling {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Error handling".to_string(),
                                id: "error-handling".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The simplest – returning None".to_string(),
                                id: "the-simplest-–-returning-none".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Early return on result".to_string(),
                                id: "early-return-on-result".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Match results".to_string(),
                                id: "match-results".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Passing error states through components"
                                    .to_string(),
                                id: "passing-error-states-through-components".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Going global".to_string(),
                                id: "going-global".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(57usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookErrorHandling {
                },
                ::use_mdbook::mdbook_shared::PageId(57usize),
            );
        pages
            .push((
                58usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Integrations".to_string(),
                        url: BookRoute::CookbookIntegrationsIndex {
                        },
                        segments: vec![],
                        sections: vec![],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(58usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookIntegrationsIndex {
                },
                ::use_mdbook::mdbook_shared::PageId(58usize),
            );
        pages
            .push((
                59usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Logging".to_string(),
                        url: BookRoute::CookbookIntegrationsLogging {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Logging".to_string(),
                                id: "logging".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The Log Crate".to_string(),
                                id: "the-log-crate".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Dioxus Logger".to_string(),
                                id: "dioxus-logger".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Custom Format".to_string(),
                                id: "custom-format".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Timestamps".to_string(),
                                id: "timestamps".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Platform Intricacies".to_string(),
                                id: "platform-intricacies".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Final Notes".to_string(),
                                id: "final-notes".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Desktop and Server".to_string(),
                                id: "desktop-and-server".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web".to_string(),
                                id: "web".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Platform Intricacies".to_string(),
                                id: "platform-intricacies".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Android".to_string(),
                                id: "android".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Viewing Logs".to_string(),
                                id: "viewing-logs".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "iOS".to_string(),
                                id: "ios".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Viewing Logs".to_string(),
                                id: "viewing-logs".to_string(),
                                level: 4usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(59usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookIntegrationsLogging {
                },
                ::use_mdbook::mdbook_shared::PageId(59usize),
            );
        pages
            .push((
                60usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Internationalization".to_string(),
                        url: BookRoute::CookbookIntegrationsInternationalization {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Internationalization".to_string(),
                                id: "internationalization".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The full code for internationalization".to_string(),
                                id: "the-full-code-for-internationalization".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(60usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookIntegrationsInternationalization {
                },
                ::use_mdbook::mdbook_shared::PageId(60usize),
            );
        pages
            .push((
                61usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "State Management".to_string(),
                        url: BookRoute::CookbookStateIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "State Cookbook".to_string(),
                                id: "state-cookbook".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(61usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookStateIndex {},
                ::use_mdbook::mdbook_shared::PageId(61usize),
            );
        pages
            .push((
                62usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "External State".to_string(),
                        url: BookRoute::CookbookStateExternalIndex {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Working with External State".to_string(),
                                id: "working-with-external-state".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Working with non-reactive State".to_string(),
                                id: "working-with-non-reactive-state".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Making Reactive State External".to_string(),
                                id: "making-reactive-state-external".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(62usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookStateExternalIndex {
                },
                ::use_mdbook::mdbook_shared::PageId(62usize),
            );
        pages
            .push((
                63usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Custom Hooks".to_string(),
                        url: BookRoute::CookbookStateCustomHooksIndex {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Custom Hooks".to_string(),
                                id: "custom-hooks".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Composing Hooks".to_string(),
                                id: "composing-hooks".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Custom Hook Logic".to_string(),
                                id: "custom-hook-logic".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Hook Anti-Patterns".to_string(),
                                id: "hook-anti-patterns".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(63usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookStateCustomHooksIndex {
                },
                ::use_mdbook::mdbook_shared::PageId(63usize),
            );
        pages
            .push((
                64usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Testing".to_string(),
                        url: BookRoute::CookbookTesting {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Testing".to_string(),
                                id: "testing".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Component Testing".to_string(),
                                id: "component-testing".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Hook Testing".to_string(),
                                id: "hook-testing".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "End to End Testing".to_string(),
                                id: "end-to-end-testing".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(64usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookTesting {},
                ::use_mdbook::mdbook_shared::PageId(64usize),
            );
        pages
            .push((
                65usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Examples".to_string(),
                        url: BookRoute::CookbookExamples {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Examples".to_string(),
                                id: "examples".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(65usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookExamples {},
                ::use_mdbook::mdbook_shared::PageId(65usize),
            );
        pages
            .push((
                66usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Tailwind".to_string(),
                        url: BookRoute::CookbookTailwind {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Tailwind".to_string(),
                                id: "tailwind".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Setup".to_string(),
                                id: "setup".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Bonus Steps".to_string(),
                                id: "bonus-steps".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Development".to_string(),
                                id: "development".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web".to_string(),
                                id: "web".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Desktop".to_string(),
                                id: "desktop".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(66usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookTailwind {},
                ::use_mdbook::mdbook_shared::PageId(66usize),
            );
        pages
            .push((
                67usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Custom Renderer".to_string(),
                        url: BookRoute::CookbookCustomRenderer {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Custom Renderer".to_string(),
                                id: "custom-renderer".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The specifics:".to_string(),
                                id: "the-specifics:".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Templates".to_string(),
                                id: "templates".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Mutations".to_string(),
                                id: "mutations".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Node storage".to_string(),
                                id: "node-storage".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "An Example".to_string(),
                                id: "an-example".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Building Templates".to_string(),
                                id: "building-templates".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Applying Mutations".to_string(),
                                id: "applying-mutations".to_string(),
                                level: 4usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Event loop".to_string(),
                                id: "event-loop".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Custom raw elements".to_string(),
                                id: "custom-raw-elements".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Native Core".to_string(),
                                id: "native-core".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The RealDom".to_string(),
                                id: "the-realdom".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Example".to_string(),
                                id: "example".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Layout".to_string(),
                                id: "layout".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Text Editing".to_string(),
                                id: "text-editing".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Conclusion".to_string(),
                                id: "conclusion".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(67usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookCustomRenderer {
                },
                ::use_mdbook::mdbook_shared::PageId(67usize),
            );
        pages
            .push((
                68usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Optimizing".to_string(),
                        url: BookRoute::CookbookOptimizing {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Optimizing".to_string(),
                                id: "optimizing".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Building in release mode".to_string(),
                                id: "building-in-release-mode".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "UPX".to_string(),
                                id: "upx".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Build configuration".to_string(),
                                id: "build-configuration".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Stable".to_string(),
                                id: "stable".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Unstable".to_string(),
                                id: "unstable".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "wasm-opt".to_string(),
                                id: "wasm-opt".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Improving Dioxus code".to_string(),
                                id: "improving-dioxus-code".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Bundling and minifying the output JS and HTML"
                                    .to_string(),
                                id: "bundling-and-minifying-the-output-js-and-html"
                                    .to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(68usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CookbookOptimizing {},
                ::use_mdbook::mdbook_shared::PageId(68usize),
            );
        pages
            .push((
                69usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "CLI".to_string(),
                        url: BookRoute::CliIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Introduction".to_string(),
                                id: "introduction".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Features".to_string(),
                                id: "features".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(69usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CliIndex {},
                ::use_mdbook::mdbook_shared::PageId(69usize),
            );
        pages
            .push((
                70usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Installation".to_string(),
                        url: BookRoute::CliInstallation {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Installation".to_string(),
                                id: "installation".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Install the stable version (recommended)"
                                    .to_string(),
                                id: "install-the-stable-version-(recommended)".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Install the latest development build through git"
                                    .to_string(),
                                id: "install-the-latest-development-build-through-git"
                                    .to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(70usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CliInstallation {},
                ::use_mdbook::mdbook_shared::PageId(70usize),
            );
        pages
            .push((
                71usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Create a Project".to_string(),
                        url: BookRoute::CliCreating {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Create a Project".to_string(),
                                id: "create-a-project".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Initializing a project".to_string(),
                                id: "initializing-a-project".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(71usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CliCreating {},
                ::use_mdbook::mdbook_shared::PageId(71usize),
            );
        pages
            .push((
                72usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Configure Project".to_string(),
                        url: BookRoute::CliConfigure {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Configure Project".to_string(),
                                id: "configure-project".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Structure".to_string(),
                                id: "structure".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Application 🔒".to_string(),
                                id: "application-🔒".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web.App 🔒".to_string(),
                                id: "web.app-🔒".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web.Watcher 🔒".to_string(),
                                id: "web.watcher-🔒".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web.Resource 🔒".to_string(),
                                id: "web.resource-🔒".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web.Resource.Dev 🔒".to_string(),
                                id: "web.resource.dev-🔒".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web.Proxy".to_string(),
                                id: "web.proxy".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Config example".to_string(),
                                id: "config-example".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(72usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CliConfigure {},
                ::use_mdbook::mdbook_shared::PageId(72usize),
            );
        pages
            .push((
                73usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Translate HTML".to_string(),
                        url: BookRoute::CliTranslate {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Translating existing HTML".to_string(),
                                id: "translating-existing-html".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Usage".to_string(),
                                id: "usage".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(73usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::CliTranslate {},
                ::use_mdbook::mdbook_shared::PageId(73usize),
            );
        pages
            .push((
                74usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Contributing".to_string(),
                        url: BookRoute::ContributingIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Contributing".to_string(),
                                id: "contributing".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Improving Docs".to_string(),
                                id: "improving-docs".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Working on the Ecosystem".to_string(),
                                id: "working-on-the-ecosystem".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Bugs & Features".to_string(),
                                id: "bugs-&-features".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Before you contribute".to_string(),
                                id: "before-you-contribute".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "How to test dioxus with local crate".to_string(),
                                id: "how-to-test-dioxus-with-local-crate".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(74usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ContributingIndex {},
                ::use_mdbook::mdbook_shared::PageId(74usize),
            );
        pages
            .push((
                75usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Project Structure".to_string(),
                        url: BookRoute::ContributingProjectStructure {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Project Structure".to_string(),
                                id: "project-structure".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Renderers".to_string(),
                                id: "renderers".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "State Management/Hooks".to_string(),
                                id: "state-management/hooks".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Core utilities".to_string(),
                                id: "core-utilities".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Native Renderer Utilities".to_string(),
                                id: "native-renderer-utilities".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Web renderer tooling".to_string(),
                                id: "web-renderer-tooling".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Developer tooling".to_string(),
                                id: "developer-tooling".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(75usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ContributingProjectStructure {
                },
                ::use_mdbook::mdbook_shared::PageId(75usize),
            );
        pages
            .push((
                76usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Walkthrough of Internals".to_string(),
                        url: BookRoute::ContributingWalkthroughReadme {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Walkthrough of the Hello World Example Internals"
                                    .to_string(),
                                id: "walkthrough-of-the-hello-world-example-internals"
                                    .to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The Source File".to_string(),
                                id: "the-source-file".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The rsx! Macro".to_string(),
                                id: "the-rsx!-macro".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Launching the App".to_string(),
                                id: "launching-the-app".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The Virtual DOM".to_string(),
                                id: "the-virtual-dom".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "The Initial Render".to_string(),
                                id: "the-initial-render".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Waiting for Events".to_string(),
                                id: "waiting-for-events".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Diffing Scopes".to_string(),
                                id: "diffing-scopes".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Conclusion".to_string(),
                                id: "conclusion".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(76usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ContributingWalkthroughReadme {
                },
                ::use_mdbook::mdbook_shared::PageId(76usize),
            );
        pages
            .push((
                77usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Guiding Principles".to_string(),
                        url: BookRoute::ContributingGuidingPrinciples {
                        },
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Overall Goals".to_string(),
                                id: "overall-goals".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Cross-Platform".to_string(),
                                id: "cross-platform".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Performance".to_string(),
                                id: "performance".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Type Safety".to_string(),
                                id: "type-safety".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Developer Experience".to_string(),
                                id: "developer-experience".to_string(),
                                level: 2usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(77usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ContributingGuidingPrinciples {
                },
                ::use_mdbook::mdbook_shared::PageId(77usize),
            );
        pages
            .push((
                78usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Roadmap".to_string(),
                        url: BookRoute::ContributingRoadmap {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Roadmap & Feature-set".to_string(),
                                id: "roadmap-&-feature-set".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Features".to_string(),
                                id: "features".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Roadmap".to_string(),
                                id: "roadmap".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Core".to_string(),
                                id: "core".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "SSR".to_string(),
                                id: "ssr".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Desktop".to_string(),
                                id: "desktop".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Mobile".to_string(),
                                id: "mobile".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Bundling (CLI)".to_string(),
                                id: "bundling-(cli)".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Essential hooks".to_string(),
                                id: "essential-hooks".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Work in Progress".to_string(),
                                id: "work-in-progress".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Build Tool".to_string(),
                                id: "build-tool".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Server Component Support".to_string(),
                                id: "server-component-support".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Native rendering".to_string(),
                                id: "native-rendering".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(78usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::ContributingRoadmap {},
                ::use_mdbook::mdbook_shared::PageId(78usize),
            );
        pages
            .push((
                79usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Migration".to_string(),
                        url: BookRoute::MigrationIndex {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "0.3 Migration Guide".to_string(),
                                id: "0.3-migration-guide".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(79usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::MigrationIndex {},
                ::use_mdbook::mdbook_shared::PageId(79usize),
            );
        pages
            .push((
                80usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Router".to_string(),
                        url: BookRoute::MigrationRouter {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Router".to_string(),
                                id: "router".to_string(),
                                level: 1usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Defining Your Router".to_string(),
                                id: "defining-your-router".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Linking to routes".to_string(),
                                id: "linking-to-routes".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "External Links".to_string(),
                                id: "external-links".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "use_router".to_string(),
                                id: "use_router".to_string(),
                                level: 2usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "use_route".to_string(),
                                id: "use_route".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "use_navigator".to_string(),
                                id: "use_navigator".to_string(),
                                level: 3usize,
                            },
                            ::use_mdbook::mdbook_shared::Section {
                                title: "New features".to_string(),
                                id: "new-features".to_string(),
                                level: 3usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(80usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::MigrationRouter {},
                ::use_mdbook::mdbook_shared::PageId(80usize),
            );
        pages
            .push((
                81usize,
                {
                    ::use_mdbook::mdbook_shared::Page {
                        title: "Hot Reload".to_string(),
                        url: BookRoute::MigrationHotReload {},
                        segments: vec![],
                        sections: vec![
                            ::use_mdbook::mdbook_shared::Section {
                                title: "Hot reloading".to_string(),
                                id: "hot-reloading".to_string(),
                                level: 1usize,
                            },
                        ],
                        raw: String::new(),
                        id: ::use_mdbook::mdbook_shared::PageId(81usize),
                    }
                },
            ));
        page_id_mapping
            .insert(
                BookRoute::MigrationHotReload {},
                ::use_mdbook::mdbook_shared::PageId(81usize),
            );
        ::use_mdbook::mdbook_shared::MdBook {
            summary: ::use_mdbook::mdbook_shared::Summary {
                title: Some("Summary".to_string()),
                prefix_chapters: vec![
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Introduction".to_string(),
                        location: Some(BookRoute::Index {}),
                        number: None,
                        nested_items: vec![],
                    }),
                ],
                numbered_chapters: vec![
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Getting Started".to_string(),
                        location: Some(BookRoute::GettingStartedIndex {}),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![1u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Choosing A Web Renderer".to_string(),
                                location: Some(BookRoute::GettingStartedChoosingAWebRenderer {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![1u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Web".to_string(),
                                location: Some(BookRoute::GettingStartedWasm {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![1u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Liveview".to_string(),
                                location: Some(BookRoute::GettingStartedLiveview {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![1u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Fullstack".to_string(),
                                location: Some(BookRoute::GettingStartedFullstack {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![1u32, 4u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Desktop".to_string(),
                                location: Some(BookRoute::GettingStartedDesktop {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![1u32, 5u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Mobile".to_string(),
                                location: Some(BookRoute::GettingStartedMobile {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![1u32, 6u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Terminal UI".to_string(),
                                location: Some(BookRoute::GettingStartedTui {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![1u32, 7u32]),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Guide".to_string(),
                        location: Some(BookRoute::GuideIndex {}),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Your First Component".to_string(),
                                location: Some(BookRoute::GuideYourFirstComponent {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "State".to_string(),
                                location: Some(BookRoute::GuideState {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Data Fetching".to_string(),
                                location: Some(BookRoute::GuideDataFetching {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Full Code".to_string(),
                                location: Some(BookRoute::GuideFullCode {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![2u32, 4u32]),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Reference".to_string(),
                        location: Some(BookRoute::ReferenceIndex {}),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "RSX".to_string(),
                                location: Some(BookRoute::ReferenceRsx {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Components".to_string(),
                                location: Some(BookRoute::ReferenceComponents {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Props".to_string(),
                                location: Some(BookRoute::ReferenceComponentProps {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Event Handlers".to_string(),
                                location: Some(BookRoute::ReferenceEventHandlers {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 4u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Hooks".to_string(),
                                location: Some(BookRoute::ReferenceHooks {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 5u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "User Input".to_string(),
                                location: Some(BookRoute::ReferenceUserInput {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 6u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Context".to_string(),
                                location: Some(BookRoute::ReferenceContext {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 7u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Dynamic Rendering".to_string(),
                                location: Some(BookRoute::ReferenceDynamicRendering {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 8u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Routing".to_string(),
                                location: Some(BookRoute::ReferenceRouter {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![3u32, 9u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "UseFuture".to_string(),
                                location: Some(BookRoute::ReferenceUseFuture {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![3u32, 10u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "UseCoroutine".to_string(),
                                location: Some(BookRoute::ReferenceUseCoroutine {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![3u32, 11u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Spawn".to_string(),
                                location: Some(BookRoute::ReferenceSpawn {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![3u32, 12u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Desktop".to_string(),
                                location: Some(BookRoute::ReferenceDesktopIndex {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![3u32, 13u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Web".to_string(),
                                location: Some(BookRoute::ReferenceWebIndex {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![3u32, 14u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "SSR".to_string(),
                                location: Some(BookRoute::ReferenceSsr {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![3u32, 15u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Liveview".to_string(),
                                location: Some(BookRoute::ReferenceLiveview {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![3u32, 16u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Fullstack".to_string(),
                                location: Some(BookRoute::ReferenceFullstackIndex {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![3u32, 17u32],
                                    ),
                                ),
                                nested_items: vec![
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Server Functions".to_string(),
                                        location: Some(BookRoute::ReferenceFullstackServerFunctions {}),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![3u32, 17u32, 1u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Extractors".to_string(),
                                        location: Some(BookRoute::ReferenceFullstackExtractors {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![3u32, 17u32, 2u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Middleware".to_string(),
                                        location: Some(BookRoute::ReferenceFullstackMiddleware {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![3u32, 17u32, 3u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Authentication".to_string(),
                                        location: Some(BookRoute::ReferenceFullstackAuthentication {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![3u32, 17u32, 4u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Routing".to_string(),
                                        location: Some(BookRoute::ReferenceFullstackRouting {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![3u32, 17u32, 5u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                ],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Router".to_string(),
                        location: Some(BookRoute::RouterIndex {}),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Example Project".to_string(),
                                location: Some(BookRoute::RouterExampleIndex {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 1u32]),
                                ),
                                nested_items: vec![
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Creating Our First Route".to_string(),
                                        location: Some(BookRoute::RouterExampleFirstRoute {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 1u32, 1u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Building a Nest".to_string(),
                                        location: Some(BookRoute::RouterExampleBuildingANest {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 1u32, 2u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Navigation Targets".to_string(),
                                        location: Some(BookRoute::RouterExampleNavigationTargets {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 1u32, 3u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Redirection Perfection".to_string(),
                                        location: Some(BookRoute::RouterExampleRedirectionPerfection {}),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 1u32, 4u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Full Code".to_string(),
                                        location: Some(BookRoute::RouterExampleFullCode {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 1u32, 5u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                ],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Reference".to_string(),
                                location: Some(BookRoute::RouterReferenceIndex {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![4u32, 2u32]),
                                ),
                                nested_items: vec![
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Defining Routes".to_string(),
                                        location: Some(BookRoute::RouterReferenceRoutesIndex {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 2u32, 1u32],
                                            ),
                                        ),
                                        nested_items: vec![
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Nested Routes".to_string(),
                                                location: Some(BookRoute::RouterReferenceRoutesNested {
                                                }),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 1u32, 1u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                        ],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Layouts".to_string(),
                                        location: Some(BookRoute::RouterReferenceLayouts {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 2u32, 2u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Navigation".to_string(),
                                        location: Some(BookRoute::RouterReferenceNavigationIndex {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 2u32, 3u32],
                                            ),
                                        ),
                                        nested_items: vec![
                                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                                name: "Programmatic Navigation".to_string(),
                                                location: Some(BookRoute::RouterReferenceNavigationProgrammatic {}),
                                                number: Some(
                                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                                        vec![4u32, 2u32, 3u32, 1u32],
                                                    ),
                                                ),
                                                nested_items: vec![],
                                            }),
                                        ],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "History Providers".to_string(),
                                        location: Some(BookRoute::RouterReferenceHistoryProviders {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 2u32, 4u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "History Buttons".to_string(),
                                        location: Some(BookRoute::RouterReferenceHistoryButtons {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 2u32, 5u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Static Generation".to_string(),
                                        location: Some(BookRoute::RouterReferenceStaticGeneration {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 2u32, 6u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Routing Update Callback".to_string(),
                                        location: Some(BookRoute::RouterReferenceRoutingUpdateCallback {}),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![4u32, 2u32, 7u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                ],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Cookbook".to_string(),
                        location: Some(BookRoute::CookbookIndex {}),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Publishing".to_string(),
                                location: Some(BookRoute::CookbookPublishing {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Anti-patterns".to_string(),
                                location: Some(BookRoute::CookbookAntipatterns {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Error Handling".to_string(),
                                location: Some(BookRoute::CookbookErrorHandling {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Integrations".to_string(),
                                location: Some(BookRoute::CookbookIntegrationsIndex {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 4u32]),
                                ),
                                nested_items: vec![
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Logging".to_string(),
                                        location: Some(BookRoute::CookbookIntegrationsLogging {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![5u32, 4u32, 1u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Internationalization".to_string(),
                                        location: Some(BookRoute::CookbookIntegrationsInternationalization {}),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![5u32, 4u32, 2u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                ],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "State Management".to_string(),
                                location: Some(BookRoute::CookbookStateIndex {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 5u32]),
                                ),
                                nested_items: vec![
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "External State".to_string(),
                                        location: Some(BookRoute::CookbookStateExternalIndex {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![5u32, 5u32, 1u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                        name: "Custom Hooks".to_string(),
                                        location: Some(BookRoute::CookbookStateCustomHooksIndex {
                                        }),
                                        number: Some(
                                            ::use_mdbook::mdbook_shared::SectionNumber(
                                                vec![5u32, 5u32, 2u32],
                                            ),
                                        ),
                                        nested_items: vec![],
                                    }),
                                ],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Testing".to_string(),
                                location: Some(BookRoute::CookbookTesting {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 6u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Examples".to_string(),
                                location: Some(BookRoute::CookbookExamples {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 7u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Tailwind".to_string(),
                                location: Some(BookRoute::CookbookTailwind {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 8u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Custom Renderer".to_string(),
                                location: Some(BookRoute::CookbookCustomRenderer {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![5u32, 9u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Optimizing".to_string(),
                                location: Some(BookRoute::CookbookOptimizing {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(
                                        vec![5u32, 10u32],
                                    ),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "CLI".to_string(),
                        location: Some(BookRoute::CliIndex {}),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![6u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Installation".to_string(),
                                location: Some(BookRoute::CliInstallation {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![6u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Create a Project".to_string(),
                                location: Some(BookRoute::CliCreating {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![6u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Configure Project".to_string(),
                                location: Some(BookRoute::CliConfigure {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![6u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Translate HTML".to_string(),
                                location: Some(BookRoute::CliTranslate {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![6u32, 4u32]),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Contributing".to_string(),
                        location: Some(BookRoute::ContributingIndex {}),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![7u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Project Structure".to_string(),
                                location: Some(BookRoute::ContributingProjectStructure {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![7u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Walkthrough of Internals".to_string(),
                                location: Some(BookRoute::ContributingWalkthroughReadme {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![7u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Guiding Principles".to_string(),
                                location: Some(BookRoute::ContributingGuidingPrinciples {
                                }),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![7u32, 3u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Roadmap".to_string(),
                                location: Some(BookRoute::ContributingRoadmap {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![7u32, 4u32]),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                    ::use_mdbook::mdbook_shared::SummaryItem::Separator,
                    ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                        name: "Migration".to_string(),
                        location: Some(BookRoute::MigrationIndex {}),
                        number: Some(
                            ::use_mdbook::mdbook_shared::SectionNumber(vec![8u32]),
                        ),
                        nested_items: vec![
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Router".to_string(),
                                location: Some(BookRoute::MigrationRouter {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![8u32, 1u32]),
                                ),
                                nested_items: vec![],
                            }),
                            ::use_mdbook::mdbook_shared::SummaryItem::Link(::use_mdbook::mdbook_shared::Link {
                                name: "Hot Reload".to_string(),
                                location: Some(BookRoute::MigrationHotReload {}),
                                number: Some(
                                    ::use_mdbook::mdbook_shared::SectionNumber(vec![8u32, 2u32]),
                                ),
                                nested_items: vec![],
                            }),
                        ],
                    }),
                ],
                suffix_chapters: vec![],
            },
            pages: pages.into_iter().collect(),
            page_id_mapping,
        }
    }
});
#[component(no_case_check)]
pub fn Index() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "introduction",
            a { href: "#introduction", class: "header", "Introduction" }
        }
        p {
            "Dioxus is a portable, performant, and ergonomic framework for building cross-platform user interfaces in Rust. This guide will help you get started with writing Dioxus apps for the Web, Desktop, Mobile, and more."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">High-Five counter: {{count}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">Up high!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count -= </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">Down low!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        DemoFrame { readme::App {} }
        p {
            "Dioxus is heavily inspired by React. If you know React, getting started with Dioxus will be a breeze."
        }
        blockquote {
            p {
                "This guide assumes you already know some "
                a { href: "https://www.rust-lang.org/", "" }
                "! If not, we recommend reading "
                a { href: "https://doc.rust-lang.org/book/ch01-00-getting-started.html",
                    ""
                    em { "the book" }
                }
                " to learn Rust first."
            }
        }
        h2 { id: "features",
            a { href: "#features", class: "header", "Features" }
        }
        ul {
            li { "Desktop apps running natively (no Electron!) in less than 10 lines of code." }
            li { "Incredibly ergonomic and powerful state management." }
            li {
                "Comprehensive inline documentation – hover and guides for all HTML elements, listeners, and events."
            }
            li { "Extremely memory efficient – 0 global allocations for steady-state components." }
            li { "Multi-channel asynchronous scheduler for first-class async support." }
            li {
                "And more! Read the "
                a { href: "https://dioxuslabs.com/blog/introducing-dioxus/", "" }
                "."
            }
        }
        h3 { id: "multiplatform",
            a { href: "#multiplatform", class: "header", "Multiplatform" }
        }
        p {
            "Dioxus is a "
            em { "portable" }
            " toolkit, meaning the Core implementation can run anywhere with no platform-dependent linking. Unlike many other Rust frontend toolkits, Dioxus is not intrinsically linked to WebSys. In fact, every element and event listener can be swapped out at compile time. By default, Dioxus ships with the "
            code { "html" }
            " feature enabled, but this can be disabled depending on your target renderer."
        }
        p { "Right now, we have several 1st-party renderers:" }
        ul {
            li { "WebSys (for WASM): Great support" }
            li { "Tao/Tokio (for Desktop apps): Good support" }
            li { "Tao/Tokio (for Mobile apps): Poor support" }
            li { "SSR (for generating static markup)" }
            li { "TUI/Rink (for terminal-based apps): Experimental" }
        }
        h2 { id: "stability",
            a { href: "#stability", class: "header", "Stability" }
        }
        p { "Dioxus has not reached a stable release yet." }
        p {
            "Web: Since the web is a fairly mature platform, we expect there to be very little API churn for web-based features."
        }
        p {
            "Desktop: APIs will likely be in flux as we figure out better patterns than our ElectronJS counterpart."
        }
        p { "SSR: We don't expect the SSR API to change drastically in the future." }
    }
}
#[component(no_case_check)]
pub fn GettingStartedIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "getting-started",
            a { href: "#getting-started", class: "header", "Getting Started" }
        }
        p { "This section will help you set up your Dioxus project!" }
        h2 { id: "prerequisites",
            a { href: "#prerequisites", class: "header", "Prerequisites" }
        }
        h3 { id: "an-editor",
            a { href: "#an-editor", class: "header", "An Editor" }
        }
        p {
            "Dioxus integrates very well with the "
            a { href: "https://rust-analyzer.github.io", "" }
            " which will provide appropriate syntax highlighting, code navigation, folding, and more."
        }
        h3 { id: "rust",
            a { href: "#rust", class: "header", "Rust" }
        }
        p {
            "Head over to "
            a { href: "http://rust-lang.org", "" }
            " and install the Rust compiler."
        }
        p {
            "We strongly recommend going through the "
            a { href: "https://doc.rust-lang.org/book/ch01-00-getting-started.html",
                ""
            }
            " "
            em { "completely" }
            ". However, we hope that a Dioxus app can serve as a great first Rust project. With Dioxus, you'll learn about:"
        }
        ul {
            li { "Error handling" }
            li { "Structs, Functions, Enums" }
            li { "Closures" }
            li { "Macros" }
        }
        p {
            "We've put a lot of care into making Dioxus syntax familiar and easy to understand, so you won't need deep knowledge of async, lifetimes, or smart pointers until you start building complex Dioxus apps."
        }
        h2 { id: "setup-guides",
            a { href: "#setup-guides", class: "header", "Setup Guides" }
        }
        p {
            "Dioxus supports multiple platforms. Choose the platform you want to target below to get platform-specific setup instructions:"
        }
        ul {
            li {
                a { href: "getting_started/choosing_a_web_renderer", "" }
            }
            li {
                a { href: "getting_started/wasm", "" }
                ": runs in the browser through WebAssembly"
            }
            li {
                a { href: "getting_started/liveview", "" }
                ": runs on the server, renders in the browser using WebSockets"
            }
            li {
                a { href: "getting_started/fullstack", "" }
                ": renders to HTML text on the server and hydrates it on the client"
            }
            li {
                a { href: "getting_started/desktop", "" }
                ": runs in a web view on desktop"
            }
            li {
                a { href: "getting_started/mobile", "" }
                ": runs in a web view on mobile"
            }
            li {
                a { href: "getting_started/tui", "" }
                ": renders text-based graphics in the terminal"
            }
        }
        blockquote {
            p {
                "More information on any platform you choose is available in the section of the same name in the "
                a { href: "getting_started/../reference", "" }
            }
        }
    }
}
#[component(no_case_check)]
pub fn GettingStartedChoosingAWebRenderer() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "choosing-a-web-renderer",
            a { href: "#choosing-a-web-renderer", class: "header", "Choosing a web renderer" }
        }
        p { "Dioxus has three different renderers that target the web:" }
        ul {
            li {
                a { href: "wasm", "" }
                " allows you to render your application to HTML with "
                a { href: "https://rustwasm.github.io/docs/book/", "" }
                " on the client"
            }
            li {
                a { href: "liveview", "" }
                " allows you to run your application on the server and render it to HTML on the client with a websocket"
            }
            li {
                a { href: "fullstack", "" }
                " allows you to initially render static HTML on the server and then update that HTML from the client with "
                a { href: "https://rustwasm.github.io/docs/book/", "" }
            }
        }
        p { "Each approach has its tradeoffs:" }
        h3 { id: "dioxus-liveview",
            a { href: "#dioxus-liveview", class: "header", "Dioxus Liveview" }
        }
        ul {
            li {
                p {
                    "Liveview rendering communicates with the server over a WebSocket connection. It essentially moves all of the work that Client-side rendering does to the server."
                }
            }
            li {
                p {
                    "This makes it "
                    strong {
                        "easy to communicate with the server, but more difficult to communicate with the client/browser APIS"
                    }
                    "."
                }
            }
            li {
                p {
                    "Each interaction also requires a message to be sent to the server and back which can cause "
                    strong { "issues with latency" }
                    "."
                }
            }
            li {
                p {
                    "Because Liveview uses a websocket to render, the page will be blank until the WebSocket connection has been established and the first renderer has been sent from the websocket. Just like with client side rendering, this can make the page "
                    strong { "less SEO-friendly" }
                    "."
                }
            }
            li {
                p {
                    "Because the page is rendered on the server and the page is sent to the client piece by piece, you never need to send the entire application to the client. The initial load time can be faster than client-side rendering with large applications because Liveview only needs to send a constant small websocket script regardless of the size of the application."
                }
            }
        }
        blockquote {
            p {
                "Liveview is a good fit for applications that already need to communicate with the server frequently (like real time collaborative apps), but don't need to communicate with as many client/browser APIs."
            }
        }
        p {
            a { href: "https://mermaid.live/edit#pako:eNplULFOw0AM_RXLc7Mw3sBQVUIMRYgKdcli5ZzkRHIuPl8QqvrvXJICRXiy3nt-9-6dsRHP6DAZGe8CdUpjNd3VEcpsVT4SK1TVPRxYJ1YHL_yeOdkqWMGF3w4U32Y6nSQmXvknMQYNXW8g7bfk2JPBg0g3MCTmdH1rJhenx2is1FiYri43wJ8or3O2H1Liv0w3hw724kMb2MMzdcUYNziyjhR8-f15Pq3Reh65RldWzy3lwWqs46VIKZscPmODzjTzBvPJ__aFrqUhFZR9MNH92uhS7OULYSF1lw",
                ""
                img {
                    src: "https://mermaid.ink/img/pako:eNplULFOw0AM_RXLc7Mw3sBQVUIMRYgKdcli5ZzkRHIuPl8QqvrvXJICRXiy3nt-9-6dsRHP6DAZGe8CdUpjNd3VEcpsVT4SK1TVPRxYJ1YHL_yeOdkqWMGF3w4U32Y6nSQmXvknMQYNXW8g7bfk2JPBg0g3MCTmdH1rJhenx2is1FiYri43wJ8or3O2H1Liv0w3hw724kMb2MMzdcUYNziyjhR8-f15Pq3Reh65RldWzy3lwWqs46VIKZscPmODzjTzBvPJ__aFrqUhFZR9MNH92uhS7OULYSF1lw?type=png",
                    alt: "",
                    title: "",
                }
            }
        }
        h3 { id: "dioxus-web",
            a { href: "#dioxus-web", class: "header", "Dioxus Web" }
        }
        ul {
            li {
                p {
                    "With Client side rendering, you send your application to the client, and then the client generates all of the HTML of the page dynamically."
                }
            }
            li {
                p {
                    "This means that the page will be blank until the JavaScript bundle has loaded and the application has initialized. This can result in "
                    strong { "slower first render times and poor SEO performance" }
                    "."
                }
            }
        }
        blockquote {
            p {
                "SEO stands for Search Engine Optimization. It refers to the practice of making your website more likely to appear in search engine results. Search engines like Google and Bing use web crawlers to index the content of websites. Most of these crawlers are not able to run JavaScript, so they will not be able to index the content of your page if it is rendered client-side."
            }
        }
        ul {
            li {
                "Client-side rendered applications need to use "
                strong { "weakly typed requests to communicate with the server" }
                "."
            }
        }
        blockquote {
            p {
                "Client-side rendering is a good starting point for most applications. It is well supported and makes it easy to communicate with the client/browser APIs."
            }
        }
        p {
            a { href: "https://mermaid.live/edit#pako:eNpVkDFPwzAQhf-KdXOzMHpgqJAQAwytEIsXK35JLBJfez4Xoar_HSemQtzke9_z2e-u1HMAWcrqFU_Rj-KX7vLgkqm1F_7KENN1j-YIuUCsOeBckLUZmrjx_ezT54rziVNG42-sMBLHSQ0Pd8vH5NU8M48zTAby71sr3CYdkAIEoen37h-y5n3910tSiO81cqIdLZDFx1DDXNerjnTCAke2HgMGX2Z15NKtWn1RPn6nnqxKwY7KKfzFJzv4OVcVISrLa1vQtqfbDzd0ZKY",
                ""
                img {
                    src: "https://mermaid.ink/img/pako:eNpVkDFPwzAQhf-KdXOzMHpgqJAQAwytEIsXK35JLBJfez4Xoar_HSemQtzke9_z2e-u1HMAWcrqFU_Rj-KX7vLgkqm1F_7KENN1j-YIuUCsOeBckLUZmrjx_ezT54rziVNG42-sMBLHSQ0Pd8vH5NU8M48zTAby71sr3CYdkAIEoen37h-y5n3910tSiO81cqIdLZDFx1DDXNerjnTCAke2HgMGX2Z15NKtWn1RPn6nnqxKwY7KKfzFJzv4OVcVISrLa1vQtqfbDzd0ZKY?type=png",
                    alt: "",
                    title: "",
                }
            }
        }
        h3 { id: "dioxus-fullstack",
            a { href: "#dioxus-fullstack", class: "header", "Dioxus Fullstack" }
        }
        p { "Fullstack rendering happens in two parts:" }
        ol {
            li {
                "The page is rendered on the server. This can include fetching any data you need to render the page."
            }
            li {
                "The page is hydrated on the client. (Hydration is taking the HTML page from the server and adding all of the event listeners Dioxus needs on the client). Any updates to the page happen on the client after this point."
            }
        }
        p {
            "Because the page is initially rendered on the server, the page will be fully rendered when it is sent to the client. This results in a faster first render time and makes the page more SEO-friendly."
        }
        ul {
            li {
                strong { "Fast initial render" }
            }
            li {
                strong { "Works well with SEO" }
            }
            li {
                strong { "Type safe easy communication with the server" }
            }
            li {
                strong { "Access to the client/browser APIs" }
            }
            li {
                strong { "Fast interactivity" }
            }
        }
        p {
            "Finally, we can use "
            a { href: "../reference/fullstack/server_functions", "" }
            " to communicate with the server in a type-safe way."
        }
        p {
            "This approach uses both the dioxus-web and dioxus-ssr crates. To integrate those two packages and  "
            code { "axum" }
            ",  "
            code { "warp" }
            ", or  "
            code { "salvo" }
            ", Dioxus provides the  "
            code { "dioxus-fullstack" }
            " crate."
        }
        p {
            "There can be more complexity with fullstack applications because your code runs in two different places. Dioxus tries to mitigate this with server functions and other helpers."
        }
        p {
            a { href: "https://mermaid.live/edit#pako:eNpdkL1uwzAMhF9F4BwvHTV0KAIUHdohQdFFi2CdbQG2mFCUiyDIu9e2-hOUE3H34UDelVoOIEtZvWIffS9-auYHl8wyT8KfGWKa5tEcITPEmgPOBVkrUMXNPyAFCMJK5BOnjIq8scJI7Ac13N1RH4NX88zcjzAZyJX-8bfIl6QQ32qcv7PuhP-ANe_rpb8KJ9rRBJl8DMt71zXAkQ6Y4Mgua0Dny6iOXLotqC_Kx0tqyaoU7Kicwl8hZDs_5kVFiMryWivbmrt9AacxbGg",
                ""
                img {
                    src: "https://mermaid.ink/img/pako:eNpdkL1uwzAMhF9F4BwvHTV0KAIUHdohQdFFi2CdbQG2mFCUiyDIu9e2-hOUE3H34UDelVoOIEtZvWIffS9-auYHl8wyT8KfGWKa5tEcITPEmgPOBVkrUMXNPyAFCMJK5BOnjIq8scJI7Ac13N1RH4NX88zcjzAZyJX-8bfIl6QQ32qcv7PuhP-ANe_rpb8KJ9rRBJl8DMt71zXAkQ6Y4Mgua0Dny6iOXLotqC_Kx0tqyaoU7Kicwl8hZDs_5kVFiMryWivbmrt9AacxbGg?type=png",
                    alt: "",
                    title: "",
                }
            }
        }
    }
}
#[component(no_case_check)]
pub fn GettingStartedWasm() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "web",
            a { href: "#web", class: "header", "Web" }
        }
        p {
            "Build single-page applications that run in the browser with Dioxus. To run on the Web, your app must be compiled to WebAssembly and depend on the  "
            code { "dioxus" }
            " and  "
            code { "dioxus-web" }
            " crates."
        }
        p {
            "A build of Dioxus for the web will be roughly equivalent to the size of a React build (70kb vs 65kb) but it will load significantly faster because "
            a { href: "https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/",
                ""
            }
            "."
        }
        p { "Examples:" }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/example-projects/tree/master/todomvc",
                    ""
                }
            }
            li {
                a { href: "https://github.com/DioxusLabs/example-projects/tree/master/ecommerce-site",
                    ""
                }
            }
        }
        p {
            a { href: "https://github.com/DioxusLabs/example-projects/blob/master/todomvc",
                ""
                img {
                    src: "https://github.com/DioxusLabs/example-projects/raw/master/todomvc/example.png",
                    alt: "TodoMVC example",
                    title: "",
                }
            }
        }
        blockquote {
            p {
                "Note: Because of the limitations of Wasm, "
                a { href: "https://rustwasm.github.io/docs/book/reference/which-crates-work-with-wasm.html",
                    ""
                }
                " with your web apps, so you'll need to make sure that your crates work without native system calls (timers, IO, etc)."
            }
        }
        h2 { id: "support",
            a { href: "#support", class: "header", "Support" }
        }
        p { "The Web is the best-supported target platform for Dioxus." }
        ul {
            li {
                "Because your app will be compiled to WASM you have access to browser APIs through "
                a { href: "https://rustwasm.github.io/docs/wasm-bindgen/introduction.html",
                    ""
                }
                "."
            }
            li {
                "Dioxus provides hydration to resume apps that are rendered on the server. See the "
                a { href: "fullstack", "" }
                " getting started guide for more information."
            }
        }
        h2 { id: "tooling",
            a { href: "#tooling", class: "header", "Tooling" }
        }
        p {
            "To develop your Dioxus app for the web, you'll need a tool to build and serve your assets. We recommend using "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/cli",
                ""
            }
            " which includes a build system, Wasm optimization, a dev server, and support hot reloading:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo install dioxus-cli\n</span></pre>\n" }
        p {
            "Make sure the  "
            code { "wasm32-unknown-unknown" }
            " target for rust is installed:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">rustup target add wasm32-unknown-unknown\n</span></pre>\n" }
        h2 { id: "creating-a-project",
            a { href: "#creating-a-project", class: "header", "Creating a Project" }
        }
        p { "Create a new crate:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo new --bin demo\n</span><span style=\"color:#c0c5ce;\">cd demo\n</span></pre>\n" }
        p {
            "Add Dioxus and the web renderer as dependencies (this will edit your  "
            code { "Cargo.toml" }
            "):"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add dioxus\n</span><span style=\"color:#c0c5ce;\">cargo add dioxus-web\n</span></pre>\n" }
        p {
            "Edit your  "
            code { "main.rs" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#65737e;\">// import the prelude to get access to the `rsx!` macro and the `Scope` and `Element` types\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// launch the web app\n</span><span style=\"color:#c0c5ce;\">    dioxus_web::launch(App);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// create a component that renders a div with the text &quot;Hello, world!&quot;\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Hello, world!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        p { "And to serve our app:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx serve\n</span></pre>\n" }
        p {
            "If you open the browser and navigate to  "
            code { "127.0.0.1" }
            " you should see an app that looks like this:"
        }
        DemoFrame { hello_world::HelloWorldCounter {} }
        h2 { id: "hot-reload",
            a { href: "#hot-reload", class: "header", "Hot Reload" }
        }
        ol {
            li {
                "Hot reloading allows much faster iteration times inside of rsx calls by interpreting them and streaming the edits."
            }
            li {
                "It is useful when changing the styling/layout of a program, but will not help with changing the logic of a program."
            }
        }
        p {
            "For the web renderer, you can use the dioxus cli to serve your application with hot reloading enabled."
        }
        h3 { id: "setup",
            a { href: "#setup", class: "header", "Setup" }
        }
        p {
            "Install "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/cli",
                ""
            }
            "."
        }
        h3 { id: "usage",
            a { href: "#usage", class: "header", "Usage" }
        }
        ol {
            li { "Run:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx serve --hot-reload\n</span></pre>\n" }
        ol {
            li { "Change some code within a rsx or render macro" }
            li { "Open your localhost in a browser" }
            li { "Save and watch the style change without recompiling" }
        }
        h3 { id: "limitations",
            a { href: "#limitations", class: "header", "Limitations" }
        }
        ol {
            li {
                "The interpreter can only use expressions that existed on the last full recompile. If you introduce a new variable or expression to the rsx call, it will require a full recompile to capture the expression."
            }
            li {
                "Components, Iterators, and some attributes can contain arbitrary rust code and will trigger a full recompile when changed."
            }
        }
    }
}
#[component(no_case_check)]
pub fn GettingStartedLiveview() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "liveview",
            a { href: "#liveview", class: "header", "Liveview" }
        }
        p {
            "Liveview allows apps to "
            em { "run" }
            " on the server and "
            em { "render" }
            " in the browser. It uses WebSockets to communicate between the server and the browser."
        }
        p { "Examples:" }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/liveview/examples/axum.rs",
                    ""
                }
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/liveview/examples/salvo.rs",
                    ""
                }
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/liveview/examples/warp.rs",
                    ""
                }
            }
        }
        h2 { id: "support",
            a { href: "#support", class: "header", "Support" }
        }
        p {
            "Liveview is currently limited in capability when compared to the Web platform. Liveview apps run on the server in a native thread. This means that browser APIs are not available, so rendering WebGL, Canvas, etc is not as easy as the Web. However, native system APIs are accessible, so streaming, WebSockets, filesystem, etc are all viable APIs."
        }
        h2 { id: "setup",
            a { href: "#setup", class: "header", "Setup" }
        }
        p {
            "For this guide, we're going to show how to use Dioxus Liveview with "
            a { href: "https://docs.rs/axum/latest/axum/", "" }
            "."
        }
        p { "Make sure you have Rust and Cargo installed, and then create a new project:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo new --bin demo\n</span><span style=\"color:#c0c5ce;\">cd demo\n</span></pre>\n" }
        p { "Add Dioxus and the liveview renderer with the Axum feature as dependencies:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add dioxus\n</span><span style=\"color:#c0c5ce;\">cargo add dioxus-liveview --features axum\n</span></pre>\n" }
        p {
            "Next, add all the Axum dependencies. This will be different if you're using a different Web Framework"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add tokio --features full\n</span><span style=\"color:#c0c5ce;\">cargo add axum\n</span></pre>\n" }
        p { "Your dependencies should look roughly like this:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[dependencies]\n</span><span style=\"color:#c0c5ce;\">axum = &quot;</span><span style=\"color:#a3be8c;\">0.4.5</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">dioxus = {{ version = &quot;</span><span style=\"color:#a3be8c;\">*</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">dioxus-liveview = {{ version = &quot;</span><span style=\"color:#a3be8c;\">*</span><span style=\"color:#c0c5ce;\">&quot;, features = [&quot;</span><span style=\"color:#a3be8c;\">axum</span><span style=\"color:#c0c5ce;\">&quot;] }}\n</span><span style=\"color:#c0c5ce;\">tokio = {{ version = &quot;</span><span style=\"color:#a3be8c;\">1.15.0</span><span style=\"color:#c0c5ce;\">&quot;, features = [&quot;</span><span style=\"color:#a3be8c;\">full</span><span style=\"color:#c0c5ce;\">&quot;] }}\n</span></pre>\n" }
        p { "Now, set up your Axum app to respond on an endpoint." }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">axum::{{extract::ws::WebSocketUpgrade, response::Html, routing::get, Router}};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">tokio</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">main</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> addr: std::net::SocketAddr = ([</span><span style=\"color:#d08770;\">127</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">], </span><span style=\"color:#d08770;\">3030</span><span style=\"color:#c0c5ce;\">).</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> view = dioxus_liveview::LiveViewPool::new();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> app = Router::new()\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The root route contains the glue code to connect to the WebSocket\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">route</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|| async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">                Html(format!(\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;\n</span><span style=\"color:#a3be8c;\">                &lt;!DOCTYPE html&gt;\n</span><span style=\"color:#a3be8c;\">                &lt;html&gt;\n</span><span style=\"color:#a3be8c;\">                &lt;head&gt; &lt;title&gt;Dioxus LiveView with Axum&lt;/title&gt;  &lt;/head&gt;\n</span><span style=\"color:#a3be8c;\">                &lt;body&gt; &lt;div id=&quot;main&quot;&gt;&lt;/div&gt; &lt;/body&gt;\n</span><span style=\"color:#a3be8c;\">                </span><span style=\"color:#d08770;\">{{glue}}\n</span><span style=\"color:#a3be8c;\">                &lt;/html&gt;\n</span><span style=\"color:#a3be8c;\">                </span><span style=\"color:#c0c5ce;\">&quot;#,\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// Create the glue code to connect to the WebSocket on the &quot;/ws&quot; route\n</span><span style=\"color:#c0c5ce;\">                    glue = dioxus_liveview::interpreter_glue(&amp;format!(&quot;</span><span style=\"color:#a3be8c;\">ws://</span><span style=\"color:#d08770;\">{{addr}}</span><span style=\"color:#a3be8c;\">/ws</span><span style=\"color:#c0c5ce;\">&quot;))\n</span><span style=\"color:#c0c5ce;\">                ))\n</span><span style=\"color:#c0c5ce;\">            }}),\n</span><span style=\"color:#c0c5ce;\">        )\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The WebSocket route is what Dioxus uses to communicate with the browser\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">route</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">/ws</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|ws: WebSocketUpgrade| async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">                ws.</span><span style=\"color:#96b5b4;\">on_upgrade</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|socket| async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// When the WebSocket is upgraded, launch the LiveView with the app component\n</span><span style=\"color:#c0c5ce;\">                    _ = view.</span><span style=\"color:#96b5b4;\">launch</span><span style=\"color:#c0c5ce;\">(dioxus_liveview::axum_socket(socket), app).await;\n</span><span style=\"color:#c0c5ce;\">                }})\n</span><span style=\"color:#c0c5ce;\">            }}),\n</span><span style=\"color:#c0c5ce;\">        );\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">Listening on http://</span><span style=\"color:#d08770;\">{{addr}}</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    axum::Server::bind(&amp;addr.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">parse</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">serve</span><span style=\"color:#c0c5ce;\">(app.</span><span style=\"color:#96b5b4;\">into_make_service</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">        .await\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "And then add our app component:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Hello, world!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p { "And that's it!" }
        h2 { id: "hot-reload",
            a { href: "#hot-reload", class: "header", "Hot Reload" }
        }
        ol {
            li {
                "Hot reloading allows much faster iteration times inside of rsx calls by interpreting them and streaming the edits."
            }
            li {
                "It is useful when changing the styling/layout of a program, but will not help with changing the logic of a program."
            }
        }
        h3 { id: "setup",
            a { href: "#setup", class: "header", "Setup" }
        }
        p {
            "Install "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/cli",
                ""
            }
            "."
        }
        h3 { id: "usage",
            a { href: "#usage", class: "header", "Usage" }
        }
        ol {
            li { "Run:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx serve --hot-reload --platform desktop\n</span></pre>\n" }
        ol {
            li {
                "Change some code within "
                code { "rsx" }
                " or "
                code { "render" }
                " macro"
            }
            li { "Save and watch the style change without recompiling" }
        }
        h3 { id: "limitations",
            a { href: "#limitations", class: "header", "Limitations" }
        }
        ol {
            li {
                "The interpreter can only use expressions that existed on the last full recompile. If you introduce a new variable or expression to the rsx call, it will require a full recompile to capture the expression."
            }
            li {
                "Components, Iterators, and some attributes can contain arbitrary rust code and will trigger a full recompile when changed."
            }
        }
    }
}
#[component(no_case_check)]
pub fn GettingStartedFullstack() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "fullstack",
            a { href: "#fullstack", class: "header", "Fullstack" }
        }
        blockquote {
            p {
                "This guide assumes you read the "
                a { href: "wasm", "" }
                " getting started guide and installed the "
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/cli",
                    ""
                }
            }
        }
        h1 { id: "getting-started",
            a { href: "#getting-started", class: "header", "Getting Started" }
        }
        h2 { id: "setup",
            a { href: "#setup", class: "header", "Setup" }
        }
        p {
            "For this guide, we're going to show how to use Dioxus with "
            a { href: "https://docs.rs/axum/latest/axum/", "" }
            ", but "
            code { "dioxus-fullstack" }
            " also integrates with the "
            a { href: "https://docs.rs/warp/latest/warp/", "" }
            " and "
            a { href: "https://docs.rs/salvo/latest/salvo/", "" }
            " web frameworks."
        }
        p { "Make sure you have Rust and Cargo installed, and then create a new project:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo new --bin demo\n</span><span style=\"color:#c0c5ce;\">cd demo\n</span></pre>\n" }
        p {
            "Add  "
            code { "dioxus" }
            " and  "
            code { "dioxus-fullstack" }
            " as dependencies:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add dioxus\n</span><span style=\"color:#c0c5ce;\">cargo add dioxus-fullstack\n</span></pre>\n" }
        p {
            "Next, set up features for the server ( "
            code { "ssr" }
            ") and the client ( "
            code { "web" }
            "):"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[features]\n</span><span style=\"color:#c0c5ce;\">default = []\n</span><span style=\"color:#c0c5ce;\">ssr = [&quot;</span><span style=\"color:#a3be8c;\">dioxus-fullstack/axum</span><span style=\"color:#c0c5ce;\">&quot;]\n</span><span style=\"color:#c0c5ce;\">web = [&quot;</span><span style=\"color:#a3be8c;\">dioxus-fullstack/web</span><span style=\"color:#c0c5ce;\">&quot;]\n</span></pre>\n" }
        p { "Your dependencies should look roughly like this:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[dependencies]\n</span><span style=\"color:#c0c5ce;\">dioxus = {{ version = &quot;</span><span style=\"color:#a3be8c;\">*</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">dioxus-fullstack = {{ version = &quot;</span><span style=\"color:#a3be8c;\">*</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">[features]\n</span><span style=\"color:#c0c5ce;\">default = []\n</span><span style=\"color:#c0c5ce;\">ssr = [&quot;</span><span style=\"color:#a3be8c;\">dioxus-fullstack/axum</span><span style=\"color:#c0c5ce;\">&quot;]\n</span><span style=\"color:#c0c5ce;\">web = [&quot;</span><span style=\"color:#a3be8c;\">dioxus-fullstack/web</span><span style=\"color:#c0c5ce;\">&quot;]\n</span></pre>\n" }
        p { "Now, set up your Axum app to serve the Dioxus app." }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case, unused)]\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_fullstack::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    LaunchBuilder::new(app).</span><span style=\"color:#96b5b4;\">launch</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">High-Five counter: {{count}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">Up high!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count -= </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">Down low!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        p { "Now, run your app with:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx build --features web --release\n</span><span style=\"color:#c0c5ce;\">cargo run --features ssr --release\n</span></pre>\n" }
        p {
            "Finally, open  "
            code { "http://localhost:8080" }
            " in your browser. You should see a server-side rendered page with a counter."
        }
        SandBoxFrame { url: "https://codesandbox.io/p/sandbox/dioxus-fullstack-2nwsrz?file=%2Fsrc%2Fmain.rs%3A5%2C1" }
        h2 { id: "hot-reload",
            a { href: "#hot-reload", class: "header", "Hot Reload" }
        }
        ol {
            li {
                "Hot reloading allows much faster iteration times inside of rsx calls by interpreting them and streaming the edits."
            }
            li {
                "It is useful when changing the styling/layout of a program, but will not help with changing the logic of a program."
            }
        }
        h3 { id: "usage",
            a { href: "#usage", class: "header", "Usage" }
        }
        ol {
            li { "Run:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx build --features web\n</span><span style=\"color:#c0c5ce;\">dx serve --features ssr --hot-reload --platform desktop\n</span></pre>\n" }
        ol {
            li { "Change some code within a rsx or render macro" }
            li { "Save and watch the style change without recompiling" }
        }
        h3 { id: "limitations",
            a { href: "#limitations", class: "header", "Limitations" }
        }
        ol {
            li {
                "The interpreter can only use expressions that existed on the last full recompile. If you introduce a new variable or expression to the rsx call, it will require a full recompile to capture the expression."
            }
            li {
                "Components, Iterators, and some attributes can contain arbitrary rust code and will trigger a full recompile when changed."
            }
        }
    }
}
#[component(no_case_check)]
pub fn GettingStartedDesktop() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "desktop-overview",
            a { href: "#desktop-overview", class: "header", "Desktop overview" }
        }
        p {
            "Build a standalone native desktop app that looks and feels the same across operating systems."
        }
        p {
            "Apps built with Dioxus desktop use the system WebView to render the page. This makes the final size of application much smaller than other WebView renderers (typically under 5MB)."
        }
        p {
            "Although desktop apps are rendered in a WebView, your Rust code runs natively. This means that browser APIs are "
            em { "not" }
            " available, so rendering WebGL, Canvas, etc is not as easy as the Web. However, native system APIs "
            em { "are" }
            " accessible, so streaming, WebSockets, filesystem, etc are all easily accessible though system APIs."
        }
        p {
            "Dioxus desktop is built off "
            a { href: "https://tauri.app/", "" }
            ". Right now there are limited Dioxus abstractions over the menubar, event handling, etc. In some places you may need to leverage Tauri directly – through "
            a { href: "http://github.com/tauri-apps/wry/", "" }
            " and "
            a { href: "http://github.com/tauri-apps/tao", "" }
            "."
        }
        blockquote {
            p {
                "In the future, we plan to move to a custom web renderer-based DOM renderer with WGPU integrations ("
                a { href: "https://github.com/DioxusLabs/blitz", "" }
                ")."
            }
        }
        h2 { id: "examples",
            a { href: "#examples", class: "header", "Examples" }
        }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/example-projects/blob/master/file-explorer",
                    ""
                }
            }
            li {
                a { href: "https://github.com/DioxusLabs/example-projects/blob/master/wifi-scanner",
                    ""
                }
            }
        }
        p {
            a { href: "https://github.com/DioxusLabs/example-projects/tree/master/file-explorer",
                ""
                img {
                    src: "https://raw.githubusercontent.com/DioxusLabs/example-projects/master/file-explorer/image.png",
                    alt: "File Explorer screenshot",
                    title: "",
                }
            }
        }
        p {
            "Here's a "
            a { href: "https://github.com/search?q=repo%3ADioxusLabs%2Fdioxus+path%3A%2F%5Eexamples%5C%2F%2F+%22use+dioxus_desktop%22&type=code",
                ""
            }
            " for the main repo to find examples which use "
            code { "dioxus_desktop" }
            " (might not be 100% acurrate)."
        }
        h1 { id: "getting-started",
            a { href: "#getting-started", class: "header", "Getting started" }
        }
        h2 { id: "platform-specific-dependencies",
            a { href: "#platform-specific-dependencies", class: "header",
                "Platform-specific dependencies"
            }
        }
        p {
            "Dioxus desktop renders through a WebView. Depending on your platform, you might need to install some dependencies."
        }
        h3 { id: "windows",
            a { href: "#windows", class: "header", "Windows" }
        }
        p {
            "Windows apps depend on WebView2 – a library that should be installed in all modern Windows distributions. If you have Edge installed, then Dioxus will work fine. If you "
            em { "don't" }
            " have WebView2, "
            a { href: "https://developer.microsoft.com/en-us/microsoft-edge/webview2/",
                ""
            }
            ". MS provides 3 options:"
        }
        ol {
            li {
                "A tiny \"evergreen\" "
                em { "bootstrapper" }
                " that fetches an installer from Microsoft's CDN."
            }
            li {
                "A tiny "
                em { "installer" }
                " that fetches WebView2 from Microsoft's CDN."
            }
            li { "A statically linked version of WebView2 in your final binary for offline users." }
        }
        p { "For development purposes, use Option 1." }
        h3 { id: "linux",
            a { href: "#linux", class: "header", "Linux" }
        }
        p {
            "WebView Linux apps require WebkitGtk. When distributing, this can be part of your dependency tree in your  "
            code { ".rpm" }
            " or  "
            code { ".deb" }
            ". However, likely, your users will already have WebkitGtk."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">sudo apt install libwebkit2gtk-</span><span style=\"color:#d08770;\">4.1</span><span style=\"color:#c0c5ce;\">-dev libgtk-</span><span style=\"color:#d08770;\">3</span><span style=\"color:#c0c5ce;\">-dev libayatana-appindicator3-dev\n</span></pre>\n" }
        p {
            "When using Debian/bullseye  "
            code { "libappindicator3-dev" }
            " is no longer available but replaced by  "
            code { "libayatana-appindicator3-dev" }
            "."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\"># on Debian/bullseye </span><span style=\"color:#b48ead;\">use</span><span style=\"color:#c0c5ce;\">:\n</span><span style=\"color:#c0c5ce;\">sudo apt install libwebkit2gtk-</span><span style=\"color:#d08770;\">4.1</span><span style=\"color:#c0c5ce;\">-dev libgtk-</span><span style=\"color:#d08770;\">3</span><span style=\"color:#c0c5ce;\">-dev libayatana-appindicator3-dev\n</span></pre>\n" }
        p {
            "If you run into issues, make sure you have all the basics installed, as outlined in the "
            a { href: "https://beta.tauri.app/guides/prerequisites/", "" }
            "."
        }
        h3 { id: "macos",
            a { href: "#macos", class: "header", "MacOS" }
        }
        p {
            "Currently – everything for macOS is built right in! However, you might run into an issue if you're using nightly Rust due to some permissions issues in our Tao dependency (which have been resolved but not published)."
        }
        h2 { id: "creating-a-project",
            a { href: "#creating-a-project", class: "header", "Creating a Project" }
        }
        p { "Create a new crate:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo new --bin demo\n</span><span style=\"color:#c0c5ce;\">cd demo\n</span></pre>\n" }
        p {
            "Add Dioxus and the desktop renderer as dependencies (this will edit your  "
            code { "Cargo.toml" }
            "):"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add dioxus\n</span><span style=\"color:#c0c5ce;\">cargo add dioxus-desktop\n</span></pre>\n" }
        p {
            "Edit your  "
            code { "main.rs" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#65737e;\">// import the prelude to get access to the `rsx!` macro and the `Scope` and `Element` types\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// launch the dioxus app in a webview\n</span><span style=\"color:#c0c5ce;\">    dioxus_desktop::launch(App);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// define a component that renders a div with the text &quot;Hello, world!&quot;\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Hello, world!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "hot-reload",
            a { href: "#hot-reload", class: "header", "Hot Reload" }
        }
        ol {
            li {
                "Hot reloading allows much faster iteration times inside of RSX calls by interpreting them and streaming the edits."
            }
            li {
                "It is useful when changing the styling/layout of a program, but will not help with changing the logic of a program."
            }
        }
        h3 { id: "setup",
            a { href: "#setup", class: "header", "Setup" }
        }
        p {
            "Install "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/cli",
                ""
            }
            "."
        }
        h3 { id: "usage",
            a { href: "#usage", class: "header", "Usage" }
        }
        ol {
            li { "Run:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx serve --hot-reload --platform desktop\n</span></pre>\n" }
        ol {
            li {
                "Change some code within a "
                code { "rsx" }
                " or "
                code { "render" }
                " macro."
            }
            li { "Save and watch the style change without recompiling." }
        }
        h3 { id: "limitations",
            a { href: "#limitations", class: "header", "Limitations" }
        }
        ol {
            li {
                "The interpreter can only use expressions that existed on the last full recompile. If you introduce a new variable or expression to the RSX call, it will require a full recompile to capture the expression."
            }
            li {
                "Components, Iterators, and some attributes can contain arbitrary rust code and will trigger a full recompile when changed."
            }
        }
    }
}
#[component(no_case_check)]
pub fn GettingStartedMobile() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "mobile-app",
            a { href: "#mobile-app", class: "header", "Mobile App" }
        }
        p { "Build a mobile app with Dioxus!" }
        p {
            "Example: "
            a { href: "https://github.com/DioxusLabs/example-projects/blob/master/ios_demo",
                ""
            }
        }
        h2 { id: "support",
            a { href: "#support", class: "header", "Support" }
        }
        p {
            "Mobile is currently the least-supported renderer target for Dioxus. Mobile apps are rendered with either the platform's WebView or experimentally with "
            a { href: "https://github.com/DioxusLabs/blitz", "" }
            ". WebView doesn't support animations, transparency, and native widgets."
        }
        p {
            "Mobile support is currently best suited for CRUD-style apps, ideally for internal teams who need to develop quickly but don't care much about animations or native widgets."
        }
        h2 { id: "getting-set-up",
            a { href: "#getting-set-up", class: "header", "Getting Set up" }
        }
        p {
            "Getting set up with mobile can be quite challenging. The tooling here isn't great (yet) and might take some hacking around to get things working."
        }
        h3 { id: "setting-up-dependencies",
            a { href: "#setting-up-dependencies", class: "header", "Setting up dependencies" }
        }
        h4 { id: "android",
            a { href: "#android", class: "header", "Android" }
        }
        p { "First, install the rust Android targets:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android\n</span></pre>\n" }
        p {
            "To develop on Android, you will need to "
            a { href: "https://developer.android.com/studio", "" }
            "."
        }
        p { "Once you have installed Android Studio, you will need to install the Android SDK and NDK:" }
        ol {
            li { "Create a blank Android project" }
            li {
                "Select "
                code { "Tools > SDK manager" }
            }
            li {
                "Navigate to the "
                code { "SDK tools" }
                " window:"
            }
        }
        p {
            img {
                src: "/static/android_ndk_install.png",
                alt: "NDK install window",
                title: "",
            }
        }
        p { "Then select:" }
        ul {
            li { "The SDK" }
            li { "The SDK Command line tools" }
            li { "The NDK (side by side)" }
            li { "CMAKE" }
        }
        ol {
            li {
                "Select "
                code { "apply" }
                " and follow the prompts"
            }
        }
        blockquote {
            p {
                "More details that could be useful for debugging any errors you encounter are available "
                a { href: "https://developer.android.com/studio/intro/update#sdk-manager",
                    ""
                }
            }
        }
        p { "Next set the Java, Android and NDK home variables:" }
        p { "Mac:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">export </span><span style=\"color:#d08770;\">JAVA_HOME</span><span style=\"color:#c0c5ce;\">=&quot;</span><span style=\"color:#a3be8c;\">/Applications/Android Studio.app/Contents/jbr/Contents/Home</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">export </span><span style=\"color:#d08770;\">ANDROID_HOME</span><span style=\"color:#c0c5ce;\">=&quot;</span><span style=\"color:#a3be8c;\">$HOME/Library/Android/sdk</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">export </span><span style=\"color:#d08770;\">NDK_HOME</span><span style=\"color:#c0c5ce;\">=&quot;</span><span style=\"color:#a3be8c;\">$ANDROID_HOME/ndk/25.2.9519653</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
        p { "Windows:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[System.Environment]::SetEnvironmentVariable(&quot;</span><span style=\"color:#a3be8c;\">JAVA_HOME</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">C:\\Program Files\\Android\\Android Studio\\jbr</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">User</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">[System.Environment]::SetEnvironmentVariable(&quot;</span><span style=\"color:#a3be8c;\">ANDROID_HOME</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">$env:LocalAppData\\Android\\Sdk</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">User</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">[System.Environment]::SetEnvironmentVariable(&quot;</span><span style=\"color:#a3be8c;\">NDK_HOME</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">$env:LocalAppData\\Android\\Sdk</span><span style=\"color:#96b5b4;\">\\n</span><span style=\"color:#a3be8c;\">dk\\25.2.9519653</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">User</span><span style=\"color:#c0c5ce;\">&quot;)\n</span></pre>\n",
        }
        blockquote {
            p { "The NDK version in the paths should match the version you installed in the last step" }
        }
        h4 { id: "ios",
            a { href: "#ios", class: "header", "IOS" }
        }
        p { "First, install the rust IOS targets:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">rustup target add aarch64-apple-ios x86_64-apple-ios aarch64-apple-ios-sim\n</span></pre>\n" }
        p {
            "To develop on IOS, you will need to "
            a { href: "https://apps.apple.com/us/app/xcode/id497799835", "" }
            "."
        }
        blockquote {
            p {
                "Note: On Apple silicon you must run Xcode on rosetta. Goto Application > Right Click Xcode > Get Info > Open in Rosetta."
                code { "cargo build --target x86_64-apple-ios" }
                " instead of "
                code { "cargo apple build" }
                " if you want to run in simulator."
            }
        }
        h3 { id: "setting-up-your-project",
            a { href: "#setting-up-your-project", class: "header", "Setting up your project" }
        }
        p { "First, we need to create a rust project:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo new dioxus-mobile-test\n</span><span style=\"color:#c0c5ce;\">cd dioxus-mobile-test\n</span></pre>\n" }
        p {
            "Next, we can use  "
            code { "cargo-mobile2" }
            " to create a project for mobile:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo install --git https:</span><span style=\"color:#65737e;\">//github.com/tauri-apps/cargo-mobile2\n</span><span style=\"color:#c0c5ce;\">cargo mobile init\n</span></pre>\n" }
        p {
            "When you run  "
            code { "cargo mobile init" }
            ", you will be asked a series of questions about your project. One of those questions is what template you should use. Dioxus currently doesn't have a template in Tauri mobile, instead you can use the  "
            code { "wry" }
            " template."
        }
        blockquote {
            p {
                "You may also be asked to input your team ID for IOS. You can find your team id "
                a { href: "https://developer.apple.com/help/account/manage-your-team/locate-your-team-id/",
                    ""
                }
                " or create a team id by creating a developer account "
                a { href: "https://developer.apple.com/help/account/get-started/about-your-developer-account",
                    ""
                }
            }
        }
        p { "Next, we need to modify our dependencies to include dioxus:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add dioxus\n</span><span style=\"color:#c0c5ce;\">cargo add dioxus-desktop --no-default-features --features tokio_runtime\n</span></pre>\n" }
        p { "Finally, we need to add a component to renderer. Modify your main function:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() -&gt; Result&lt;()&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Right now we&#39;re going through dioxus-desktop but we&#39;d like to go through dioxus-mobile\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// That will seed the index.html with some fixes that prevent the page from scrolling/zooming etc\n</span><span style=\"color:#c0c5ce;\">    dioxus_desktop::launch_cfg(\n</span><span style=\"color:#c0c5ce;\">        app,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Note that we have to disable the viewport goofiness of the browser.\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Dioxus_mobile should do this for us\n</span><span style=\"color:#c0c5ce;\">        dioxus_desktop::Config::default().</span><span style=\"color:#96b5b4;\">with_custom_index</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;&lt;!DOCTYPE html&gt;\n</span><span style=\"color:#a3be8c;\">        &lt;html&gt;\n</span><span style=\"color:#a3be8c;\">          &lt;head&gt;\n</span><span style=\"color:#a3be8c;\">            &lt;title&gt;Dioxus app&lt;/title&gt;\n</span><span style=\"color:#a3be8c;\">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n</span><span style=\"color:#a3be8c;\">            &lt;!-- CUSTOM HEAD --&gt;\n</span><span style=\"color:#a3be8c;\">          &lt;/head&gt;\n</span><span style=\"color:#a3be8c;\">          &lt;body&gt;\n</span><span style=\"color:#a3be8c;\">            &lt;div id=&quot;main&quot;&gt;&lt;/div&gt;\n</span><span style=\"color:#a3be8c;\">            &lt;!-- MODULE LOADER --&gt;\n</span><span style=\"color:#a3be8c;\">          &lt;/body&gt;\n</span><span style=\"color:#a3be8c;\">        &lt;/html&gt;\n</span><span style=\"color:#a3be8c;\">       </span><span style=\"color:#c0c5ce;\">&quot;#.</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">()),\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    Ok(())\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> items = cx.</span><span style=\"color:#96b5b4;\">use_hook</span><span style=\"color:#c0c5ce;\">(|| vec![</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">2</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">3</span><span style=\"color:#c0c5ce;\">]);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    log::debug!(&quot;</span><span style=\"color:#a3be8c;\">Hello from the app</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Hello, Mobile</span><span style=\"color:#c0c5ce;\">&quot;}}\n</span><span style=\"color:#c0c5ce;\">            div {{ margin_left: &quot;</span><span style=\"color:#a3be8c;\">auto</span><span style=\"color:#c0c5ce;\">&quot;, margin_right: &quot;</span><span style=\"color:#a3be8c;\">auto</span><span style=\"color:#c0c5ce;\">&quot;, width: &quot;</span><span style=\"color:#a3be8c;\">200px</span><span style=\"color:#c0c5ce;\">&quot;, padding: &quot;</span><span style=\"color:#a3be8c;\">10px</span><span style=\"color:#c0c5ce;\">&quot;, border: &quot;</span><span style=\"color:#a3be8c;\">1px solid black</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                button {{\n</span><span style=\"color:#c0c5ce;\">                    onclick: </span><span style=\"color:#b48ead;\">move</span><span style=\"color:#c0c5ce;\">|_| {{\n</span><span style=\"color:#c0c5ce;\">                        println!(&quot;</span><span style=\"color:#a3be8c;\">Clicked!</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">                        items.</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#c0c5ce;\">(items.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">                        cx.</span><span style=\"color:#96b5b4;\">needs_update_any</span><span style=\"color:#c0c5ce;\">(ScopeId(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">));\n</span><span style=\"color:#c0c5ce;\">                        println!(&quot;</span><span style=\"color:#a3be8c;\">Requested update</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">                    }},\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">Add item</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> item in items.</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">                    div {{ &quot;</span><span style=\"color:#a3be8c;\">- {{item}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "running",
            a { href: "#running", class: "header", "Running" }
        }
        p {
            "From there, you'll want to get a build of the crate using whichever platform you're targeting (simulator or actual hardware). For now, we'll just stick with the simulator"
        }
        h3 { id: "ios",
            a { href: "#ios", class: "header", "IOS" }
        }
        p { "To build your project for IOS, you can run:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo build --target aarch64-apple-ios-sim\n</span></pre>\n" }
        p { "Next, open XCode (this might take awhile if you've never opened XCode before):" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo apple open\n</span></pre>\n" }
        p { "This will open XCode with this particular project." }
        p {
            "From there, just click the \"play\" button with the right target and the app should be running!"
        }
        p {
            img {
                src: "/static/IOS-dioxus-demo.png",
                alt: "ios_demo",
                title: "",
            }
        }
        p {
            "Note that clicking play doesn't cause a new build, so you'll need to keep rebuilding the app between changes. The tooling here is very young, so please be patient. If you want to contribute to make things easier, please do! We'll be happy to help."
        }
        h3 { id: "android",
            a { href: "#android", class: "header", "Android" }
        }
        p {
            "To build your project on Android you can run:"
            code { "cargo android build" }
        }
        p { "Next, open Android studio:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo android open\n</span></pre>\n" }
        p { "This will open an android studio project for this application." }
        p {
            "Next we need to create a simulator in Android studio to run our app in. To create a simulator click on the phone icon in the top right of Android studio:"
        }
        p {
            img {
                src: "/static/android-studio-simulator.png",
                alt: "android studio manage devices",
                title: "",
            }
        }
        p {
            "Then click the  "
            code { "create a virtual device" }
            " button and follow the prompts:"
        }
        p {
            img {
                src: "/static/android-studio-devices.png",
                alt: "android studio devices",
                title: "",
            }
        }
        p { "Finally, launch your device by clicking the play button on the device you created:" }
        p {
            img {
                src: "/static/android-studio-device.png",
                alt: "android studio device",
                title: "",
            }
        }
        p { "Now you can start your application from your terminal by running:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo android run\n</span></pre>\n" }
        p {
            img {
                src: "/static/Android-Dioxus-demo.png",
                alt: "android_demo",
                title: "",
            }
        }
        blockquote {
            p { "More information is available in the Android docs:" }
            ul {
                li { "https://developer.android.com/ndk/guides" }
                li { "https://developer.android.com/studio/projects/install-ndk" }
                li { "https://source.android.com/docs/setup/build/rust/building-rust-modules/overview" }
            }
        }
    }
}
#[component(no_case_check)]
pub fn GettingStartedTui() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "terminal-ui",
            a { href: "#terminal-ui", class: "header", "Terminal UI" }
        }
        p { "You can build a text-based interface that will run in the terminal using Dioxus." }
        p {
            img {
                src: "https://github.com/DioxusLabs/rink/raw/master/examples/example.png",
                alt: "Hello World screenshot",
                title: "",
            }
        }
        blockquote {
            p {
                "Note: this book was written with HTML-based platforms in mind. You might be able to follow along with TUI, but you'll have to adapt a bit."
            }
        }
        h2 { id: "support",
            a { href: "#support", class: "header", "Support" }
        }
        p {
            "TUI support is currently quite experimental. But, if you're willing to venture into the realm of the unknown, this guide will get you started."
        }
        ul {
            li { "It uses flexbox for the layout" }
            li { "It only supports a subset of the attributes and elements" }
            li {
                "Regular widgets will not work in the tui render, but the tui renderer has its own widget components that start with a capital letter. See the "
                a { href: "https://github.com/DioxusLabs/dioxus/blob/master/packages/dioxus-tui/examples/widgets.rs",
                    ""
                }
            }
            li { "1px is one character line height. Your regular CSS px does not translate" }
            li { "If your app panics, your terminal is wrecked. This will be fixed eventually" }
        }
        h2 { id: "getting-set-up",
            a { href: "#getting-set-up", class: "header", "Getting Set up" }
        }
        p { "Start by making a new package and adding Dioxus and the TUI renderer as dependencies." }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo new --bin demo\n</span><span style=\"color:#c0c5ce;\">cd demo\n</span><span style=\"color:#c0c5ce;\">cargo add dioxus\n</span><span style=\"color:#c0c5ce;\">cargo add dioxus-tui\n</span></pre>\n" }
        p {
            "Then, edit your  "
            code { "main.rs" }
            " with the basic template."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#65737e;\">// import the prelude to get access to the `rsx!` macro and the `Scope` and `Element` types\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// launch the app in the terminal\n</span><span style=\"color:#c0c5ce;\">    dioxus_tui::launch(App);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// create a component that renders a div with the text &quot;Hello, world!&quot;\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Hello, world!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        p { "To run our app:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo run\n</span></pre>\n" }
        p {
            "Press \"ctrl-c\" to close the app. To switch from \"ctrl-c\" to just \"q\" to quit you can launch the app with a configuration to disable the default quit and use the root TuiContext to quit on your own."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// todo remove deprecated\n</span><span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case, deprecated)]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::events::{{KeyCode, KeyboardEvent}};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_tui::TuiContext;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    dioxus_tui::launch_cfg(\n</span><span style=\"color:#c0c5ce;\">        App,\n</span><span style=\"color:#c0c5ce;\">        dioxus_tui::Config::new()\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">without_ctrl_c_quit</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// Some older terminals only support 16 colors or ANSI colors\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// If your terminal is one of these, change this to BaseColors or ANSI\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">with_rendering_mode</span><span style=\"color:#c0c5ce;\">(dioxus_tui::RenderingMode::Rgb),\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> tui_ctx: TuiContext = cx.</span><span style=\"color:#96b5b4;\">consume_context</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            width: &quot;</span><span style=\"color:#a3be8c;\">100%</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            height: &quot;</span><span style=\"color:#a3be8c;\">10px</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            background_color: &quot;</span><span style=\"color:#a3be8c;\">red</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            justify_content: &quot;</span><span style=\"color:#a3be8c;\">center</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            align_items: &quot;</span><span style=\"color:#a3be8c;\">center</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            onkeydown: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|k: KeyboardEvent| </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">KeyCode::Q = k.key_code {{\n</span><span style=\"color:#c0c5ce;\">                tui_ctx.</span><span style=\"color:#96b5b4;\">quit</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Hello world!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        h2 { id: "hot-reload",
            a { href: "#hot-reload", class: "header", "Hot Reload" }
        }
        ol {
            li {
                "Hot reloading allows much faster iteration times inside of rsx calls by interpreting them and streaming the edits."
            }
            li {
                "It is useful when changing the styling/layout of a program, but will not help with changing the logic of a program."
            }
        }
        h3 { id: "setup",
            a { href: "#setup", class: "header", "Setup" }
        }
        p {
            "Install "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/cli",
                ""
            }
            "."
        }
        h3 { id: "usage",
            a { href: "#usage", class: "header", "Usage" }
        }
        ol {
            li { "Run:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx serve --hot-reload --platform desktop\n</span></pre>\n" }
        ol {
            li { "Change some code within a rsx or render macro" }
            li { "Save and watch the style change without recompiling" }
        }
        h3 { id: "limitations",
            a { href: "#limitations", class: "header", "Limitations" }
        }
        ol {
            li {
                "The interpreter can only use expressions that existed on the last full recompile. If you introduce a new variable or expression to the rsx call, it will require a full recompile to capture the expression."
            }
            li {
                "Components, Iterators, and some attributes can contain arbitrary rust code and will trigger a full recompile when changed."
            }
        }
    }
}
#[component(no_case_check)]
pub fn GuideIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        p {
            "In this guide, you'll learn to use Dioxus to build user interfaces that run anywhere. We will recreate the hackernews homepage in Dioxus:"
        }
        DemoFrame { hackernews_complete::App {} }
        p {
            "This guide serves a very brief overview of Dioxus. Throughout the guide, there will be links to the "
            a { href: "guide/../reference", "" }
            " with more details about specific concepts."
        }
        p {
            "First, lets setup our dependencies. In addition to the dependencies you added in the "
            a { href: "guide/../getting_started", "" }
            " guide for your platform, we need to set up a few more dependencies to work with the hacker news API:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add chrono --features serde\n</span><span style=\"color:#c0c5ce;\">cargo add futures\n</span><span style=\"color:#c0c5ce;\">cargo add reqwest --features json\n</span><span style=\"color:#c0c5ce;\">cargo add serde --features derive\n</span><span style=\"color:#c0c5ce;\">cargo add serde_json\n</span><span style=\"color:#c0c5ce;\">cargo add async_recursion\n</span></pre>\n" }
    }
}
#[component(no_case_check)]
pub fn GuideYourFirstComponent() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "your-first-component",
            a { href: "#your-first-component", class: "header", "Your First Component" }
        }
        p {
            "This chapter will teach you how to create a "
            a { href: "../reference/components", "" }
            " that displays a link to a post on hackernews."
        }
        p {
            "First, let's define how to display a post. Dioxus is a "
            em { "declarative" }
            " framework. This means that instead of telling Dioxus what to do (e.g. to \"create an element\" or \"set the color to red\") we simply "
            em { "declare" }
            " how we want the UI to look."
        }
        p {
            "To declare what you want your UI to look like, you will need to use the  "
            code { "rsx" }
            " macro. Let's modify the rsx macro in the  "
            code { "App" }
            " function from the "
            a { href: "../getting_started", "" }
            " to show information about our story:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">story</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p { "If you run your application you should see something like this:" }
        DemoFrame { hackernews_post::story_v1::App {} }
        blockquote {
            p { "RSX mirrors HTML. Because of this you will need to know some html to use Dioxus." }
            p { "Here are some resources to help get you started learning HTML:" }
            ul {
                li {
                    a { href: "https://developer.mozilla.org/en-US/docs/Learn/HTML",
                        ""
                    }
                }
                li {
                    a { href: "https://www.w3schools.com/html/default.asp", "" }
                }
            }
            p {
                "In addition to HTML, Dioxus uses CSS to style applications. You can either use traditional CSS (what this guide uses) or use a tool like "
                a { href: "https://tailwindcss.com/docs/installation", "" }
                ":"
            }
            ul {
                li {
                    a { href: "https://developer.mozilla.org/en-US/docs/Learn/HTML",
                        ""
                    }
                }
                li {
                    a { href: "https://www.w3schools.com/css/default.asp", "" }
                }
                li {
                    a { href: "https://tailwindcss.com/docs/installation", "" }
                    " (used with the "
                    a { href: "https://github.com/DioxusLabs/dioxus/tree/master/examples/tailwind",
                        ""
                    }
                    ")"
                }
            }
            p {
                "If you have existing html code, you can use the "
                a { href: "../CLI/translate", "" }
                " command to convert it to RSX. Or if you prefer to write html, you can use the "
                a { href: "https://github.com/DioxusLabs/dioxus-html-macro", "" }
                " to write html directly in your code."
            }
        }
        h2 { id: "dynamic-text",
            a { href: "#dynamic-text", class: "header", "Dynamic Text" }
        }
        p {
            "Let's expand our  "
            code { "App" }
            " component to include the story title, author, score, time posted, and number of comments. We can insert dynamic text in the render macro by inserting variables inside  "
            code { "{{}}" }
            "s (this works similarly to the formatting in the "
            a { href: "https://doc.rust-lang.org/std/macro.println.html", "" }
            " macro):"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> title = &quot;</span><span style=\"color:#a3be8c;\">title</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> by = &quot;</span><span style=\"color:#a3be8c;\">author</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> score = </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> time = chrono::Utc::now();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = &quot;</span><span style=\"color:#a3be8c;\">comments</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">{{title}} by {{by}} ({{score}}) {{time}} {{comments}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { hackernews_post::story_v2::App {} }
        h2 { id: "creating-elements",
            a { href: "#creating-elements", class: "header", "Creating Elements" }
        }
        p {
            "Next, let's wrap our post description in a "
            a { href: "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div",
                ""
                code { "div" }
            }
            ". You can create HTML elements in Dioxus by putting a "
            code { "{{" }
            " after the element name and a "
            code { "}}" }
            " after the last child of the element:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> title = &quot;</span><span style=\"color:#a3be8c;\">title</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> by = &quot;</span><span style=\"color:#a3be8c;\">author</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> score = </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> time = chrono::Utc::now();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = &quot;</span><span style=\"color:#a3be8c;\">comments</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">{{title}} by {{by}} ({{score}}) {{time}} {{comments}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { hackernews_post::story_v3::App {} }
        blockquote {
            p {
                "You can read more about elements in the "
                a { href: "../reference/rsx", "" }
                "."
            }
        }
        h2 { id: "setting-attributes",
            a { href: "#setting-attributes", class: "header", "Setting Attributes" }
        }
        p { "Next, let's add some padding around our post listing with an attribute." }
        p {
            "Attributes (and "
            a { href: "../reference/event_handlers", "" }
            ") modify the behavior or appearance of the element they are attached to. They are specified inside the "
            code { "{{}}" }
            " brackets before any children, using the "
            code { "name: value" }
            " syntax. You can format the text in the attribute as you would with a text node:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> title = &quot;</span><span style=\"color:#a3be8c;\">title</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> by = &quot;</span><span style=\"color:#a3be8c;\">author</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> score = </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> time = chrono::Utc::now();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = &quot;</span><span style=\"color:#a3be8c;\">comments</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            position: &quot;</span><span style=\"color:#a3be8c;\">relative</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">{{title}} by {{by}} ({{score}}) {{time}} {{comments}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { hackernews_post::story_v4::App {} }
        blockquote {
            p {
                "Note: All attributes defined in "
                a { href: "https://docs.rs/dioxus-html/latest/dioxus_html/",
                    ""
                    code { "dioxus-html" }
                }
                " follow the snake_case naming convention. They transform their "
                code { "snake_case" }
                " names to HTML's "
                code { "camelCase" }
                " attributes."
            }
        }
        blockquote {
            p {
                "Note: Styles can be used directly outside of the  "
                code { "style:" }
                " attribute. In the above example,  "
                code { "color: \"red\"" }
                " is turned into  "
                code { "style=\"color: red\"" }
                "."
            }
        }
        blockquote {
            p {
                "You can read more about elements in the "
                a { href: "../reference/rsx", "" }
            }
        }
        h2 { id: "creating-a-component",
            a { href: "#creating-a-component", class: "header", "Creating a Component" }
        }
        p {
            "Just like you wouldn't want to write a complex program in a single, long,  "
            code { "main" }
            " function, you shouldn't build a complex UI in a single  "
            code { "App" }
            " function. Instead, you should break down the functionality of an app in logical parts called components."
        }
        p {
            "A component is a Rust function, named in UpperCamelCase, that takes a  "
            code { "Scope" }
            " parameter and returns an  "
            code { "Element" }
            " describing the UI it wants to render. In fact, our  "
            code { "App" }
            " function is a component!"
        }
        p { "Let's pull our story description into a new component:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">StoryListing</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> title = &quot;</span><span style=\"color:#a3be8c;\">title</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> by = &quot;</span><span style=\"color:#a3be8c;\">author</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> score = </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> time = chrono::Utc::now();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = &quot;</span><span style=\"color:#a3be8c;\">comments</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            position: &quot;</span><span style=\"color:#a3be8c;\">relative</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">{{title}} by {{by}} ({{score}}) {{time}} {{comments}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "We can render our component like we would an element by putting  "
            code { "{{}}" }
            "s after the component name. Let's modify our  "
            code { "App" }
            " component to render our new StoryListing component:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        StoryListing {{\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        DemoFrame { hackernews_post::story_v5::App {} }
        blockquote {
            p {
                "You can read more about elements in the "
                a { href: "../reference/components", "" }
            }
        }
        h2 { id: "creating-props",
            a { href: "#creating-props", class: "header", "Creating Props" }
        }
        p {
            "Just like you can pass arguments to a function or attributes to an element, you can pass props to a component that customize its behavior!"
        }
        p {
            "We can define arguments that components can take when they are rendered (called  "
            code { "Props" }
            ") by adding the  "
            code { "#[component]" }
            " macro before our function definition and adding extra function arguments."
        }
        p {
            "Currently, our  "
            code { "StoryListing" }
            " component always renders the same story. We can modify it to accept a story to render as a prop."
        }
        p {
            "We will also define what a post is and include information for how to transform our post to and from a different format using "
            a { href: "https://serde.rs", "" }
            ". This will be used with the hackernews API in a later chapter:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">chrono::{{DateTime, Utc}};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">serde::{{Deserialize, Serialize}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// Define the Hackernews types\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">StoryPageData {{\n</span><span style=\"color:#c0c5ce;\">    #[serde(flatten)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">item</span><span style=\"color:#c0c5ce;\">: StoryItem,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">comments</span><span style=\"color:#c0c5ce;\">: Vec&lt;Comment&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">Comment {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">/// there will be no by field if the comment was deleted\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">by</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">text</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    #[serde(with = &quot;</span><span style=\"color:#bf616a;\">chrono</span><span style=\"color:#c0c5ce;\">::serde::ts_seconds&quot;)]\n</span><span style=\"color:#c0c5ce;\">    pub time: DateTime&lt;Utc&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">kids</span><span style=\"color:#c0c5ce;\">: Vec&lt;</span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">sub_comments</span><span style=\"color:#c0c5ce;\">: Vec&lt;Comment&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> r#</span><span style=\"color:#bf616a;\">type</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">StoryItem {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">url</span><span style=\"color:#c0c5ce;\">: Option&lt;String&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">text</span><span style=\"color:#c0c5ce;\">: Option&lt;String&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">by</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">score</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">descendants</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    #[serde(with = &quot;</span><span style=\"color:#bf616a;\">chrono</span><span style=\"color:#c0c5ce;\">::serde::ts_seconds&quot;)]\n</span><span style=\"color:#c0c5ce;\">    pub time: DateTime&lt;Utc&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">kids</span><span style=\"color:#c0c5ce;\">: Vec&lt;</span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> r#</span><span style=\"color:#bf616a;\">type</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">StoryListing</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">story</span><span style=\"color:#c0c5ce;\">: StoryItem) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> StoryItem {{\n</span><span style=\"color:#c0c5ce;\">        title,\n</span><span style=\"color:#c0c5ce;\">        by,\n</span><span style=\"color:#c0c5ce;\">        score,\n</span><span style=\"color:#c0c5ce;\">        time,\n</span><span style=\"color:#c0c5ce;\">        kids,\n</span><span style=\"color:#c0c5ce;\">        ..\n</span><span style=\"color:#c0c5ce;\">    }} = story;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = kids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            position: &quot;</span><span style=\"color:#a3be8c;\">relative</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">{{title}} by {{by}} ({{score}}) {{time}} {{comments}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Now, let's modify the  "
            code { "App" }
            " component to pass the story to our  "
            code { "StoryListing" }
            " component like we would set an attribute on an element:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        StoryListing {{\n</span><span style=\"color:#c0c5ce;\">            story: StoryItem {{\n</span><span style=\"color:#c0c5ce;\">                id: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                title: &quot;</span><span style=\"color:#a3be8c;\">hello hackernews</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                url: None,\n</span><span style=\"color:#c0c5ce;\">                text: None,\n</span><span style=\"color:#c0c5ce;\">                by: &quot;</span><span style=\"color:#a3be8c;\">Author</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                score: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                descendants: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                time: chrono::Utc::now(),\n</span><span style=\"color:#c0c5ce;\">                kids: vec![],\n</span><span style=\"color:#c0c5ce;\">                r#</span><span style=\"color:#b48ead;\">type</span><span style=\"color:#c0c5ce;\">: &quot;&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { hackernews_post::story_v6::App {} }
        blockquote {
            p {
                "You can read more about Props in the "
                a { href: "../reference/component_props", "" }
            }
        }
        h2 { id: "cleaning-up-our-interface",
            a { href: "#cleaning-up-our-interface", class: "header", "Cleaning Up Our Interface" }
        }
        p {
            "Finally, by combining elements and attributes, we can make our post listing much more appealing:"
        }
        p { "Full code up to this point:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// Define the Hackernews types\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">chrono::{{DateTime, Utc}};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">serde::{{Deserialize, Serialize}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">StoryPageData {{\n</span><span style=\"color:#c0c5ce;\">    #[serde(flatten)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">item</span><span style=\"color:#c0c5ce;\">: StoryItem,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">comments</span><span style=\"color:#c0c5ce;\">: Vec&lt;Comment&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">Comment {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">/// there will be no by field if the comment was deleted\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">by</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">text</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    #[serde(with = &quot;</span><span style=\"color:#bf616a;\">chrono</span><span style=\"color:#c0c5ce;\">::serde::ts_seconds&quot;)]\n</span><span style=\"color:#c0c5ce;\">    pub time: DateTime&lt;Utc&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">kids</span><span style=\"color:#c0c5ce;\">: Vec&lt;</span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">sub_comments</span><span style=\"color:#c0c5ce;\">: Vec&lt;Comment&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> r#</span><span style=\"color:#bf616a;\">type</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">StoryItem {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">url</span><span style=\"color:#c0c5ce;\">: Option&lt;String&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">text</span><span style=\"color:#c0c5ce;\">: Option&lt;String&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">by</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">score</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">descendants</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    #[serde(with = &quot;</span><span style=\"color:#bf616a;\">chrono</span><span style=\"color:#c0c5ce;\">::serde::ts_seconds&quot;)]\n</span><span style=\"color:#c0c5ce;\">    pub time: DateTime&lt;Utc&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">kids</span><span style=\"color:#c0c5ce;\">: Vec&lt;</span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> r#</span><span style=\"color:#bf616a;\">type</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        StoryListing {{\n</span><span style=\"color:#c0c5ce;\">            story: StoryItem {{\n</span><span style=\"color:#c0c5ce;\">                id: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                title: &quot;</span><span style=\"color:#a3be8c;\">hello hackernews</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                url: None,\n</span><span style=\"color:#c0c5ce;\">                text: None,\n</span><span style=\"color:#c0c5ce;\">                by: &quot;</span><span style=\"color:#a3be8c;\">Author</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                score: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                descendants: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                time: Utc::now(),\n</span><span style=\"color:#c0c5ce;\">                kids: vec![],\n</span><span style=\"color:#c0c5ce;\">                r#</span><span style=\"color:#b48ead;\">type</span><span style=\"color:#c0c5ce;\">: &quot;&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">StoryListing</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">story</span><span style=\"color:#c0c5ce;\">: StoryItem) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> StoryItem {{\n</span><span style=\"color:#c0c5ce;\">        title,\n</span><span style=\"color:#c0c5ce;\">        url,\n</span><span style=\"color:#c0c5ce;\">        by,\n</span><span style=\"color:#c0c5ce;\">        score,\n</span><span style=\"color:#c0c5ce;\">        time,\n</span><span style=\"color:#c0c5ce;\">        kids,\n</span><span style=\"color:#c0c5ce;\">        id,\n</span><span style=\"color:#c0c5ce;\">        ..\n</span><span style=\"color:#c0c5ce;\">    }} = story;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = url.</span><span style=\"color:#96b5b4;\">as_deref</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap_or_default</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> hostname = url\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">https://</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">http://</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">www.</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> score = format!(&quot;</span><span style=\"color:#d08770;\">{{score}} {{}}</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*score == </span><span style=\"color:#d08770;\">1 </span><span style=\"color:#c0c5ce;\">{{ &quot;</span><span style=\"color:#a3be8c;\"> point</span><span style=\"color:#c0c5ce;\">&quot; }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{ &quot;</span><span style=\"color:#a3be8c;\"> points</span><span style=\"color:#c0c5ce;\">&quot; }});\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = format!(\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#d08770;\">{{}} {{}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        kids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> kids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">() == </span><span style=\"color:#d08770;\">1 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\"> comment</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\"> comments</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> time = time.</span><span style=\"color:#96b5b4;\">format</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">%D %l:%M %p</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            position: &quot;</span><span style=\"color:#a3be8c;\">relative</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                font_size: &quot;</span><span style=\"color:#a3be8c;\">1.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                a {{\n</span><span style=\"color:#c0c5ce;\">                    href: url,\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">{{title}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">                a {{\n</span><span style=\"color:#c0c5ce;\">                    color: &quot;</span><span style=\"color:#a3be8c;\">gray</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    href: &quot;</span><span style=\"color:#a3be8c;\">https://news.ycombinator.com/from?site={{hostname}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    text_decoration: &quot;</span><span style=\"color:#a3be8c;\">none</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\"> ({{hostname}})</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                display: &quot;</span><span style=\"color:#a3be8c;\">flex</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                flex_direction: &quot;</span><span style=\"color:#a3be8c;\">row</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                color: &quot;</span><span style=\"color:#a3be8c;\">gray</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">{{score}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    padding_left: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">by {{by}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    padding_left: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">{{time}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    padding_left: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">{{comments}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { hackernews_post::story_final::App {} }
    }
}
#[component(no_case_check)]
pub fn GuideState() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "interactivity",
            a { href: "#interactivity", class: "header", "Interactivity" }
        }
        p { "In this chapter, we will add a preview for articles you hover over or links you focus on." }
        h2 { id: "creating-a-preview",
            a { href: "#creating-a-preview", class: "header", "Creating a Preview" }
        }
        p {
            "First, let's split our app into a Stories component on the left side of the screen, and a preview component on the right side of the screen:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            display: &quot;</span><span style=\"color:#a3be8c;\">flex</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            flex_direction: &quot;</span><span style=\"color:#a3be8c;\">row</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            width: &quot;</span><span style=\"color:#a3be8c;\">100%</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                width: &quot;</span><span style=\"color:#a3be8c;\">50%</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                Stories {{}}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                width: &quot;</span><span style=\"color:#a3be8c;\">50%</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                Preview {{}}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// New\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Stories</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        StoryListing {{\n</span><span style=\"color:#c0c5ce;\">            story: StoryItem {{\n</span><span style=\"color:#c0c5ce;\">                id: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                title: &quot;</span><span style=\"color:#a3be8c;\">hello hackernews</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                url: None,\n</span><span style=\"color:#c0c5ce;\">                text: None,\n</span><span style=\"color:#c0c5ce;\">                by: &quot;</span><span style=\"color:#a3be8c;\">Author</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                score: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                descendants: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                time: chrono::Utc::now(),\n</span><span style=\"color:#c0c5ce;\">                kids: vec![],\n</span><span style=\"color:#c0c5ce;\">                r#</span><span style=\"color:#b48ead;\">type</span><span style=\"color:#c0c5ce;\">: &quot;&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// New\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug)]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">PreviewState {{\n</span><span style=\"color:#c0c5ce;\">    Unset,\n</span><span style=\"color:#c0c5ce;\">    Loading,\n</span><span style=\"color:#c0c5ce;\">    Loaded(StoryPageData),\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// New\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Preview</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> preview_state = PreviewState::Unset;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> preview_state {{\n</span><span style=\"color:#c0c5ce;\">        PreviewState::Unset =&gt; render! {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Hover over a story to preview it here</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        PreviewState::Loading =&gt; render! {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Loading...</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        PreviewState::Loaded(story) =&gt; {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> title = &amp;story.item.title;\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = story.item.url.</span><span style=\"color:#96b5b4;\">as_deref</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap_or_default</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> text = story.item.text.</span><span style=\"color:#96b5b4;\">as_deref</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap_or_default</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            render! {{\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    div {{\n</span><span style=\"color:#c0c5ce;\">                        font_size: &quot;</span><span style=\"color:#a3be8c;\">1.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                        a {{\n</span><span style=\"color:#c0c5ce;\">                            href: &quot;</span><span style=\"color:#a3be8c;\">{{url}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                            &quot;</span><span style=\"color:#a3be8c;\">{{title}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                        }}\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                    div {{\n</span><span style=\"color:#c0c5ce;\">                        dangerous_inner_html: &quot;</span><span style=\"color:#a3be8c;\">{{text}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> comment in &amp;story.comments {{\n</span><span style=\"color:#c0c5ce;\">                        Comment {{ comment: comment.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">() }}\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// NEW\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Comment</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">comment</span><span style=\"color:#c0c5ce;\">: Comment) -&gt; Element&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                color: &quot;</span><span style=\"color:#a3be8c;\">gray</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">by {{comment.by}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                dangerous_inner_html: &quot;</span><span style=\"color:#a3be8c;\">{{comment.text}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> kid in &amp;comment.sub_comments {{\n</span><span style=\"color:#c0c5ce;\">                Comment {{ comment: kid.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">() }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        DemoFrame { hackernews_state::app_v1::App {} }
        h2 { id: "event-handlers",
            a { href: "#event-handlers", class: "header", "Event Handlers" }
        }
        p {
            "Next, we need to detect when the user hovers over a section or focuses a link. We can use an "
            a { href: "../reference/event_handlers", "" }
            " to listen for the hover and focus events."
        }
        p {
            "Event handlers are similar to regular attributes, but their name usually starts with  "
            code { "on" }
            "- and they accept closures as values. The closure will be called whenever the event it listens for is triggered. When an event is triggered, information about the event is passed to the closure though the "
            a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.Event.html",
                ""
            }
            " structure."
        }
        p {
            "Let's create a "
            a { href: "https://docs.rs/dioxus/latest/dioxus/events/fn.onmouseenter.html",
                ""
                code { "onmouseenter" }
            }
            " event listener in the "
            code { "StoryListing" }
            " component:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    div {{\n</span><span style=\"color:#c0c5ce;\">        padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        position: &quot;</span><span style=\"color:#a3be8c;\">relative</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        onmouseenter: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// NEW\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            font_size: &quot;</span><span style=\"color:#a3be8c;\">1.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            a {{\n</span><span style=\"color:#c0c5ce;\">                href: url,\n</span><span style=\"color:#c0c5ce;\">                onfocus: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_event| {{\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// NEW\n</span><span style=\"color:#c0c5ce;\">                }},\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">{{title}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            a {{\n</span><span style=\"color:#c0c5ce;\">                color: &quot;</span><span style=\"color:#a3be8c;\">gray</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                href: &quot;</span><span style=\"color:#a3be8c;\">https://news.ycombinator.com/from?site={{hostname}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                text_decoration: &quot;</span><span style=\"color:#a3be8c;\">none</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\"> ({{hostname}})</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            display: &quot;</span><span style=\"color:#a3be8c;\">flex</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            flex_direction: &quot;</span><span style=\"color:#a3be8c;\">row</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            color: &quot;</span><span style=\"color:#a3be8c;\">gray</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">{{score}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                padding_left: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">by {{by}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                padding_left: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">{{time}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                padding_left: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">{{comments}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n",
        }
        blockquote {
            p {
                "You can read more about Event Handlers in the "
                a { href: "../reference/event_handlers", "" }
            }
        }
        h2 { id: "state",
            a { href: "#state", class: "header", "State" }
        }
        p {
            "So far our components have had no state like normal rust functions. To make our application change when we hover over a link we need state to store the currently hovered link in the root of the application."
        }
        p {
            "You can create state in dioxus using hooks. Hooks are Rust functions that take a reference to  "
            code { "ScopeState" }
            " (in a component, you can pass  "
            code { "cx" }
            "), and provide you with functionality and state."
        }
        p {
            "In this case, we will use the  "
            code { "use_shared_state_provider" }
            " and  "
            code { "use_shared_state" }
            " hooks:"
        }
        ul {
            li {
                "You can provide a closure to "
                code { "use_shared_state_provider" }
                " that determines the initial value of the shared state and provides the value to all child components"
            }
            li {
                "You can then use the "
                code { "use_shared_state" }
                " hook to read and modify that state in the "
                code { "Preview" }
                " and "
                code { "StoryListing" }
                " components"
            }
            li {
                "When the value updates, "
                code { "use_shared_state" }
                " will make the component re-render, and provides you with the new value"
            }
        }
        blockquote {
            p {
                "Note: You should prefer local state hooks like use_state or use_ref when you only use state in one component. Because we use state in multiple components, we can use a "
                a { href: "../reference/context", "" }
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#96b5b4;\">use_shared_state_provider</span><span style=\"color:#c0c5ce;\">(cx, || PreviewState::Unset);\n</span></pre>\n" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">StoryListing</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">story</span><span style=\"color:#c0c5ce;\">: StoryItem) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// New\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> preview_state = use_shared_state::&lt;PreviewState&gt;(cx).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> StoryItem {{\n</span><span style=\"color:#c0c5ce;\">        title,\n</span><span style=\"color:#c0c5ce;\">        url,\n</span><span style=\"color:#c0c5ce;\">        by,\n</span><span style=\"color:#c0c5ce;\">        score,\n</span><span style=\"color:#c0c5ce;\">        time,\n</span><span style=\"color:#c0c5ce;\">        kids,\n</span><span style=\"color:#c0c5ce;\">        ..\n</span><span style=\"color:#c0c5ce;\">    }} = story;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = url.</span><span style=\"color:#96b5b4;\">as_deref</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap_or_default</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> hostname = url\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">https://</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">http://</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">www.</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> score = format!(&quot;</span><span style=\"color:#d08770;\">{{score}} {{}}</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*score == </span><span style=\"color:#d08770;\">1 </span><span style=\"color:#c0c5ce;\">{{ &quot;</span><span style=\"color:#a3be8c;\"> point</span><span style=\"color:#c0c5ce;\">&quot; }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{ &quot;</span><span style=\"color:#a3be8c;\"> points</span><span style=\"color:#c0c5ce;\">&quot; }});\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = format!(\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#d08770;\">{{}} {{}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        kids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> kids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">() == </span><span style=\"color:#d08770;\">1 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\"> comment</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\"> comments</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> time = time.</span><span style=\"color:#96b5b4;\">format</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">%D %l:%M %p</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            position: &quot;</span><span style=\"color:#a3be8c;\">relative</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            onmouseenter: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_event| {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// NEW\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// set the preview state to this story\n</span><span style=\"color:#c0c5ce;\">                *preview_state.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">() = PreviewState::Loaded(StoryPageData {{\n</span><span style=\"color:#c0c5ce;\">                    item: story.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                    comments: vec![],\n</span><span style=\"color:#c0c5ce;\">                }});\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                font_size: &quot;</span><span style=\"color:#a3be8c;\">1.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                a {{\n</span><span style=\"color:#c0c5ce;\">                    href: url,\n</span><span style=\"color:#c0c5ce;\">                    onfocus: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_event| {{\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// NEW\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// set the preview state to this story\n</span><span style=\"color:#c0c5ce;\">                        *preview_state.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">() = PreviewState::Loaded(StoryPageData {{\n</span><span style=\"color:#c0c5ce;\">                            item: story.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                            comments: vec![],\n</span><span style=\"color:#c0c5ce;\">                        }});\n</span><span style=\"color:#c0c5ce;\">                    }},\n</span></pre>\n",
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Preview</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// New\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> preview_state = use_shared_state::&lt;PreviewState&gt;(cx)?;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// New\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">match </span><span style=\"color:#c0c5ce;\">&amp;*preview_state.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">() {{\n</span></pre>\n" }
        DemoFrame { hackernews_state::App {} }
        blockquote {
            p {
                "You can read more about Hooks in the "
                a { href: "../reference/hooks", "" }
            }
        }
        h3 { id: "the-rules-of-hooks",
            a { href: "#the-rules-of-hooks", class: "header", "The Rules of Hooks" }
        }
        p {
            "Hooks are a powerful way to manage state in Dioxus, but there are some rules you need to follow to insure they work as expected. Dioxus uses the order you call hooks to differentiate between hooks. Because the order you call hooks matters, you must follow these rules:"
        }
        ol {
            li { "Hooks may be only used in components or other hooks (we'll get to that later)" }
            li {
                "On every call to the component function"
                ol {
                    li { "The same hooks must be called" }
                    li { "In the same order" }
                }
            }
            li {
                "Hooks name's should start with "
                code { "use_" }
                " so you don't accidentally confuse them with regular functions"
            }
        }
        p { "These rules mean that there are certain things you can't do with hooks:" }
        h4 { id: "no-hooks-in-conditionals",
            a { href: "#no-hooks-in-conditionals", class: "header", "No Hooks in Conditionals" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// ❌ don&#39;t call hooks in conditionals!\n</span><span style=\"color:#65737e;\">// We must ensure that the same hooks will be called every time\n</span><span style=\"color:#65737e;\">// But `if` statements only run if the conditional is true!\n</span><span style=\"color:#65737e;\">// So we might violate rule 2.\n</span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> you_are_happy &amp;&amp; you_know_it {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> something = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || &quot;</span><span style=\"color:#a3be8c;\">hands</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">clap your </span><span style=\"color:#d08770;\">{{something}}</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ✅ instead, *always* call use_state\n</span><span style=\"color:#65737e;\">// You can put other stuff in the conditional though\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> something = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || &quot;</span><span style=\"color:#a3be8c;\">hands</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> you_are_happy &amp;&amp; you_know_it {{\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">clap your </span><span style=\"color:#d08770;\">{{something}}</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h4 { id: "no-hooks-in-closures",
            a { href: "#no-hooks-in-closures", class: "header", "No Hooks in Closures" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// ❌ don&#39;t call hooks inside closures!\n</span><span style=\"color:#65737e;\">// We can&#39;t guarantee that the closure, if used, will be called in the same order every time\n</span><span style=\"color:#b48ead;\">let </span><span style=\"color:#8fa1b3;\">_a </span><span style=\"color:#c0c5ce;\">= || {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> b = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    b.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ✅ instead, move hook `b` outside\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> b = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#b48ead;\">let </span><span style=\"color:#8fa1b3;\">_a </span><span style=\"color:#c0c5ce;\">= || b.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">();\n</span></pre>\n",
        }
        h4 { id: "no-hooks-in-loops",
            a { href: "#no-hooks-in-loops", class: "header", "No Hooks in Loops" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// `names` is a Vec&lt;&amp;str&gt;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ❌ Do not use hooks in loops!\n</span><span style=\"color:#65737e;\">// In this case, if the length of the Vec changes, we break rule 2\n</span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> _name in &amp;names {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> is_selected = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">false</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">selected: </span><span style=\"color:#d08770;\">{{is_selected}}</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ✅ Instead, use a hashmap with use_ref\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> selection_map = </span><span style=\"color:#96b5b4;\">use_ref</span><span style=\"color:#c0c5ce;\">(cx, HashMap::&lt;&amp;</span><span style=\"color:#b48ead;\">str</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#b48ead;\">bool</span><span style=\"color:#c0c5ce;\">&gt;::new);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> name in &amp;names {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> is_selected = selection_map.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">()[name];\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">selected: </span><span style=\"color:#d08770;\">{{is_selected}}</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn GuideDataFetching() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "fetching-data",
            a { href: "#fetching-data", class: "header", "Fetching Data" }
        }
        p {
            "In this chapter, we will fetch data from the hacker news API and use it to render the list of top posts in our application."
        }
        h2 { id: "defining-the-api",
            a { href: "#defining-the-api", class: "header", "Defining the API" }
        }
        p {
            "First we need to create some utilities to fetch data from the hackernews API using "
            a { href: "https://docs.rs/reqwest/latest/reqwest/index.html", "" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// Define the Hackernews API\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">futures::future::join_all;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub static </span><span style=\"color:#d08770;\">BASE_API_URL</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">str </span><span style=\"color:#c0c5ce;\">= &quot;</span><span style=\"color:#a3be8c;\">https://hacker-news.firebaseio.com/v0/</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#b48ead;\">pub static </span><span style=\"color:#d08770;\">ITEM_API</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">str </span><span style=\"color:#c0c5ce;\">= &quot;</span><span style=\"color:#a3be8c;\">item/</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#b48ead;\">pub static </span><span style=\"color:#d08770;\">USER_API</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">str </span><span style=\"color:#c0c5ce;\">= &quot;</span><span style=\"color:#a3be8c;\">user/</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#b48ead;\">const </span><span style=\"color:#d08770;\">COMMENT_DEPTH</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64 </span><span style=\"color:#c0c5ce;\">= </span><span style=\"color:#d08770;\">2</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_story_preview</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;StoryItem, reqwest::Error&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = format!(&quot;</span><span style=\"color:#d08770;\">{{}}{{}}{{}}</span><span style=\"color:#a3be8c;\">.json</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#d08770;\">BASE_API_URL</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">ITEM_API</span><span style=\"color:#c0c5ce;\">, id);\n</span><span style=\"color:#c0c5ce;\">    reqwest::get(&amp;url).await?.</span><span style=\"color:#96b5b4;\">json</span><span style=\"color:#c0c5ce;\">().await\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_stories</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">count</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;Vec&lt;StoryItem&gt;, reqwest::Error&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = format!(&quot;</span><span style=\"color:#d08770;\">{{}}</span><span style=\"color:#a3be8c;\">topstories.json</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#d08770;\">BASE_API_URL</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> stories_ids = &amp;reqwest::get(&amp;url).await?.json::&lt;Vec&lt;</span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">&gt;&gt;().await?[..count];\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> story_futures = stories_ids[..</span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">::min(stories_ids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">(), count)]\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|&amp;</span><span style=\"color:#bf616a;\">story_id</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#96b5b4;\">get_story_preview</span><span style=\"color:#c0c5ce;\">(story_id));\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> stories = </span><span style=\"color:#96b5b4;\">join_all</span><span style=\"color:#c0c5ce;\">(story_futures)\n</span><span style=\"color:#c0c5ce;\">        .await\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">filter_map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">story</span><span style=\"color:#c0c5ce;\">| story.</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">collect</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    Ok(stories)\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_story</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;StoryPageData, reqwest::Error&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = format!(&quot;</span><span style=\"color:#d08770;\">{{}}{{}}{{}}</span><span style=\"color:#a3be8c;\">.json</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#d08770;\">BASE_API_URL</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">ITEM_API</span><span style=\"color:#c0c5ce;\">, id);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> story = reqwest::get(&amp;url).await?.json::&lt;StoryPageData&gt;().await?;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comment_futures = story.item.kids.</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|&amp;</span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#96b5b4;\">get_comment</span><span style=\"color:#c0c5ce;\">(id));\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = </span><span style=\"color:#96b5b4;\">join_all</span><span style=\"color:#c0c5ce;\">(comment_futures)\n</span><span style=\"color:#c0c5ce;\">        .await\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">filter_map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">c</span><span style=\"color:#c0c5ce;\">| c.</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">collect</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    story.comments = comments;\n</span><span style=\"color:#c0c5ce;\">    Ok(story)\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">async_recursion</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">async_recursion</span><span style=\"color:#c0c5ce;\">(?Send)]\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_comment_with_depth</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">depth</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;Comment, reqwest::Error&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = format!(&quot;</span><span style=\"color:#d08770;\">{{}}{{}}{{}}</span><span style=\"color:#a3be8c;\">.json</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#d08770;\">BASE_API_URL</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">ITEM_API</span><span style=\"color:#c0c5ce;\">, id);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> comment = reqwest::get(&amp;url).await?.json::&lt;Comment&gt;().await?;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> depth &gt; </span><span style=\"color:#d08770;\">0 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> sub_comments_futures = comment\n</span><span style=\"color:#c0c5ce;\">            .kids\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">story_id</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#96b5b4;\">get_comment_with_depth</span><span style=\"color:#c0c5ce;\">(*story_id, depth - </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">));\n</span><span style=\"color:#c0c5ce;\">        comment.sub_comments = </span><span style=\"color:#96b5b4;\">join_all</span><span style=\"color:#c0c5ce;\">(sub_comments_futures)\n</span><span style=\"color:#c0c5ce;\">            .await\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">filter_map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">c</span><span style=\"color:#c0c5ce;\">| c.</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">collect</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">    Ok(comment)\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_comment</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">comment_id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;Comment, reqwest::Error&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comment = </span><span style=\"color:#96b5b4;\">get_comment_with_depth</span><span style=\"color:#c0c5ce;\">(comment_id, </span><span style=\"color:#d08770;\">COMMENT_DEPTH</span><span style=\"color:#c0c5ce;\">).await?;\n</span><span style=\"color:#c0c5ce;\">    Ok(comment)\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "working-with-async",
            a { href: "#working-with-async", class: "header", "Working with Async" }
        }
        p {
            a { href: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/fn.use_future.html",
                ""
                code { "use_future" }
            }
            " is a "
            a { href: "./state", "" }
            " that lets you run an async closure, and provides you with its result."
        }
        p {
            "For example, we can make an API request (using "
            a { href: "https://docs.rs/reqwest/latest/reqwest/index.html", "" }
            ") inside "
            code { "use_future" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Stories</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Fetch the top 10 stories on Hackernews\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> stories = </span><span style=\"color:#96b5b4;\">use_future</span><span style=\"color:#c0c5ce;\">(cx, (), |_| </span><span style=\"color:#96b5b4;\">get_stories</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#d08770;\">10</span><span style=\"color:#c0c5ce;\">));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// check if the future is resolved\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> stories.</span><span style=\"color:#96b5b4;\">value</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">        Some(Ok(list)) =&gt; {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// if it is, render the stories\n</span><span style=\"color:#c0c5ce;\">            render! {{\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// iterate over the stories with a for loop\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> story in list {{\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// render every story with the StoryListing component\n</span><span style=\"color:#c0c5ce;\">                        StoryListing {{ story: story.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">() }}\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        Some(Err(err)) =&gt; {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// if there was an error, render the error\n</span><span style=\"color:#c0c5ce;\">            render! {{&quot;</span><span style=\"color:#a3be8c;\">An error occurred while fetching stories {{err}}</span><span style=\"color:#c0c5ce;\">&quot;}}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        None =&gt; {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// if the future is not resolved yet, render a loading message\n</span><span style=\"color:#c0c5ce;\">            render! {{&quot;</span><span style=\"color:#a3be8c;\">Loading items</span><span style=\"color:#c0c5ce;\">&quot;}}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "The code inside  "
            code { "use_future" }
            " will be submitted to the Dioxus scheduler once the component has rendered."
        }
        p {
            "We can use  "
            code { ".value()" }
            " to get the result of the future. On the first run, since there's no data ready when the component loads, its value will be  "
            code { "None" }
            ".  However, once the future is finished, the component will be re-rendered and the value will now be  "
            code { "Some(...)" }
            ", containing the return value of the closure."
        }
        p {
            "We can then render the result by looping over each of the posts and rendering them with the  "
            code { "StoryListing" }
            " component."
        }
        DemoFrame { hackernews_async::fetch::App {} }
        blockquote {
            p {
                "You can read more about working with Async in Dioxus in the "
                a { href: "../reference", "" }
            }
        }
        h2 { id: "lazily-fetching-data",
            a { href: "#lazily-fetching-data", class: "header", "Lazily Fetching Data" }
        }
        p { "Finally, we will lazily fetch the comments on each post as the user hovers over the post." }
        p {
            "We need to revisit the code that handles hovering over an item. Instead of passing an empty list of comments, we can fetch all the related comments when the user hovers over the item."
        }
        p {
            "We will cache the list of comments with a "
            a { href: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/fn.use_ref.html",
                ""
            }
            " hook. This hook allows you to store some state in a single component. When the user triggers fetching the comments we will check if the response has already been cached before fetching the data from the hackernews API."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// New\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">resolve_story</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">full_story</span><span style=\"color:#c0c5ce;\">: UseRef&lt;Option&lt;StoryPageData&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">preview_state</span><span style=\"color:#c0c5ce;\">: UseSharedState&lt;PreviewState&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">story_id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">) {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Some(cached) = &amp;*full_story.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">        *preview_state.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">() = PreviewState::Loaded(cached.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">return</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    *preview_state.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">() = PreviewState::Loading;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Ok(story) = </span><span style=\"color:#96b5b4;\">get_story</span><span style=\"color:#c0c5ce;\">(story_id).await {{\n</span><span style=\"color:#c0c5ce;\">        *preview_state.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">() = PreviewState::Loaded(story.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">        *full_story.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">() = Some(story);\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">StoryListing</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">story</span><span style=\"color:#c0c5ce;\">: StoryItem) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> preview_state = use_shared_state::&lt;PreviewState&gt;(cx).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> StoryItem {{\n</span><span style=\"color:#c0c5ce;\">        title,\n</span><span style=\"color:#c0c5ce;\">        url,\n</span><span style=\"color:#c0c5ce;\">        by,\n</span><span style=\"color:#c0c5ce;\">        score,\n</span><span style=\"color:#c0c5ce;\">        time,\n</span><span style=\"color:#c0c5ce;\">        kids,\n</span><span style=\"color:#c0c5ce;\">        id,\n</span><span style=\"color:#c0c5ce;\">        ..\n</span><span style=\"color:#c0c5ce;\">    }} = story;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// New\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> full_story = </span><span style=\"color:#96b5b4;\">use_ref</span><span style=\"color:#c0c5ce;\">(cx, || None);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = url.</span><span style=\"color:#96b5b4;\">as_deref</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap_or_default</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> hostname = url\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">https://</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">http://</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">www.</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> score = format!(&quot;</span><span style=\"color:#d08770;\">{{score}} {{}}</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*score == </span><span style=\"color:#d08770;\">1 </span><span style=\"color:#c0c5ce;\">{{ &quot;</span><span style=\"color:#a3be8c;\"> point</span><span style=\"color:#c0c5ce;\">&quot; }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{ &quot;</span><span style=\"color:#a3be8c;\"> points</span><span style=\"color:#c0c5ce;\">&quot; }});\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = format!(\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#d08770;\">{{}} {{}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        kids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> kids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">() == </span><span style=\"color:#d08770;\">1 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\"> comment</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\"> comments</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> time = time.</span><span style=\"color:#96b5b4;\">format</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">%D %l:%M %p</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            position: &quot;</span><span style=\"color:#a3be8c;\">relative</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            onmouseenter: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_event| {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// New\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// If you return a future from an event handler, it will be run automatically\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#96b5b4;\">resolve_story</span><span style=\"color:#c0c5ce;\">(full_story.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(), preview_state.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(), *id)\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                font_size: &quot;</span><span style=\"color:#a3be8c;\">1.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                a {{\n</span><span style=\"color:#c0c5ce;\">                    href: url,\n</span><span style=\"color:#c0c5ce;\">                    onfocus: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_event| {{\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// New\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#96b5b4;\">resolve_story</span><span style=\"color:#c0c5ce;\">(full_story.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(), preview_state.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(), *id)\n</span><span style=\"color:#c0c5ce;\">                    }},\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// ...\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        DemoFrame { hackernews_async::App {} }
    }
}
#[component(no_case_check)]
pub fn GuideFullCode() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "conclusion",
            a { href: "#conclusion", class: "header", "Conclusion" }
        }
        p {
            "Well done! You've completed the Dioxus guide and built a hackernews application in Dioxus."
        }
        p {
            "To continue your journey, you can attempt a challenge listed below, or look at the "
            a { href: "../reference", "" }
            "."
        }
        h2 { id: "challenges",
            a { href: "#challenges", class: "header", "Challenges" }
        }
        ul {
            li { "Organize your components into separate files for better maintainability." }
            li { "Give your app some style if you haven't already." }
            li {
                "Integrate your application with the "
                a { href: "../router", "" }
                "."
            }
        }
        h2 { id: "the-full-code-for-the-hacker-news-project",
            a {
                href: "#the-full-code-for-the-hacker-news-project",
                class: "header",
                "The full code for the hacker news project"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#96b5b4;\">use_shared_state_provider</span><span style=\"color:#c0c5ce;\">(cx, || PreviewState::Unset);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            display: &quot;</span><span style=\"color:#a3be8c;\">flex</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            flex_direction: &quot;</span><span style=\"color:#a3be8c;\">row</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            width: &quot;</span><span style=\"color:#a3be8c;\">100%</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                width: &quot;</span><span style=\"color:#a3be8c;\">50%</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                Stories {{}}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                width: &quot;</span><span style=\"color:#a3be8c;\">50%</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                Preview {{}}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Stories</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> story = </span><span style=\"color:#96b5b4;\">use_future</span><span style=\"color:#c0c5ce;\">(cx, (), |_| </span><span style=\"color:#96b5b4;\">get_stories</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#d08770;\">10</span><span style=\"color:#c0c5ce;\">));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> story.</span><span style=\"color:#96b5b4;\">value</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">        Some(Ok(list)) =&gt; render! {{\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> story in list {{\n</span><span style=\"color:#c0c5ce;\">                    StoryListing {{ story: story.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">() }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        Some(Err(err)) =&gt; render! {{&quot;</span><span style=\"color:#a3be8c;\">An error occurred while fetching stories {{err}}</span><span style=\"color:#c0c5ce;\">&quot;}},\n</span><span style=\"color:#c0c5ce;\">        None =&gt; render! {{&quot;</span><span style=\"color:#a3be8c;\">Loading items</span><span style=\"color:#c0c5ce;\">&quot;}},\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">resolve_story</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">full_story</span><span style=\"color:#c0c5ce;\">: UseRef&lt;Option&lt;StoryPageData&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">preview_state</span><span style=\"color:#c0c5ce;\">: UseSharedState&lt;PreviewState&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">story_id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">) {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Some(cached) = &amp;*full_story.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">        *preview_state.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">() = PreviewState::Loaded(cached.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">return</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    *preview_state.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">() = PreviewState::Loading;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Ok(story) = </span><span style=\"color:#96b5b4;\">get_story</span><span style=\"color:#c0c5ce;\">(story_id).await {{\n</span><span style=\"color:#c0c5ce;\">        *preview_state.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">() = PreviewState::Loaded(story.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">        *full_story.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">() = Some(story);\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">StoryListing</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">story</span><span style=\"color:#c0c5ce;\">: StoryItem) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> preview_state = use_shared_state::&lt;PreviewState&gt;(cx).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> StoryItem {{\n</span><span style=\"color:#c0c5ce;\">        title,\n</span><span style=\"color:#c0c5ce;\">        url,\n</span><span style=\"color:#c0c5ce;\">        by,\n</span><span style=\"color:#c0c5ce;\">        score,\n</span><span style=\"color:#c0c5ce;\">        time,\n</span><span style=\"color:#c0c5ce;\">        kids,\n</span><span style=\"color:#c0c5ce;\">        id,\n</span><span style=\"color:#c0c5ce;\">        ..\n</span><span style=\"color:#c0c5ce;\">    }} = story;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> full_story = </span><span style=\"color:#96b5b4;\">use_ref</span><span style=\"color:#c0c5ce;\">(cx, || None);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = url.</span><span style=\"color:#96b5b4;\">as_deref</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap_or_default</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> hostname = url\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">https://</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">http://</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">trim_start_matches</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">www.</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> score = format!(&quot;</span><span style=\"color:#d08770;\">{{score}} {{}}</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*score == </span><span style=\"color:#d08770;\">1 </span><span style=\"color:#c0c5ce;\">{{ &quot;</span><span style=\"color:#a3be8c;\"> point</span><span style=\"color:#c0c5ce;\">&quot; }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{ &quot;</span><span style=\"color:#a3be8c;\"> points</span><span style=\"color:#c0c5ce;\">&quot; }});\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = format!(\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#d08770;\">{{}} {{}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        kids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> kids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">() == </span><span style=\"color:#d08770;\">1 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\"> comment</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\"> comments</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> time = time.</span><span style=\"color:#96b5b4;\">format</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">%D %l:%M %p</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            position: &quot;</span><span style=\"color:#a3be8c;\">relative</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            onmouseenter: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_event| {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#96b5b4;\">resolve_story</span><span style=\"color:#c0c5ce;\">(full_story.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(), preview_state.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(), *id)\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                font_size: &quot;</span><span style=\"color:#a3be8c;\">1.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                a {{\n</span><span style=\"color:#c0c5ce;\">                    href: url,\n</span><span style=\"color:#c0c5ce;\">                    onfocus: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_event| {{\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#96b5b4;\">resolve_story</span><span style=\"color:#c0c5ce;\">(full_story.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(), preview_state.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(), *id)\n</span><span style=\"color:#c0c5ce;\">                    }},\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">{{title}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">                a {{\n</span><span style=\"color:#c0c5ce;\">                    color: &quot;</span><span style=\"color:#a3be8c;\">gray</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    href: &quot;</span><span style=\"color:#a3be8c;\">https://news.ycombinator.com/from?site={{hostname}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    text_decoration: &quot;</span><span style=\"color:#a3be8c;\">none</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\"> ({{hostname}})</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                display: &quot;</span><span style=\"color:#a3be8c;\">flex</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                flex_direction: &quot;</span><span style=\"color:#a3be8c;\">row</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                color: &quot;</span><span style=\"color:#a3be8c;\">gray</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">{{score}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    padding_left: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">by {{by}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    padding_left: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">{{time}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    padding_left: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">{{comments}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug)]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">PreviewState {{\n</span><span style=\"color:#c0c5ce;\">    Unset,\n</span><span style=\"color:#c0c5ce;\">    Loading,\n</span><span style=\"color:#c0c5ce;\">    Loaded(StoryPageData),\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Preview</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> preview_state = use_shared_state::&lt;PreviewState&gt;(cx)?;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">match </span><span style=\"color:#c0c5ce;\">&amp;*preview_state.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">        PreviewState::Unset =&gt; render! {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Hover over a story to preview it here</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        PreviewState::Loading =&gt; render! {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Loading...</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        PreviewState::Loaded(story) =&gt; {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> title = &amp;story.item.title;\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = story.item.url.</span><span style=\"color:#96b5b4;\">as_deref</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap_or_default</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> text = story.item.text.</span><span style=\"color:#96b5b4;\">as_deref</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap_or_default</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            render! {{\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    div {{\n</span><span style=\"color:#c0c5ce;\">                        font_size: &quot;</span><span style=\"color:#a3be8c;\">1.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                        a {{\n</span><span style=\"color:#c0c5ce;\">                            href: &quot;</span><span style=\"color:#a3be8c;\">{{url}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                            &quot;</span><span style=\"color:#a3be8c;\">{{title}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                        }}\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                    div {{\n</span><span style=\"color:#c0c5ce;\">                        dangerous_inner_html: &quot;</span><span style=\"color:#a3be8c;\">{{text}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> comment in &amp;story.comments {{\n</span><span style=\"color:#c0c5ce;\">                        Comment {{ comment: comment.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">() }}\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Comment</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">comment</span><span style=\"color:#c0c5ce;\">: Comment) -&gt; Element&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            padding: &quot;</span><span style=\"color:#a3be8c;\">0.5rem</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                color: &quot;</span><span style=\"color:#a3be8c;\">gray</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">by {{comment.by}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                dangerous_inner_html: &quot;</span><span style=\"color:#a3be8c;\">{{comment.text}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> kid in &amp;comment.sub_comments {{\n</span><span style=\"color:#c0c5ce;\">                Comment {{ comment: kid.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">() }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// Define the Hackernews API and types\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">chrono::{{DateTime, Utc}};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">futures::future::join_all;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">serde::{{Deserialize, Serialize}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub static </span><span style=\"color:#d08770;\">BASE_API_URL</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">str </span><span style=\"color:#c0c5ce;\">= &quot;</span><span style=\"color:#a3be8c;\">https://hacker-news.firebaseio.com/v0/</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#b48ead;\">pub static </span><span style=\"color:#d08770;\">ITEM_API</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">str </span><span style=\"color:#c0c5ce;\">= &quot;</span><span style=\"color:#a3be8c;\">item/</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#b48ead;\">pub static </span><span style=\"color:#d08770;\">USER_API</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">str </span><span style=\"color:#c0c5ce;\">= &quot;</span><span style=\"color:#a3be8c;\">user/</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#b48ead;\">const </span><span style=\"color:#d08770;\">COMMENT_DEPTH</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64 </span><span style=\"color:#c0c5ce;\">= </span><span style=\"color:#d08770;\">2</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_story_preview</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;StoryItem, reqwest::Error&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = format!(&quot;</span><span style=\"color:#d08770;\">{{}}{{}}{{}}</span><span style=\"color:#a3be8c;\">.json</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#d08770;\">BASE_API_URL</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">ITEM_API</span><span style=\"color:#c0c5ce;\">, id);\n</span><span style=\"color:#c0c5ce;\">    reqwest::get(&amp;url).await?.</span><span style=\"color:#96b5b4;\">json</span><span style=\"color:#c0c5ce;\">().await\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_stories</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">count</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;Vec&lt;StoryItem&gt;, reqwest::Error&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = format!(&quot;</span><span style=\"color:#d08770;\">{{}}</span><span style=\"color:#a3be8c;\">topstories.json</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#d08770;\">BASE_API_URL</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> stories_ids = &amp;reqwest::get(&amp;url).await?.json::&lt;Vec&lt;</span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">&gt;&gt;().await?[..count];\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> story_futures = stories_ids[..</span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">::min(stories_ids.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">(), count)]\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|&amp;</span><span style=\"color:#bf616a;\">story_id</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#96b5b4;\">get_story_preview</span><span style=\"color:#c0c5ce;\">(story_id));\n</span><span style=\"color:#c0c5ce;\">    Ok(</span><span style=\"color:#96b5b4;\">join_all</span><span style=\"color:#c0c5ce;\">(story_futures)\n</span><span style=\"color:#c0c5ce;\">        .await\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">filter_map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">story</span><span style=\"color:#c0c5ce;\">| story.</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">collect</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">StoryPageData {{\n</span><span style=\"color:#c0c5ce;\">    #[serde(flatten)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">item</span><span style=\"color:#c0c5ce;\">: StoryItem,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">comments</span><span style=\"color:#c0c5ce;\">: Vec&lt;Comment&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">Comment {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">/// there will be no by field if the comment was deleted\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">by</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">text</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    #[serde(with = &quot;</span><span style=\"color:#bf616a;\">chrono</span><span style=\"color:#c0c5ce;\">::serde::ts_seconds&quot;)]\n</span><span style=\"color:#c0c5ce;\">    pub time: DateTime&lt;Utc&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">kids</span><span style=\"color:#c0c5ce;\">: Vec&lt;</span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">sub_comments</span><span style=\"color:#c0c5ce;\">: Vec&lt;Comment&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> r#</span><span style=\"color:#bf616a;\">type</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">StoryItem {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">url</span><span style=\"color:#c0c5ce;\">: Option&lt;String&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">text</span><span style=\"color:#c0c5ce;\">: Option&lt;String&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">by</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">score</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">descendants</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    #[serde(with = &quot;</span><span style=\"color:#bf616a;\">chrono</span><span style=\"color:#c0c5ce;\">::serde::ts_seconds&quot;)]\n</span><span style=\"color:#c0c5ce;\">    pub time: DateTime&lt;Utc&gt;,\n</span><span style=\"color:#c0c5ce;\">    #[serde(default)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">kids</span><span style=\"color:#c0c5ce;\">: Vec&lt;</span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> r#</span><span style=\"color:#bf616a;\">type</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_story</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;StoryPageData, reqwest::Error&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = format!(&quot;</span><span style=\"color:#d08770;\">{{}}{{}}{{}}</span><span style=\"color:#a3be8c;\">.json</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#d08770;\">BASE_API_URL</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">ITEM_API</span><span style=\"color:#c0c5ce;\">, id);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> story = reqwest::get(&amp;url).await?.json::&lt;StoryPageData&gt;().await?;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comment_futures = story.item.kids.</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|&amp;</span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#96b5b4;\">get_comment</span><span style=\"color:#c0c5ce;\">(id));\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = </span><span style=\"color:#96b5b4;\">join_all</span><span style=\"color:#c0c5ce;\">(comment_futures)\n</span><span style=\"color:#c0c5ce;\">        .await\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">filter_map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">c</span><span style=\"color:#c0c5ce;\">| c.</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">collect</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    story.comments = comments;\n</span><span style=\"color:#c0c5ce;\">    Ok(story)\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">async_recursion</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">async_recursion</span><span style=\"color:#c0c5ce;\">(?Send)]\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_comment_with_depth</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">depth</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;Comment, reqwest::Error&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> url = format!(&quot;</span><span style=\"color:#d08770;\">{{}}{{}}{{}}</span><span style=\"color:#a3be8c;\">.json</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#d08770;\">BASE_API_URL</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">ITEM_API</span><span style=\"color:#c0c5ce;\">, id);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> comment = reqwest::get(&amp;url).await?.json::&lt;Comment&gt;().await?;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> depth &gt; </span><span style=\"color:#d08770;\">0 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> sub_comments_futures = comment\n</span><span style=\"color:#c0c5ce;\">            .kids\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">story_id</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#96b5b4;\">get_comment_with_depth</span><span style=\"color:#c0c5ce;\">(*story_id, depth - </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">));\n</span><span style=\"color:#c0c5ce;\">        comment.sub_comments = </span><span style=\"color:#96b5b4;\">join_all</span><span style=\"color:#c0c5ce;\">(sub_comments_futures)\n</span><span style=\"color:#c0c5ce;\">            .await\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">filter_map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">c</span><span style=\"color:#c0c5ce;\">| c.</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">collect</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">    Ok(comment)\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_comment</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">comment_id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;Comment, reqwest::Error&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#96b5b4;\">get_comment_with_depth</span><span style=\"color:#c0c5ce;\">(comment_id, </span><span style=\"color:#d08770;\">COMMENT_DEPTH</span><span style=\"color:#c0c5ce;\">).await\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "dioxus-reference",
            a { href: "#dioxus-reference", class: "header", "Dioxus Reference" }
        }
        p {
            "This Reference contains more detailed explanations for all concepts covered in the "
            a { href: "reference/../guide", "" }
            " and more."
        }
        h2 { id: "rendering",
            a { href: "#rendering", class: "header", "Rendering" }
        }
        ul {
            li {
                a { href: "reference/rsx", "" }
                ": Rsx is a HTML-like macro that allows you to declare UI"
            }
            li {
                a { href: "reference/components", "" }
                ": Components are the building blocks of UI in Dioxus"
            }
            li {
                a { href: "reference/component_props", "" }
                ": Props allow you pass information to Components"
            }
            li {
                a { href: "reference/event_handlers", "" }
                ": Event listeners let you respond to user input"
            }
            li {
                a { href: "reference/user_input", "" }
                ": How to handle User input in Dioxus"
            }
            li {
                a { href: "reference/dynamic_rendering", "" }
                ": How to dynamically render data in Dioxus"
            }
        }
        h2 { id: "state",
            a { href: "#state", class: "header", "State" }
        }
        ul {
            li {
                a { href: "reference/hooks", "" }
                ": Hooks allow you to create components state"
            }
            li {
                a { href: "reference/context", "" }
                ": Context allows you to create state in a parent and consume it in children"
            }
            li {
                a { href: "reference/router", "" }
                ": The router helps you manage the URL state"
            }
            li {
                a { href: "reference/use_future", "" }
                ": Use future allows you to create an async task and monitor it's state"
            }
            li {
                a { href: "reference/use_coroutine", "" }
                ": Use coroutine helps you manage external state"
            }
            li {
                a { href: "reference/spawn", "" }
                ": Spawn creates an async task"
            }
        }
        h2 { id: "platforms",
            a { href: "#platforms", class: "header", "Platforms" }
        }
        ul {
            li {
                a { href: "reference/desktop", "" }
                ": Overview of desktop specific APIS"
            }
            li {
                a { href: "reference/web", "" }
                ": Overview of web specific APIS"
            }
            li {
                a { href: "reference/ssr", "" }
                ": Overview of the SSR renderer"
            }
            li {
                a { href: "reference/liveview", "" }
                ": Overview of liveview specific APIS"
            }
            li {
                a { href: "reference/fullstack", "" }
                ": Overview of Fullstack specific APIS"
                ul {
                    li {
                        a { href: "reference/fullstack/server_functions", "" }
                        ": Server functions make it easy to communicate between your server and client"
                    }
                    li {
                        a { href: "reference/fullstack/extractors", "" }
                        ": Extractors allow you to get extra information out of the headers of a request"
                    }
                    li {
                        a { href: "reference/fullstack/middleware", "" }
                        ": Middleware allows you to wrap a server function request or response"
                    }
                    li {
                        a { href: "reference/fullstack/authentication", "" }
                        ": An overview of how to handle authentication with server functions"
                    }
                    li {
                        a { href: "reference/fullstack/routing", "" }
                        ": An overview of how to work with the router in the fullstack renderer"
                    }
                }
            }
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceRsx() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "describing-the-ui",
            a { href: "#describing-the-ui", class: "header", "Describing the UI" }
        }
        p {
            "Dioxus is a "
            em { "declarative" }
            " framework. This means that instead of telling Dioxus what to do (e.g. to \"create an element\" or \"set the color to red\") we simply "
            em { "declare" }
            " what we want the UI to look like using RSX."
        }
        p { "You have already seen a simple example of RSX syntax in the \"hello world\" application:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// define a component that renders a div with the text &quot;Hello, world!&quot;\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Hello, world!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p {
            "Here, we use the  "
            code { "rsx!" }
            " macro to "
            em { "declare" }
            " that we want a "
            code { "div" }
            " element, containing the text "
            code { "\"Hello, world!\"" }
            ". Dioxus takes the RSX and constructs a UI from it."
        }
        h2 { id: "rsx-features",
            a { href: "#rsx-features", class: "header", "RSX Features" }
        }
        p {
            "RSX is very similar to HTML in that it describes elements with attributes and children. Here's an empty  "
            code { "div" }
            " element in RSX, as well as the resulting HTML:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(div {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// attributes / listeners\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// children\n</span><span style=\"color:#c0c5ce;\">}}))\n</span></pre>\n" }
        DemoFrame { __interactive_04::Empty {} }
        h3 { id: "attributes",
            a { href: "#attributes", class: "header", "Attributes" }
        }
        p {
            "Attributes (and "
            a { href: "event_handlers", "" }
            ") modify the behavior or appearance of the element they are attached to. They are specified inside the "
            code { "{{}}" }
            " brackets, using the "
            code { "name: value" }
            " syntax. You can provide the value as a literal in the RSX:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(img {{\n</span><span style=\"color:#c0c5ce;\">    src: &quot;</span><span style=\"color:#a3be8c;\">https://avatars.githubusercontent.com/u/79236386?s=200&amp;v=4</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    class: &quot;</span><span style=\"color:#a3be8c;\">primary_button</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    width: &quot;</span><span style=\"color:#a3be8c;\">10px</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">}}))\n</span></pre>\n" }
        DemoFrame { rsx_overview::Attributes {} }
        blockquote {
            p {
                "Note: All attributes defined in  "
                code { "dioxus-html" }
                " follow the snake_case naming convention. They transform their  "
                code { "snake_case" }
                " names to HTML's  "
                code { "camelCase" }
                " attributes."
            }
        }
        blockquote {
            p {
                "Note: Styles can be used directly outside of the  "
                code { "style:" }
                " attribute. In the above example,  "
                code { "color: \"red\"" }
                " is turned into  "
                code { "style=\"color: red\"" }
                "."
            }
        }
        h4 { id: "custom-attributes",
            a { href: "#custom-attributes", class: "header", "Custom Attributes" }
        }
        p {
            "Dioxus has a pre-configured set of attributes that you can use. RSX is validated at compile time to make sure you didn't specify an invalid attribute. If you want to override this behavior with a custom attribute name, specify the attribute in quotes:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(div {{\n</span><span style=\"color:#c0c5ce;\">    &quot;</span><span style=\"color:#a3be8c;\">style</span><span style=\"color:#c0c5ce;\">&quot;: &quot;</span><span style=\"color:#a3be8c;\">width: 20px; height: 20px; background-color: red;</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">}}))\n</span></pre>\n" }
        DemoFrame { rsx_overview::CustomAttributes {} }
        h3 { id: "special-attributes",
            a { href: "#special-attributes", class: "header", "Special Attributes" }
        }
        p { "While most attributes are simply passed on to the HTML, some have special behaviors." }
        h4 { id: "the-html-escape-hatch",
            a { href: "#the-html-escape-hatch", class: "header", "The HTML Escape Hatch" }
        }
        p {
            "If you're working with pre-rendered assets, output from templates, or output from a JS library, then you might want to pass HTML directly instead of going through Dioxus. In these instances, reach for  "
            code { "dangerous_inner_html" }
            "."
        }
        p {
            "For example, shipping a markdown-to-Dioxus converter might significantly bloat your final application size. Instead, you'll want to pre-render your markdown to HTML and then include the HTML directly in your output. We use this approach for the "
            a { href: "https://dioxuslabs.com", "" }
            ":"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// this should come from a trusted source\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> contents = &quot;</span><span style=\"color:#a3be8c;\">live &lt;b&gt;dangerously&lt;/b&gt;</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    div {{\n</span><span style=\"color:#c0c5ce;\">        dangerous_inner_html: &quot;</span><span style=\"color:#a3be8c;\">{{contents}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n" }
        DemoFrame { dangerous_inner_html::App {} }
        blockquote {
            p {
                "Note! This attribute is called \"dangerous_inner_html\" because it is "
                strong { "dangerous" }
                " to pass it data you don't trust. If you're not careful, you can easily expose "
                a { href: "https://en.wikipedia.org/wiki/Cross-site_scripting", "" }
                " attacks to your users."
            }
            p {
                "If you're handling untrusted input, make sure to sanitize your HTML before passing it into  "
                code { "dangerous_inner_html" }
                " – or just pass it to a Text Element to escape any HTML tags."
            }
        }
        h4 { id: "boolean-attributes",
            a { href: "#boolean-attributes", class: "header", "Boolean Attributes" }
        }
        p {
            "Most attributes, when rendered, will be rendered exactly as the input you provided. However, some attributes are considered \"boolean\" attributes and just their presence determines whether they affect the output. For these attributes, a provided value of  "
            code { "\"false\"" }
            " will cause them to be removed from the target element."
        }
        p {
            "So this RSX wouldn't actually render the  "
            code { "hidden" }
            " attribute:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    div {{\n</span><span style=\"color:#c0c5ce;\">        hidden: </span><span style=\"color:#d08770;\">false</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">hello</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n" }
        DemoFrame { boolean_attribute::App {} }
        p {
            "Not all attributes work like this however. "
            em { "Only the following attributes" }
            " have this behavior:"
        }
        ul {
            li {
                code { "allowfullscreen" }
            }
            li {
                code { "allowpaymentrequest" }
            }
            li {
                code { "async" }
            }
            li {
                code { "autofocus" }
            }
            li {
                code { "autoplay" }
            }
            li {
                code { "checked" }
            }
            li {
                code { "controls" }
            }
            li {
                code { "default" }
            }
            li {
                code { "defer" }
            }
            li {
                code { "disabled" }
            }
            li {
                code { "formnovalidate" }
            }
            li {
                code { "hidden" }
            }
            li {
                code { "ismap" }
            }
            li {
                code { "itemscope" }
            }
            li {
                code { "loop" }
            }
            li {
                code { "multiple" }
            }
            li {
                code { "muted" }
            }
            li {
                code { "nomodule" }
            }
            li {
                code { "novalidate" }
            }
            li {
                code { "open" }
            }
            li {
                code { "playsinline" }
            }
            li {
                code { "readonly" }
            }
            li {
                code { "required" }
            }
            li {
                code { "reversed" }
            }
            li {
                code { "selected" }
            }
            li {
                code { "truespeed" }
            }
        }
        p {
            "For any other attributes, a value of  "
            code { "\"false\"" }
            " will be sent directly to the DOM."
        }
        h3 { id: "interpolation",
            a { href: "#interpolation", class: "header", "Interpolation" }
        }
        p {
            "Similarly to how you can "
            a { href: "https://doc.rust-lang.org/rust-by-example/hello/print/fmt.html",
                ""
            }
            " Rust strings, you can also interpolate in RSX text. Use "
            code { "{{variable}}" }
            " to Display the value of a variable in a string, or "
            code { "{{variable:?}}" }
            " to use the Debug representation:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> coordinates = (</span><span style=\"color:#d08770;\">42</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> country = &quot;</span><span style=\"color:#a3be8c;\">es</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(div {{\n</span><span style=\"color:#c0c5ce;\">    class: &quot;</span><span style=\"color:#a3be8c;\">country-{{country}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    left: &quot;</span><span style=\"color:#a3be8c;\">{{coordinates.0:?}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    top: &quot;</span><span style=\"color:#a3be8c;\">{{coordinates.1:?}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// arbitrary expressions are allowed,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// as long as they don&#39;t contain `{{}}`\n</span><span style=\"color:#c0c5ce;\">    div {{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">{{country.to_uppercase()}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">    div {{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">{{7*6}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// {{}} can be escaped with {{{{}}}}\n</span><span style=\"color:#c0c5ce;\">    div {{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">{{{{}}}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">}}))\n</span></pre>\n",
        }
        DemoFrame { rsx_overview::Formatting {} }
        h3 { id: "children",
            a { href: "#children", class: "header", "Children" }
        }
        p {
            "To add children to an element, put them inside the  "
            code { "{{}}" }
            " brackets after all attributes and listeners in the element. They can be other elements, text, or "
            a { href: "components", "" }
            ". For example, you could have an "
            code { "ol" }
            " (ordered list) element, containing 3 "
            code { "li" }
            " (list item) elements, each of which contains some text:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(ol {{\n</span><span style=\"color:#c0c5ce;\">    li {{&quot;</span><span style=\"color:#a3be8c;\">First Item</span><span style=\"color:#c0c5ce;\">&quot;}}\n</span><span style=\"color:#c0c5ce;\">    li {{&quot;</span><span style=\"color:#a3be8c;\">Second Item</span><span style=\"color:#c0c5ce;\">&quot;}}\n</span><span style=\"color:#c0c5ce;\">    li {{&quot;</span><span style=\"color:#a3be8c;\">Third Item</span><span style=\"color:#c0c5ce;\">&quot;}}\n</span><span style=\"color:#c0c5ce;\">}}))\n</span></pre>\n" }
        DemoFrame { rsx_overview::Children {} }
        h3 { id: "fragments",
            a { href: "#fragments", class: "header", "Fragments" }
        }
        p {
            "You can render multiple elements at the top level of  "
            code { "rsx!" }
            " and they will be automatically grouped."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">    p {{&quot;</span><span style=\"color:#a3be8c;\">First Item</span><span style=\"color:#c0c5ce;\">&quot;}},\n</span><span style=\"color:#c0c5ce;\">    p {{&quot;</span><span style=\"color:#a3be8c;\">Second Item</span><span style=\"color:#c0c5ce;\">&quot;}},\n</span><span style=\"color:#c0c5ce;\">))\n</span></pre>\n" }
        DemoFrame { rsx_overview::ManyRoots {} }
        h3 { id: "expressions",
            a { href: "#expressions", class: "header", "Expressions" }
        }
        p {
            "You can include arbitrary Rust expressions as children within RSX that implements "
            a { href: "https://docs.rs/dioxus-core/0.3/dioxus_core/trait.IntoDynNode.html",
                ""
            }
            ". This is useful for displaying data from an "
            a { href: "https://doc.rust-lang.org/stable/book/ch13-02-iterators.html#processing-a-series-of-items-with-iterators",
                ""
            }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> text = &quot;</span><span style=\"color:#a3be8c;\">Dioxus</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(span {{\n</span><span style=\"color:#c0c5ce;\">    text.</span><span style=\"color:#96b5b4;\">to_uppercase</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// create a list of text from 0 to 9\n</span><span style=\"color:#c0c5ce;\">    (</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">..</span><span style=\"color:#d08770;\">10</span><span style=\"color:#c0c5ce;\">).</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">i</span><span style=\"color:#c0c5ce;\">| rsx!{{ i.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">() }})\n</span><span style=\"color:#c0c5ce;\">}}))\n</span></pre>\n",
        }
        DemoFrame { rsx_overview::Expression {} }
        h3 { id: "loops",
            a { href: "#loops", class: "header", "Loops" }
        }
        p { "In addition to iterators you can also use for loops directly within RSX:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// use a for loop where the body itself is RSX\n</span><span style=\"color:#c0c5ce;\">    div {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// create a list of text from 0 to 9\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> i in </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">..</span><span style=\"color:#d08770;\">3 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// NOTE: the body of the loop is RSX not a rust statement\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">{{i}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// iterator equivalent\n</span><span style=\"color:#c0c5ce;\">    div {{\n</span><span style=\"color:#c0c5ce;\">        (</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">..</span><span style=\"color:#d08770;\">3</span><span style=\"color:#c0c5ce;\">).</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">i</span><span style=\"color:#c0c5ce;\">| rsx!{{ div {{ &quot;</span><span style=\"color:#a3be8c;\">{{i}}</span><span style=\"color:#c0c5ce;\">&quot; }} }})\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n",
        }
        DemoFrame { rsx_overview::Loops {} }
        h3 { id: "if-statements",
            a { href: "#if-statements", class: "header", "If statements" }
        }
        p { "You can also use if statements without an else branch within RSX:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// use if statements without an else\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#d08770;\">true </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        rsx!(div {{ &quot;</span><span style=\"color:#a3be8c;\">true</span><span style=\"color:#c0c5ce;\">&quot; }})\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n" }
        DemoFrame { rsx_overview::IfStatements {} }
    }
}
#[component(no_case_check)]
pub fn ReferenceComponents() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "components",
            a { href: "#components", class: "header", "Components" }
        }
        p {
            "Just like you wouldn't want to write a complex program in a single, long,  "
            code { "main" }
            " function, you shouldn't build a complex UI in a single  "
            code { "App" }
            " function. Instead, you should break down the functionality of an app in logical parts called components."
        }
        p {
            "A component is a Rust function, named in UpperCammelCase, that takes a  "
            code { "Scope" }
            " parameter and returns an  "
            code { "Element" }
            " describing the UI it wants to render. In fact, our  "
            code { "App" }
            " function is a component!"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// define a component that renders a div with the text &quot;Hello, world!&quot;\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Hello, world!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        blockquote {
            p {
                "You'll probably want to add  "
                code { "#![allow(non_snake_case)]" }
                " to the top of your crate to avoid warnings about UpperCammelCase component names"
            }
        }
        p {
            "A Component is responsible for some rendering task – typically, rendering an isolated part of the user interface. For example, you could have an  "
            code { "About" }
            " component that renders a short description of Dioxus Labs:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">About</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(p {{\n</span><span style=\"color:#c0c5ce;\">        b {{&quot;</span><span style=\"color:#a3be8c;\">Dioxus Labs</span><span style=\"color:#c0c5ce;\">&quot;}}\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\"> An Open Source project dedicated to making Rust UI wonderful.</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        DemoFrame { components::About {} }
        p {
            "Then, you can render your component in another component, similarly to how elements are rendered:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        About {{}},\n</span><span style=\"color:#c0c5ce;\">        About {{}},\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        DemoFrame { components::App {} }
        blockquote {
            p {
                "At this point, it might seem like components are nothing more than functions. However, as you learn more about the features of Dioxus, you'll see that they are actually more powerful!"
            }
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceComponentProps() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "component-props",
            a { href: "#component-props", class: "header", "Component Props" }
        }
        p {
            "Just like you can pass arguments to a function or attributes to an element, you can pass props to a component that customize its behavior! The components we've seen so far didn't accept any props – so let's write some components that do."
        }
        h2 { id: "",
            a { href: "#", class: "header", "" }
            code { "#[derive(Props)]" }
        }
        p {
            "Component props are a single struct annotated with  "
            code { "#[derive(Props)]" }
            ". For a component to accept props, the type of its argument must be  "
            code { "Scope<YourPropsStruct>" }
            ". Then, you can access the value of the props using  "
            code { "cx.props" }
            "."
        }
        p { "There are 2 flavors of Props structs:" }
        ul {
            li {
                "Owned props:"
                ul {
                    li { "Don't have an associated lifetime" }
                    li {
                        "Implement "
                        code { "PartialEq" }
                        ", allow for memoization (if the props don't change, Dioxus won't re-render the component)"
                    }
                }
            }
            li {
                "Borrowed props:"
                ul {
                    li {
                        a { href: "https://doc.rust-lang.org/beta/rust-by-example/scope/borrow.html",
                            ""
                        }
                        " from a parent component"
                    }
                    li { "Cannot be memoized due to lifetime constraints" }
                }
            }
        }
        h3 { id: "owned-props",
            a { href: "#owned-props", class: "header", "Owned Props" }
        }
        p { "Owned Props are very simple – they don't borrow anything. Example:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// Remember: Owned props must implement `PartialEq`!\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(PartialEq, Props)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">LikesProps {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">score</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Likes</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;LikesProps&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">This post has </span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            b {{ &quot;</span><span style=\"color:#a3be8c;\">{{cx.props.score}}</span><span style=\"color:#c0c5ce;\">&quot; }},\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\"> likes</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "You can then pass prop values to the component the same way you would pass attributes to an element:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        Likes {{\n</span><span style=\"color:#c0c5ce;\">            score: </span><span style=\"color:#d08770;\">42</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        DemoFrame { component_owned_props::App {} }
        h3 { id: "borrowed-props",
            a { href: "#borrowed-props", class: "header", "Borrowed Props" }
        }
        p {
            "Owned props work well if your props are easy to copy around – like a single number. But what if we need to pass a larger data type, like a String from an  "
            code { "App" }
            " Component to a  "
            code { "TitleCard" }
            " subcomponent? A naive solution might be to "
            a { href: "https://doc.rust-lang.org/std/clone/trait.Clone.html",
                ""
                code { ".clone()" }
            }
            " the String, creating a copy of it for the subcomponent – but this would be inefficient, especially for larger Strings."
        }
        p {
            "Rust allows for something more efficient – borrowing the String as a  "
            code { "&str" }
            " – this is what Borrowed Props are for!"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Props)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">TitleCardProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">&#39;a str</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">TitleCard</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, TitleCardProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">{{cx.props.title}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "We can then use the component like this:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> hello = &quot;</span><span style=\"color:#a3be8c;\">Hello Dioxus!</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(TitleCard {{ title: hello }}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        DemoFrame { __interactive_04::component_borrowed_props {} }
        p {
            "Borrowed props can be very useful, but they do not allow for memorization so they will "
            em { "always" }
            " rerun when the parent scope is rerendered. Because of this Borrowed Props should be reserved for components that are cheap to rerun or places where cloning data is an issue. Using Borrowed Props everywhere will result in large parts of your app rerunning every interaction."
        }
        h2 { id: "prop-options",
            a { href: "#prop-options", class: "header", "Prop Options" }
        }
        p {
            "The  "
            code { "#[derive(Props)]" }
            " macro has some features that let you customize the behavior of props."
        }
        h3 { id: "optional-props",
            a { href: "#optional-props", class: "header", "Optional Props" }
        }
        p {
            "You can create optional fields by using the  "
            code { "Option<…>" }
            " type for a field:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Props)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">OptionalProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">&#39;a str</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">subtitle</span><span style=\"color:#c0c5ce;\">: Option&lt;&amp;</span><span style=\"color:#b48ead;\">&#39;a str</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Title</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, OptionalProps&gt;) -&gt; Element&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(h1{{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">{{cx.props.title}}: </span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        cx.props.subtitle.</span><span style=\"color:#96b5b4;\">unwrap_or</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">No subtitle provided</span><span style=\"color:#c0c5ce;\">&quot;),\n</span><span style=\"color:#c0c5ce;\">    }}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "Then, you can choose to either provide them or not:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">Title {{\n</span><span style=\"color:#c0c5ce;\">title: &quot;</span><span style=\"color:#a3be8c;\">Some Title</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#c0c5ce;\">Title {{\n</span><span style=\"color:#c0c5ce;\">title: &quot;</span><span style=\"color:#a3be8c;\">Some Title</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">subtitle: &quot;</span><span style=\"color:#a3be8c;\">Some Subtitle</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#65737e;\">// Providing an Option explicitly won&#39;t compile though:\n</span><span style=\"color:#65737e;\">// Title {{\n</span><span style=\"color:#65737e;\">//     title: &quot;Some Title&quot;,\n</span><span style=\"color:#65737e;\">//     subtitle: None,\n</span><span style=\"color:#65737e;\">// }},\n</span></pre>\n",
        }
        h3 { id: "explicitly-required",
            a { href: "#explicitly-required", class: "header", "Explicitly Required " }
            code { "Option" }
            "s"
        }
        p {
            "If you want to explicitly require an  "
            code { "Option" }
            ", and not an optional prop, you can annotate it with  "
            code { "#[props(!optional)]" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Props)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">ExplicitOptionProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">&#39;a str</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    #[props(!optional)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">subtitle</span><span style=\"color:#c0c5ce;\">: Option&lt;&amp;</span><span style=\"color:#b48ead;\">&#39;a str</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">ExplicitOption</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, ExplicitOptionProps&gt;) -&gt; Element&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(h1 {{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">{{cx.props.title}}: </span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        cx.props.subtitle.</span><span style=\"color:#96b5b4;\">unwrap_or</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">No subtitle provided</span><span style=\"color:#c0c5ce;\">&quot;),\n</span><span style=\"color:#c0c5ce;\">    }}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Then, you have to explicitly pass either  "
            code { "Some(\"str\")" }
            " or  "
            code { "None" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">ExplicitOption {{\n</span><span style=\"color:#c0c5ce;\">title: &quot;</span><span style=\"color:#a3be8c;\">Some Title</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">subtitle: None,\n</span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#c0c5ce;\">ExplicitOption {{\n</span><span style=\"color:#c0c5ce;\">title: &quot;</span><span style=\"color:#a3be8c;\">Some Title</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">subtitle: Some(&quot;</span><span style=\"color:#a3be8c;\">Some Title</span><span style=\"color:#c0c5ce;\">&quot;),\n</span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#65737e;\">// This won&#39;t compile:\n</span><span style=\"color:#65737e;\">// ExplicitOption {{\n</span><span style=\"color:#65737e;\">//     title: &quot;Some Title&quot;,\n</span><span style=\"color:#65737e;\">// }},\n</span></pre>\n",
        }
        h3 { id: "default-props",
            a { href: "#default-props", class: "header", "Default Props" }
        }
        p {
            "You can use  "
            code { "#[props(default = 42)]" }
            " to make a field optional and specify its default value:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(PartialEq, Props)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">DefaultProps {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// default to 42 when not provided\n</span><span style=\"color:#c0c5ce;\">    #[props(default = 42)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">number</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i64</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">DefaultComponent</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;DefaultProps&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(h1 {{ &quot;</span><span style=\"color:#a3be8c;\">{{cx.props.number}}</span><span style=\"color:#c0c5ce;\">&quot; }}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "Then, similarly to optional props, you don't have to provide it:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">DefaultComponent {{\n</span><span style=\"color:#c0c5ce;\">number: </span><span style=\"color:#d08770;\">5</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#c0c5ce;\">DefaultComponent {{}},\n</span></pre>\n" }
        h3 { id: "automatic-conversion-with",
            a { href: "#automatic-conversion-with", class: "header", "Automatic Conversion with " }
            code { ".into" }
        }
        p {
            "It is common for Rust functions to accept  "
            code { "impl Into<SomeType>" }
            " rather than just  "
            code { "SomeType" }
            " to support a wider range of parameters. If you want similar functionality with props, you can use  "
            code { "#[props(into)]" }
            ". For example, you could add it on a  "
            code { "String" }
            " prop – and  "
            code { "&str" }
            " will also be automatically accepted, as it can be converted into  "
            code { "String" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(PartialEq, Props)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">IntoProps {{\n</span><span style=\"color:#c0c5ce;\">    #[props(into)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">string</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">IntoComponent</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;IntoProps&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(h1 {{ &quot;</span><span style=\"color:#a3be8c;\">{{cx.props.string}}</span><span style=\"color:#c0c5ce;\">&quot; }}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "Then, you can use it so:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">IntoComponent {{\n</span><span style=\"color:#c0c5ce;\">string: &quot;</span><span style=\"color:#a3be8c;\">some &amp;str</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">}},\n</span></pre>\n" }
        h2 { id: "the",
            a { href: "#the", class: "header", "The " }
            code { "component" }
            " macro"
        }
        p {
            "So far, every Component function we've seen had a corresponding ComponentProps struct to pass in props. This was quite verbose... Wouldn't it be nice to have props as simple function arguments? Then we wouldn't need to define a Props struct, and instead of typing  "
            code { "cx.props.whatever" }
            ", we could just use  "
            code { "whatever" }
            " directly!"
        }
        p {
            code { "component" }
            " allows you to do just that. Instead of typing the \"full\" version:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Props, PartialEq)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">TitleCardProps {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">TitleCard</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;TitleCardProps&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!{{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">{{cx.props.title}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "...you can define a function that accepts props as arguments. Then, just annotate it with  "
            code { "#[component]" }
            ", and the macro will turn it into a regular Component for you:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">TitleCard</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">title</span><span style=\"color:#c0c5ce;\">: String) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!{{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">{{title}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        blockquote {
            p {
                "While the new Component is shorter and easier to read, this macro should not be used by library authors since you have less control over Prop documentation."
            }
        }
        h2 { id: "component-children",
            a { href: "#component-children", class: "header", "Component Children" }
        }
        p {
            "In some cases, you may wish to create a component that acts as a container for some other content, without the component needing to know what that content is. To achieve this, create a prop of type  "
            code { "Element" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Props)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">ClickableProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">href</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">&#39;a str</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">body</span><span style=\"color:#c0c5ce;\">: Element&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Clickable</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, ClickableProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">        a {{\n</span><span style=\"color:#c0c5ce;\">            href: &quot;</span><span style=\"color:#a3be8c;\">{{cx.props.href}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            class: &quot;</span><span style=\"color:#a3be8c;\">fancy-button</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            &amp;cx.props.body\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    ))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Then, when rendering the component, you can pass in the output of  "
            code { "cx.render(rsx!(...))" }
            ":"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    Clickable {{\n</span><span style=\"color:#c0c5ce;\">        href: &quot;</span><span style=\"color:#a3be8c;\">https://www.youtube.com/watch?v=C-M2hs3sXGo</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        body: cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(&quot;</span><span style=\"color:#a3be8c;\">How to </span><span style=\"color:#c0c5ce;\">&quot; i {{&quot;</span><span style=\"color:#a3be8c;\">not</span><span style=\"color:#c0c5ce;\">&quot;}} &quot;</span><span style=\"color:#a3be8c;\"> be seen</span><span style=\"color:#c0c5ce;\">&quot;)),\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n" }
        blockquote {
            p {
                "Note: Since  "
                code { "Element<'a>" }
                " is a borrowed prop, there will be no memoization."
            }
        }
        blockquote {
            p {
                "Warning: While it may compile, do not include the same  "
                code { "Element" }
                " more than once in the RSX. The resulting behavior is unspecified."
            }
        }
        h3 { id: "the",
            a { href: "#the", class: "header", "The " }
            code { "children" }
            " field"
        }
        p {
            "Rather than passing the RSX through a regular prop, you may wish to accept children similarly to how elements can have children. The \"magic\"  "
            code { "children" }
            " prop lets you achieve this:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Props)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">ClickableProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">href</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">&#39;a str</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">children</span><span style=\"color:#c0c5ce;\">: Element&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Clickable</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, ClickableProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">        a {{\n</span><span style=\"color:#c0c5ce;\">            href: &quot;</span><span style=\"color:#a3be8c;\">{{cx.props.href}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            class: &quot;</span><span style=\"color:#a3be8c;\">fancy-button</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            &amp;cx.props.children\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    ))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "This makes using the component much simpler: simply put the RSX inside the  "
            code { "{{}}" }
            " brackets – and there is no need for a  "
            code { "render" }
            " call or another macro!"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    Clickable {{\n</span><span style=\"color:#c0c5ce;\">        href: &quot;</span><span style=\"color:#a3be8c;\">https://www.youtube.com/watch?v=C-M2hs3sXGo</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">How to </span><span style=\"color:#c0c5ce;\">&quot; i {{&quot;</span><span style=\"color:#a3be8c;\">not</span><span style=\"color:#c0c5ce;\">&quot;}} &quot;</span><span style=\"color:#a3be8c;\"> be seen</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n" }
        DemoFrame { component_children::App {} }
    }
}
#[component(no_case_check)]
pub fn ReferenceEventHandlers() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "event-handlers",
            a { href: "#event-handlers", class: "header", "Event Handlers" }
        }
        p {
            "Event handlers are used to respond to user actions. For example, an event handler could be triggered when the user clicks, scrolls, moves the mouse, or types a character."
        }
        p {
            "Event handlers are attached to elements. For example, we usually don't care about all the clicks that happen within an app, only those on a particular button."
        }
        p {
            "Event handlers are similar to regular attributes, but their name usually starts with  "
            code { "on" }
            "- and they accept closures as values. The closure will be called whenever the event it listens for is triggered and will be passed that event."
        }
        p {
            "For example, to handle clicks on an element, we can specify an  "
            code { "onclick" }
            " handler:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    button {{\n</span><span style=\"color:#c0c5ce;\">        onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|event| log::info!(&quot;</span><span style=\"color:#a3be8c;\">Clicked! Event: {{event:?}}</span><span style=\"color:#c0c5ce;\">&quot;),\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">click me!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n" }
        DemoFrame { event_click::App {} }
        h2 { id: "the",
            a { href: "#the", class: "header", "The " }
            code { "Event" }
            " object"
        }
        p {
            "Event handlers receive an "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/struct.Event.html",
                ""
                code { "Event" }
            }
            " object containing information about the event. Different types of events contain different types of data. For example, mouse-related events contain "
            a { href: "https://docs.rs/dioxus/latest/dioxus/events/struct.MouseData.html",
                ""
                code { "MouseData" }
            }
            ", which tells you things like where the mouse was clicked and what mouse buttons were used."
        }
        p { "In the example above, this event data was logged to the terminal:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">Clicked! Event: UiEvent {{ bubble_state: Cell {{ value: </span><span style=\"color:#d08770;\">true </span><span style=\"color:#c0c5ce;\">}}, data: MouseData {{ coordinates: Coordinates {{ screen: (</span><span style=\"color:#d08770;\">242.0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">256.0</span><span style=\"color:#c0c5ce;\">), client: (</span><span style=\"color:#d08770;\">26.0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">17.0</span><span style=\"color:#c0c5ce;\">), element: (</span><span style=\"color:#d08770;\">16.0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">7.0</span><span style=\"color:#c0c5ce;\">), page: (</span><span style=\"color:#d08770;\">26.0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">17.0</span><span style=\"color:#c0c5ce;\">) }}, modifiers: (empty), held_buttons: EnumSet(), trigger_button: Some(Primary) }} }}\n</span><span style=\"color:#c0c5ce;\">Clicked! Event: UiEvent {{ bubble_state: Cell {{ value: </span><span style=\"color:#d08770;\">true </span><span style=\"color:#c0c5ce;\">}}, data: MouseData {{ coordinates: Coordinates {{ screen: (</span><span style=\"color:#d08770;\">242.0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">256.0</span><span style=\"color:#c0c5ce;\">), client: (</span><span style=\"color:#d08770;\">26.0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">17.0</span><span style=\"color:#c0c5ce;\">), element: (</span><span style=\"color:#d08770;\">16.0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">7.0</span><span style=\"color:#c0c5ce;\">), page: (</span><span style=\"color:#d08770;\">26.0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">17.0</span><span style=\"color:#c0c5ce;\">) }}, modifiers: (empty), held_buttons: EnumSet(), trigger_button: Some(Primary) }} }}\n</span></pre>\n",
        }
        p {
            "To learn what the different event types for HTML provide, read the "
            a { href: "https://docs.rs/dioxus-html/latest/dioxus_html/events/index.html",
                ""
            }
            "."
        }
        h3 { id: "event-propagation",
            a { href: "#event-propagation", class: "header", "Event propagation" }
        }
        p {
            "Some events will trigger first on the element the event originated at upward. For example, a click event on a  "
            code { "button" }
            " inside a  "
            code { "div" }
            " would first trigger the button's event listener and then the div's event listener."
        }
        blockquote {
            p {
                "For more information about event propagation see "
                a { href: "https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling",
                    ""
                }
            }
        }
        p {
            "If you want to prevent this behavior, you can call  "
            code { "stop_propagation()" }
            " on the event:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    div {{\n</span><span style=\"color:#c0c5ce;\">        onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_event| {{}},\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">outer</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        button {{\n</span><span style=\"color:#c0c5ce;\">            onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|event| {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// now, outer won&#39;t be triggered\n</span><span style=\"color:#c0c5ce;\">                event.</span><span style=\"color:#96b5b4;\">stop_propagation</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">inner</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n",
        }
        h2 { id: "prevent-default",
            a { href: "#prevent-default", class: "header", "Prevent Default" }
        }
        p {
            "Some events have a default behavior. For keyboard events, this might be entering the typed character. For mouse events, this might be selecting some text."
        }
        p {
            "In some instances, might want to avoid this default behavior. For this, you can add the  "
            code { "prevent_default" }
            " attribute with the name of the handler whose default behavior you want to stop. This attribute can be used for multiple handlers using their name separated by spaces:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    a {{\n</span><span style=\"color:#c0c5ce;\">        href: &quot;</span><span style=\"color:#a3be8c;\">https://example.com</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        prevent_default: &quot;</span><span style=\"color:#a3be8c;\">onclick</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        onclick: |_| log::info!(&quot;</span><span style=\"color:#a3be8c;\">link clicked</span><span style=\"color:#c0c5ce;\">&quot;),\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">example.com</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n" }
        DemoFrame { event_prevent_default::App {} }
        p { "Any event handlers will still be called." }
        blockquote {
            p {
                "Normally, in React or JavaScript, you'd call \"preventDefault\" on the event in the callback. Dioxus does "
                em { "not" }
                " currently support this behavior. Note: this means you cannot conditionally prevent default behavior based on the data in the event."
            }
        }
        h2 { id: "handler-props",
            a { href: "#handler-props", class: "header", "Handler Props" }
        }
        p {
            "Sometimes, you might want to make a component that accepts an event handler. A simple example would be a  "
            code { "FancyButton" }
            " component, which accepts an  "
            code { "on_click" }
            " handler:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Props)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">FancyButtonProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">on_click</span><span style=\"color:#c0c5ce;\">: EventHandler&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, MouseEvent&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">FancyButton</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, FancyButtonProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;) -&gt; Element&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(button {{\n</span><span style=\"color:#c0c5ce;\">        class: &quot;</span><span style=\"color:#a3be8c;\">fancy-button</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|evt| cx.props.on_click.</span><span style=\"color:#96b5b4;\">call</span><span style=\"color:#c0c5ce;\">(evt),\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">click me pls.</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "Then, you can use it like any other handler:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    FancyButton {{\n</span><span style=\"color:#c0c5ce;\">        on_click: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|event| println!(&quot;</span><span style=\"color:#a3be8c;\">Clicked! </span><span style=\"color:#d08770;\">{{event:?}}</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n" }
        blockquote {
            p {
                "Note: just like any other attribute, you can name the handlers anything you want! Though they must start with  "
                code { "on" }
                ", for the prop to be automatically turned into an  "
                code { "EventHandler" }
                " at the call site."
            }
        }
        h2 { id: "custom-data",
            a { href: "#custom-data", class: "header", "Custom Data" }
        }
        p {
            "Event Handlers are generic over any type, so you can pass in any data you want to them, e.g:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">ComplexData(</span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Props)]\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">CustomFancyButtonProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">on_click</span><span style=\"color:#c0c5ce;\">: EventHandler&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, ComplexData&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">CustomFancyButton</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, CustomFancyButtonProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;) -&gt; Element&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(button {{\n</span><span style=\"color:#c0c5ce;\">        class: &quot;</span><span style=\"color:#a3be8c;\">fancy-button</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| cx.props.on_click.</span><span style=\"color:#96b5b4;\">call</span><span style=\"color:#c0c5ce;\">(ComplexData(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">)),\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">click me pls.</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceHooks() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "hooks-and-component-state",
            a { href: "#hooks-and-component-state", class: "header", "Hooks and component state" }
        }
        p {
            "So far, our components have had no state like a normal Rust function. However, in a UI component, it is often useful to have stateful functionality to build user interactions. For example, you might want to track whether the user has opened a drop-down and render different things accordingly."
        }
        p {
            "Hooks allow us to create state in our components. Hooks are Rust functions that take a reference to "
            a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.ScopeState.html",
                ""
                code { "ScopeState" }
            }
            " (in a component, you can pass "
            code { "cx" }
            "), and provide you with functionality and state."
        }
        p {
            "Dioxus provides many built-in hooks, but if those hooks don't fit your specific use case, you also can "
            a { href: "../cookbook/state/custom_hooks", "" }
        }
        h2 { id: "use-state-hook",
            a { href: "#use-state-hook", class: "header", "use_state hook" }
        }
        p {
            a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/fn.use_state.html",
                ""
                code { "use_state" }
            }
            " is one of the simplest hooks."
        }
        ul {
            li {
                "You provide a closure that determines the initial value: "
                code { "let mut count = use_state(cx, || 0);" }
            }
            li {
                code { "use_state" }
                " gives you the current value, and a way to update it by setting it to something else"
            }
            li {
                "When the value updates, "
                code { "use_state" }
                " makes the component re-render (along with any other component that references it), and then provides you with the new value."
            }
        }
        p {
            "For example, you might have seen the counter example, in which state (a number) is tracked using the  "
            code { "use_state" }
            " hook:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// count will be initialized to 0 the first time the component is rendered\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">High-Five counter: {{count}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{\n</span><span style=\"color:#c0c5ce;\">            onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// changing the count will cause the component to re-render\n</span><span style=\"color:#c0c5ce;\">                count += </span><span style=\"color:#d08770;\">1\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Up high!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        button {{\n</span><span style=\"color:#c0c5ce;\">            onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// changing the count will cause the component to re-render\n</span><span style=\"color:#c0c5ce;\">                count -= </span><span style=\"color:#d08770;\">1\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Down low!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    ))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { hooks_counter::App {} }
        p {
            "Every time the component's state changes, it re-renders, and the component function is called, so you can describe what you want the new UI to look like. You don't have to worry about \"changing\" anything – describe what you want in terms of the state, and Dioxus will take care of the rest!"
        }
        blockquote {
            p {
                code { "use_state" }
                " returns your value wrapped in a smart pointer of type "
                a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.UseState.html",
                    ""
                    code { "UseState" }
                }
                ". This is why you can both read the value and update it, even within an event handler."
            }
        }
        p { "You can use multiple hooks in the same component if you want:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count_a = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count_b = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Counter_a: {{count_a}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count_a += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">a++</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count_a -= </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">a--</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Counter_b: {{count_b}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count_b += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">b++</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count_b -= </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">b--</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    ))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { hooks_counter_two_state::App {} }
        h3 { id: "out-of-date-usestate",
            a { href: "#out-of-date-usestate", class: "header", "Out-of-date UseState" }
        }
        p {
            "The value  "
            code { "UseState" }
            " dereferences to is only set when the use_state hook is called every render. This means that if you move the state into a future, or you write to the state and then immediately read the state, it may return an out-of-date value."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// count will be initialized to 0 the first time the component is rendered\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> first_count_read = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Increase the count\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*count == </span><span style=\"color:#d08770;\">0 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        count += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">        first_count_read.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(**count);\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// This uses the deref value\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">High-Five counter: {{first_count_read}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    ))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { __interactive_04::hooks_out_of_date {} }
        p {
            "Instead of using deref to get the inner value from UseState, you can use the "
            a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.UseState.html#method.current",
                ""
                code { "current" }
            }
            " function. This function will always return the current value of the state."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> first_count_read = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Increase the count\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*count == </span><span style=\"color:#d08770;\">0 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        count += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">        first_count_read.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(*count.</span><span style=\"color:#96b5b4;\">current</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Use .current to get the real current value\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">High-Five counter: {{first_count_read}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    ))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { __interactive_04::hooks_out_of_date_fixed {} }
        h2 { id: "rules-of-hooks",
            a { href: "#rules-of-hooks", class: "header", "Rules of hooks" }
        }
        p {
            "The above example might seem a bit magic since Rust functions are typically not associated with state. Dioxus allows hooks to maintain state across renders through a reference to  "
            code { "ScopeState" }
            ", which is why you must pass  "
            code { "&cx" }
            " to them."
        }
        p {
            "But how can Dioxus differentiate between multiple hooks in the same component? As you saw in the second example, both  "
            code { "use_state" }
            " functions were called with the same parameters, so how come they can return different things when the counters are different?"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count_a = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count_b = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span></pre>\n" }
        p {
            "This is only possible because the two hooks are always called in the same order, so Dioxus knows which is which. Because the order you call hooks matters, you must follow certain rules when using hooks:"
        }
        ol {
            li { "Hooks may be only used in components or other hooks (we'll get to that later)." }
            li { "On every call to a component function." }
            li {
                "The same hooks must be called (except in the case of early returns, as explained later in the "
                a { href: "../../cookbook/error_handling", "" }
                ")."
            }
            li { "In the same order." }
            li {
                "Hook names should start with "
                code { "use_" }
                " so you don't accidentally confuse them with regular"
                code { "use_state()" }
                ", "
                code { "use_ref()" }
                ", "
                code { "use_future()" }
                ", etc...)."
            }
        }
        p { "These rules mean that there are certain things you can't do with hooks:" }
        h3 { id: "no-hooks-in-conditionals",
            a { href: "#no-hooks-in-conditionals", class: "header", "No hooks in conditionals" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// ❌ don&#39;t call hooks in conditionals!\n</span><span style=\"color:#65737e;\">// We must ensure that the same hooks will be called every time\n</span><span style=\"color:#65737e;\">// But `if` statements only run if the conditional is true!\n</span><span style=\"color:#65737e;\">// So we might violate rule 2.\n</span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> you_are_happy &amp;&amp; you_know_it {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> something = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || &quot;</span><span style=\"color:#a3be8c;\">hands</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">clap your </span><span style=\"color:#d08770;\">{{something}}</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ✅ instead, *always* call use_state\n</span><span style=\"color:#65737e;\">// You can put other stuff in the conditional though\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> something = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || &quot;</span><span style=\"color:#a3be8c;\">hands</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> you_are_happy &amp;&amp; you_know_it {{\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">clap your </span><span style=\"color:#d08770;\">{{something}}</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h3 { id: "no-hooks-in-closures",
            a { href: "#no-hooks-in-closures", class: "header", "No hooks in closures" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// ❌ don&#39;t call hooks inside closures!\n</span><span style=\"color:#65737e;\">// We can&#39;t guarantee that the closure, if used, will be called in the same order every time\n</span><span style=\"color:#b48ead;\">let </span><span style=\"color:#8fa1b3;\">_a </span><span style=\"color:#c0c5ce;\">= || {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> b = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    b.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ✅ instead, move hook `b` outside\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> b = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#b48ead;\">let </span><span style=\"color:#8fa1b3;\">_a </span><span style=\"color:#c0c5ce;\">= || b.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">();\n</span></pre>\n",
        }
        h3 { id: "no-hooks-in-loops",
            a { href: "#no-hooks-in-loops", class: "header", "No hooks in loops" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// `names` is a Vec&lt;&amp;str&gt;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ❌ Do not use hooks in loops!\n</span><span style=\"color:#65737e;\">// In this case, if the length of the Vec changes, we break rule 2\n</span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> _name in &amp;names {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> is_selected = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">false</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">selected: </span><span style=\"color:#d08770;\">{{is_selected}}</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ✅ Instead, use a hashmap with use_ref\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> selection_map = </span><span style=\"color:#96b5b4;\">use_ref</span><span style=\"color:#c0c5ce;\">(cx, HashMap::&lt;&amp;</span><span style=\"color:#b48ead;\">str</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#b48ead;\">bool</span><span style=\"color:#c0c5ce;\">&gt;::new);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> name in &amp;names {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> is_selected = selection_map.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">()[name];\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">selected: </span><span style=\"color:#d08770;\">{{is_selected}}</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "use-ref-hook",
            a { href: "#use-ref-hook", class: "header", "use_ref hook" }
        }
        p {
            code { "use_state" }
            " is great for tracking simple values. However, in the "
            a { href: "https://docs.rs/dioxus/latest/dioxus/hooks/struct.UseState.html",
                ""
                code { "UseState" }
                " API"
            }
            ", you may notice that the only way to modify its value is to replace it with something else (e.g., by calling "
            code { "set" }
            ", or through one of the "
            code { "+=" }
            ", "
            code { "-=" }
            " operators). This works well when it is cheap to construct a value (such as any primitive). But what if you want to maintain more complex data in the component's state?"
        }
        p {
            "For example, suppose we want to maintain a  "
            code { "Vec" }
            " of values. If we stored it with  "
            code { "use_state" }
            ", the"
            code { "Vec" }
            ", add our value to it,"
            code { "Vec" }
            " in the state with it. This is expensive! We want to modify the"
            code { "Vec" }
            " instead."
        }
        p {
            "Thankfully, there is another hook for that,  "
            code { "use_ref" }
            "! It is similar to  "
            code { "use_state" }
            ", but it lets you get a mutable reference to the contained data."
        }
        p {
            "Here's a simple example that keeps a list of events in a  "
            code { "use_ref" }
            ". We can acquire write access to the state with  "
            code { ".with_mut()" }
            ", and then just  "
            code { ".push" }
            " a new value to the state:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> list = </span><span style=\"color:#96b5b4;\">use_ref</span><span style=\"color:#c0c5ce;\">(cx, Vec::new);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">        p {{ &quot;</span><span style=\"color:#a3be8c;\">Current list: {{list.read():?}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{\n</span><span style=\"color:#c0c5ce;\">            onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|event| {{\n</span><span style=\"color:#c0c5ce;\">                list.</span><span style=\"color:#96b5b4;\">with_mut</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">list</span><span style=\"color:#c0c5ce;\">| list.</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#c0c5ce;\">(event));\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Click me!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    ))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { __interactive_04::hooks_use_ref {} }
        blockquote {
            p {
                "The return values of  "
                code { "use_state" }
                " and  "
                code { "use_ref" }
                " ("
                a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.UseState.html",
                    ""
                    code { "UseState" }
                }
                " and"
                a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.UseRef.html",
                    ""
                    code { "UseRef" }
                }
                ", respectively) are in"
                a { href: "https://doc.rust-lang.org/std/cell/",
                    ""
                    code { "Cell" }
                }
                " and"
                a { href: "https://doc.rust-lang.org/std/cell/struct.RefCell.html",
                    ""
                    code { "RefCell" }
                }
                " – they provide interior"
            }
        }
        h2 { id: "additional-resources",
            a { href: "#additional-resources", class: "header", "Additional resources" }
        }
        ul {
            li {
                a { href: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/", "" }
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/hooks",
                    ""
                }
            }
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceUserInput() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "user-input",
            a { href: "#user-input", class: "header", "User Input" }
        }
        p {
            "Interfaces often need to provide a way to input data: e.g. text, numbers, checkboxes, etc. In Dioxus, there are two ways you can work with user input."
        }
        h2 { id: "controlled-inputs",
            a { href: "#controlled-inputs", class: "header", "Controlled Inputs" }
        }
        p {
            "With controlled inputs, you are directly in charge of the state of the input. This gives you a lot of flexibility, and makes it easy to keep things in sync. For example, this is how you would create a controlled text input:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> name = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || &quot;</span><span style=\"color:#a3be8c;\">bob</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        input {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// we tell the component what to render\n</span><span style=\"color:#c0c5ce;\">            value: &quot;</span><span style=\"color:#a3be8c;\">{{name}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// and what to do when the value changes\n</span><span style=\"color:#c0c5ce;\">            oninput: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|evt| name.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(evt.value.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">()),\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { input_controlled::App {} }
        p { "Notice the flexibility – you can:" }
        ul {
            li { "Also display the same contents in another element, and they will be in sync" }
            li { "Transform the input every time it is modified (e.g. to make sure it is upper case)" }
            li { "Validate the input every time it changes" }
            li {
                "Have custom logic happening when the input changes (e.g. network request for autocompletion)"
            }
            li {
                "Programmatically change the value (e.g. a \"randomize\" button that fills the input with nonsense)"
            }
        }
        h2 { id: "uncontrolled-inputs",
            a { href: "#uncontrolled-inputs", class: "header", "Uncontrolled Inputs" }
        }
        p {
            "As an alternative to controlled inputs, you can simply let the platform keep track of the input values. If we don't tell a HTML input what content it should have, it will be editable anyway (this is built into the browser). This approach can be more performant, but less flexible. For example, it's harder to keep the input in sync with another element."
        }
        p {
            "Since you don't necessarily have the current value of the uncontrolled input in state, you can access it either by listening to  "
            code { "oninput" }
            " events (similarly to controlled components), or, if the input is part of a form, you can access the form data in the form events (e.g.  "
            code { "oninput" }
            " or  "
            code { "onsubmit" }
            "):"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        form {{\n</span><span style=\"color:#c0c5ce;\">            onsubmit: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|event| {{\n</span><span style=\"color:#c0c5ce;\">                log::info!(&quot;</span><span style=\"color:#a3be8c;\">Submitted! {{event:?}}</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            input {{ name: &quot;</span><span style=\"color:#a3be8c;\">name</span><span style=\"color:#c0c5ce;\">&quot;, }},\n</span><span style=\"color:#c0c5ce;\">            input {{ name: &quot;</span><span style=\"color:#a3be8c;\">age</span><span style=\"color:#c0c5ce;\">&quot;, }},\n</span><span style=\"color:#c0c5ce;\">            input {{ name: &quot;</span><span style=\"color:#a3be8c;\">date</span><span style=\"color:#c0c5ce;\">&quot;, }},\n</span><span style=\"color:#c0c5ce;\">            input {{ r#</span><span style=\"color:#b48ead;\">type</span><span style=\"color:#c0c5ce;\">: &quot;</span><span style=\"color:#a3be8c;\">submit</span><span style=\"color:#c0c5ce;\">&quot;, }},\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { input_uncontrolled::App {} }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">Submitted! UiEvent {{ data: FormData {{ value: &quot;&quot;, values: {{&quot;</span><span style=\"color:#a3be8c;\">age</span><span style=\"color:#c0c5ce;\">&quot;: &quot;</span><span style=\"color:#a3be8c;\">very old</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">date</span><span style=\"color:#c0c5ce;\">&quot;: &quot;</span><span style=\"color:#a3be8c;\">1966</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">name</span><span style=\"color:#c0c5ce;\">&quot;: &quot;</span><span style=\"color:#a3be8c;\">Fred</span><span style=\"color:#c0c5ce;\">&quot;}} }} }}\n</span></pre>\n" }
        h2 { id: "handling-files",
            a { href: "#handling-files", class: "header", "Handling files" }
        }
        p {
            "You can insert a file picker by using an input element of type  "
            code { "file" }
            ". This element supports the  "
            code { "multiple" }
            " attribute, to let you pick more files at the same time. You can select a folder by adding the  "
            code { "directory" }
            " attribute: Dioxus will map this attribute to browser specific attributes, because there is no standardized way to allow a directory to be selected."
        }
        p {
            code { "type" }
            " is a Rust keyword, so when specifying the type of the input field, you have to write it as  "
            code { "r#type:\"file\"" }
            "."
        }
        p {
            "Extracting the selected files is a bit different from what you may typically use in Javascript."
        }
        p {
            "The  "
            code { "FormData" }
            " event contains a  "
            code { "files" }
            " field with data about the uploaded files. This field contains a  "
            code { "FileEngine" }
            " struct which lets you fetch the filenames selected by the user. This example saves the filenames of the selected files to a  "
            code { "Vec" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> filenames: &amp;UseRef&lt;Vec&lt;String&gt;&gt; = </span><span style=\"color:#96b5b4;\">use_ref</span><span style=\"color:#c0c5ce;\">(cx, Vec::new);\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        input {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// tell the input to pick a file\n</span><span style=\"color:#c0c5ce;\">            r#</span><span style=\"color:#b48ead;\">type</span><span style=\"color:#c0c5ce;\">:&quot;</span><span style=\"color:#a3be8c;\">file</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// list the accepted extensions\n</span><span style=\"color:#c0c5ce;\">            accept: &quot;</span><span style=\"color:#a3be8c;\">.txt,.rs</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// pick multiple files\n</span><span style=\"color:#c0c5ce;\">            multiple: </span><span style=\"color:#d08770;\">true</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">            onchange: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|evt| {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Some(file_engine) = &amp;evt.files {{\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> files = file_engine.</span><span style=\"color:#96b5b4;\">files</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> file_name in files {{\n</span><span style=\"color:#c0c5ce;\">                        filenames.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#c0c5ce;\">(file_name);\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "If you're planning to read the file content, you need to do it asynchronously, to keep the rest of the UI interactive. This example event handler loads the content of the selected files in an async closure:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">onchange: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|evt| {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// A helper macro to use hooks in async environments\n</span><span style=\"color:#c0c5ce;\">    to_owned![files_uploaded];\n</span><span style=\"color:#c0c5ce;\">    async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Some(file_engine) = &amp;evt.files {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> files = file_engine.</span><span style=\"color:#96b5b4;\">files</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> file_name in &amp;files {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// Make sure to use async/await when doing heavy I/O operations,\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// to not freeze the interface in the meantime\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Some(file) = file_engine.</span><span style=\"color:#96b5b4;\">read_file_to_string</span><span style=\"color:#c0c5ce;\">(file_name).await{{\n</span><span style=\"color:#c0c5ce;\">                    files_uploaded.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#c0c5ce;\">(file);\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Lastly, this example shows you how to select a folder, by setting the  "
            code { "directory" }
            " attribute to  "
            code { "true" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">input {{\n</span><span style=\"color:#c0c5ce;\">    r#</span><span style=\"color:#b48ead;\">type</span><span style=\"color:#c0c5ce;\">:&quot;</span><span style=\"color:#a3be8c;\">file</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Select a folder by setting the directory attribute\n</span><span style=\"color:#c0c5ce;\">    directory: </span><span style=\"color:#d08770;\">true</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    onchange: |</span><span style=\"color:#bf616a;\">evt</span><span style=\"color:#c0c5ce;\">| {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Some(file_engine) = &amp;evt.files {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> files = file_engine.</span><span style=\"color:#96b5b4;\">files</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> file_name in files {{\n</span><span style=\"color:#c0c5ce;\">                println!(&quot;</span><span style=\"color:#d08770;\">{{}}</span><span style=\"color:#c0c5ce;\">&quot;, file_name);\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// Do something with the folder path\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceContext() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "sharing-state",
            a { href: "#sharing-state", class: "header", "Sharing State" }
        }
        p {
            "Often, multiple components need to access the same state. Depending on your needs, there are several ways to implement this."
        }
        h2 { id: "lifting-state",
            a { href: "#lifting-state", class: "header", "Lifting State" }
        }
        p {
            "One approach to share state between components is to \"lift\" it up to the nearest common ancestor. This means putting the  "
            code { "use_state" }
            " hook in a parent component, and passing the needed values down as props."
        }
        p {
            "Suppose we want to build a meme editor. We want to have an input to edit the meme caption, but also a preview of the meme with the caption. Logically, the meme and the input are 2 separate components, but they need access to the same state (the current caption)."
        }
        blockquote {
            p {
                "Of course, in this simple example, we could write everything in one component – but it is better to split everything out in smaller components to make the code more reusable, maintainable, and performant (this is even more important for larger, complex apps)."
            }
        }
        p {
            "We start with a  "
            code { "Meme" }
            " component, responsible for rendering a meme with a given caption:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Meme</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;, </span><span style=\"color:#bf616a;\">caption</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">&#39;a str</span><span style=\"color:#c0c5ce;\">) -&gt; Element&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> container_style = </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;\n</span><span style=\"color:#a3be8c;\">        position: relative;\n</span><span style=\"color:#a3be8c;\">        width: fit-content;\n</span><span style=\"color:#a3be8c;\">    </span><span style=\"color:#c0c5ce;\">&quot;#;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> caption_container_style = </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;\n</span><span style=\"color:#a3be8c;\">        position: absolute;\n</span><span style=\"color:#a3be8c;\">        bottom: 0;\n</span><span style=\"color:#a3be8c;\">        left: 0;\n</span><span style=\"color:#a3be8c;\">        right: 0;\n</span><span style=\"color:#a3be8c;\">        padding: 16px 8px;\n</span><span style=\"color:#a3be8c;\">    </span><span style=\"color:#c0c5ce;\">&quot;#;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> caption_style = </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#a3be8c;\">&quot;\n</span><span style=\"color:#a3be8c;\">        font-size: 32px;\n</span><span style=\"color:#a3be8c;\">        margin: 0;\n</span><span style=\"color:#a3be8c;\">        color: white;\n</span><span style=\"color:#a3be8c;\">        text-align: center;\n</span><span style=\"color:#a3be8c;\">    </span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            style: &quot;</span><span style=\"color:#a3be8c;\">{{container_style}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            img {{\n</span><span style=\"color:#c0c5ce;\">                src: &quot;</span><span style=\"color:#a3be8c;\">https://i.imgflip.com/2zh47r.jpg</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                height: &quot;</span><span style=\"color:#a3be8c;\">500px</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                style: &quot;</span><span style=\"color:#a3be8c;\">{{caption_container_style}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                p {{\n</span><span style=\"color:#c0c5ce;\">                    style: &quot;</span><span style=\"color:#a3be8c;\">{{caption_style}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">{{caption}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    ))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        blockquote {
            p {
                "Note that the  "
                code { "Meme" }
                " component is unaware where the caption is coming from – it could be stored in  "
                code { "use_state" }
                ",  "
                code { "use_ref" }
                ", or a constant. This ensures that it is very reusable – the same component can be used for a meme gallery without any changes!"
            }
        }
        p {
            "We also create a caption editor, completely decoupled from the meme. The caption editor must not store the caption itself – otherwise, how will we provide it to the  "
            code { "Meme" }
            " component? Instead, it should accept the current caption as a prop, as well as an event handler to delegate input events to:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">CaptionEditor</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">caption</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">&#39;a str</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">on_input</span><span style=\"color:#c0c5ce;\">: EventHandler&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, FormEvent&gt;,\n</span><span style=\"color:#c0c5ce;\">) -&gt; Element&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> input_style = </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#a3be8c;\">&quot;\n</span><span style=\"color:#a3be8c;\">        border: none;\n</span><span style=\"color:#a3be8c;\">        background: cornflowerblue;\n</span><span style=\"color:#a3be8c;\">        padding: 8px 16px;\n</span><span style=\"color:#a3be8c;\">        margin: 0;\n</span><span style=\"color:#a3be8c;\">        border-radius: 4px;\n</span><span style=\"color:#a3be8c;\">        color: white;\n</span><span style=\"color:#a3be8c;\">    </span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(input {{\n</span><span style=\"color:#c0c5ce;\">        style: &quot;</span><span style=\"color:#a3be8c;\">{{input_style}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        value: &quot;</span><span style=\"color:#a3be8c;\">{{caption}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        oninput: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|event| on_input.</span><span style=\"color:#96b5b4;\">call</span><span style=\"color:#c0c5ce;\">(event),\n</span><span style=\"color:#c0c5ce;\">    }}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Finally, a third component will render the other two as children. It will be responsible for keeping the state and passing down the relevant props."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">MemeEditor</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> container_style = </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#a3be8c;\">&quot;\n</span><span style=\"color:#a3be8c;\">        display: flex;\n</span><span style=\"color:#a3be8c;\">        flex-direction: column;\n</span><span style=\"color:#a3be8c;\">        gap: 16px;\n</span><span style=\"color:#a3be8c;\">        margin: 0 auto;\n</span><span style=\"color:#a3be8c;\">        width: fit-content;\n</span><span style=\"color:#a3be8c;\">    </span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> caption = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || &quot;</span><span style=\"color:#a3be8c;\">me waiting for my rust code to compile</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            style: &quot;</span><span style=\"color:#a3be8c;\">{{container_style}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Meme Editor</span><span style=\"color:#c0c5ce;\">&quot; }},\n</span><span style=\"color:#c0c5ce;\">            Meme {{\n</span><span style=\"color:#c0c5ce;\">                caption: caption,\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            CaptionEditor {{\n</span><span style=\"color:#c0c5ce;\">                caption: caption,\n</span><span style=\"color:#c0c5ce;\">                on_input: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|event: FormEvent| {{caption.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(event.value.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">());}},\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            img {
                src: "./images/meme_editor_screenshot.png",
                alt: "Meme Editor Screenshot: An old plastic skeleton sitting on a park bench. Caption: \"me waiting for a language feature\"",
                title: "",
            }
        }
        h2 { id: "using-shared-state",
            a { href: "#using-shared-state", class: "header", "Using Shared State" }
        }
        p {
            "Sometimes, some state needs to be shared between multiple components far down the tree, and passing it down through props is very inconvenient."
        }
        p {
            "Suppose now that we want to implement a dark mode toggle for our app. To achieve this, we will make every component select styling depending on whether dark mode is enabled or not."
        }
        blockquote {
            p {
                "Note: we're choosing this approach for the sake of an example. There are better ways to implement dark mode (e.g. using CSS variables). Let's pretend CSS variables don't exist – welcome to 2013!"
            }
        }
        p {
            "Now, we could write another  "
            code { "use_state" }
            " in the top component, and pass  "
            code { "is_dark_mode" }
            " down to every component through props. But think about what will happen as the app grows in complexity – almost every component that renders any CSS is going to need to know if dark mode is enabled or not – so they'll all need the same dark mode prop. And every parent component will need to pass it down to them. Imagine how messy and verbose that would get, especially if we had components several levels deep!"
        }
        p {
            "Dioxus offers a better solution than this \"prop drilling\" – providing context. The "
            a { href: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/fn.use_shared_state_provider.html",
                ""
                code { "use_shared_state_provider" }
            }
            " hook is similar to "
            code { "use_ref" }
            ", but it makes it available through "
            a { href: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/fn.use_shared_state.html",
                ""
                code { "use_shared_state" }
            }
            " for all children components."
        }
        p { "First, we have to create a struct for our dark mode configuration:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">DarkMode(</span><span style=\"color:#b48ead;\">bool</span><span style=\"color:#c0c5ce;\">);\n</span></pre>\n" }
        p {
            "Now, in a top-level component (like  "
            code { "App" }
            "), we can provide the  "
            code { "DarkMode" }
            " context to all children components:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#96b5b4;\">use_shared_state_provider</span><span style=\"color:#c0c5ce;\">(cx, || DarkMode(</span><span style=\"color:#d08770;\">false</span><span style=\"color:#c0c5ce;\">));\n</span></pre>\n" }
        p {
            "As a result, any child component of  "
            code { "App" }
            " (direct or not), can access the  "
            code { "DarkMode" }
            " context."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> dark_mode_context = use_shared_state::&lt;DarkMode&gt;(cx);\n</span></pre>\n" }
        blockquote {
            p {
                code { "use_shared_state" }
                " returns  "
                code { "Option<UseSharedState<DarkMode>>" }
                " here. If the context has been provided, the value is  "
                code { "Some(UseSharedState<DarkMode>)" }
                ", which you can call  "
                code { ".read" }
                " or  "
                code { ".write" }
                " on, similarly to  "
                code { "UseRef" }
                ". Otherwise, the value is  "
                code { "None" }
                "."
            }
        }
        p {
            "For example, here's how we would implement the dark mode toggle, which both reads the context (to determine what color it should render) and writes to it (to toggle dark mode):"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">DarkModeToggle</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> dark_mode = use_shared_state::&lt;DarkMode&gt;(cx).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> style = </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> dark_mode.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#d08770;\">0 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">color:white</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        &quot;&quot;\n</span><span style=\"color:#c0c5ce;\">    }};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(label {{\n</span><span style=\"color:#c0c5ce;\">        style: &quot;</span><span style=\"color:#a3be8c;\">{{style}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">Dark Mode</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        input {{\n</span><span style=\"color:#c0c5ce;\">            r#</span><span style=\"color:#b48ead;\">type</span><span style=\"color:#c0c5ce;\">: &quot;</span><span style=\"color:#a3be8c;\">checkbox</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            oninput: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|event| {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> is_enabled = event.value == &quot;</span><span style=\"color:#a3be8c;\">true</span><span style=\"color:#c0c5ce;\">&quot;;\n</span><span style=\"color:#c0c5ce;\">                dark_mode.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#d08770;\">0 </span><span style=\"color:#c0c5ce;\">= is_enabled;\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">    }}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceDynamicRendering() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "dynamic-rendering",
            a { href: "#dynamic-rendering", class: "header", "Dynamic Rendering" }
        }
        p {
            "Sometimes you want to render different things depending on the state/props. With Dioxus, just describe what you want to see using Rust control flow – the framework will take care of making the necessary changes on the fly if the state or props change!"
        }
        h2 { id: "conditional-rendering",
            a { href: "#conditional-rendering", class: "header", "Conditional Rendering" }
        }
        p {
            "To render different elements based on a condition, you could use an  "
            code { "if-else" }
            " statement:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*is_logged_in {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">Welcome!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        button {{\n</span><span style=\"color:#c0c5ce;\">            onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| on_log_out.</span><span style=\"color:#96b5b4;\">call</span><span style=\"color:#c0c5ce;\">(()),\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Log Out</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        button {{\n</span><span style=\"color:#c0c5ce;\">            onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| on_log_in.</span><span style=\"color:#96b5b4;\">call</span><span style=\"color:#c0c5ce;\">(()),\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Log In</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { conditional_rendering::App {} }
        blockquote {
            p {
                "You could also use  "
                code { "match" }
                " statements, or any Rust function to conditionally render different things."
            }
        }
        h3 { id: "improving-the",
            a { href: "#improving-the", class: "header", "Improving the " }
            code { "if-else" }
            " Example"
        }
        p {
            "You may have noticed some repeated code in the  "
            code { "if-else" }
            " example above. Repeating code like this is both bad for maintainability and performance. Dioxus will skip diffing static elements like the button, but when switching between multiple  "
            code { "rsx" }
            " calls it cannot perform this optimization. For this example either approach is fine, but for components with large parts that are reused between conditionals, it can be more of an issue."
        }
        p {
            "We can improve this example by splitting up the dynamic parts and inserting them where they are needed."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// We only render the welcome message if we are logged in\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// You can use if statements in the middle of a render block to conditionally render elements\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*is_logged_in {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Notice the body of this if statement is rsx code, not an expression\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">Welcome!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">    button {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// depending on the value of `is_logged_in`, we will call a different event handler\n</span><span style=\"color:#c0c5ce;\">        onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*is_logged_in {{\n</span><span style=\"color:#c0c5ce;\">            on_log_in.</span><span style=\"color:#96b5b4;\">call</span><span style=\"color:#c0c5ce;\">(())\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">else</span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            on_log_out.</span><span style=\"color:#96b5b4;\">call</span><span style=\"color:#c0c5ce;\">(())\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*is_logged_in {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// if we are logged in, the button should say &quot;Log Out&quot;\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Log Out</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// if we are not logged in, the button should say &quot;Log In&quot;\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Log In</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n",
        }
        DemoFrame { conditional_rendering::LogInImprovedApp {} }
        h3 { id: "inspecting",
            a { href: "#inspecting", class: "header", "Inspecting " }
            code { "Element" }
            " props"
        }
        p {
            "Since  "
            code { "Element" }
            " is a  "
            code { "Option<VNode>" }
            ", components accepting  "
            code { "Element" }
            " as a prop can inspect its contents, and render different things based on that. Example:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Clickable</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, ClickableProps&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> cx.props.children {{\n</span><span style=\"color:#c0c5ce;\">        Some(VNode {{ dynamic_nodes, .. }}) =&gt; {{\n</span><span style=\"color:#c0c5ce;\">            todo!(&quot;</span><span style=\"color:#a3be8c;\">render some stuff</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        _ =&gt; {{\n</span><span style=\"color:#c0c5ce;\">            todo!(&quot;</span><span style=\"color:#a3be8c;\">render some other stuff</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "You can't mutate the  "
            code { "Element" }
            ", but if you need a modified version of it, you can construct a new one based on its attributes/children/etc."
        }
        h2 { id: "rendering-nothing",
            a { href: "#rendering-nothing", class: "header", "Rendering Nothing" }
        }
        p {
            "To render nothing, you can return  "
            code { "None" }
            " from a component. This is useful if you want to conditionally hide something:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">if </span><span style=\"color:#c0c5ce;\">*is_logged_in {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">return </span><span style=\"color:#c0c5ce;\">None;\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    a {{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">You must be logged in to comment</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n" }
        DemoFrame { conditional_rendering::LogInWarningApp {} }
        p {
            "This works because the  "
            code { "Element" }
            " type is just an alias for  "
            code { "Option<VNode>" }
        }
        blockquote {
            p {
                "Again, you may use a different method to conditionally return  "
                code { "None" }
                ". For example the boolean's "
                a { href: "https://doc.rust-lang.org/std/primitive.bool.html#method.then",
                    ""
                    code { "then()" }
                }
                " function could be used."
            }
        }
        h2 { id: "rendering-lists",
            a { href: "#rendering-lists", class: "header", "Rendering Lists" }
        }
        p {
            "Often, you'll want to render a collection of components. For example, you might want to render a list of all comments on a post."
        }
        p {
            "For this, Dioxus accepts iterators that produce  "
            code { "Element" }
            "s. So we need to:"
        }
        ul {
            li {
                "Get an iterator over all of our items (e.g., if you have a "
                code { "Vec" }
                " of comments, iterate over it with "
                code { "iter()" }
                ")"
            }
            li {
                code { ".map" }
                " the iterator to convert each item into a "
                code { "LazyNode" }
                " using "
                code { "rsx!(...)" }
                ul {
                    li {
                        "Add a unique "
                        code { "key" }
                        " attribute to each iterator item"
                    }
                }
            }
            li { "Include this iterator in the final RSX (or use it inline)" }
        }
        p {
            "Example: suppose you have a list of comments you want to render. Then, you can render them like this:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comment_field = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, String::new);\n</span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> next_id = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = </span><span style=\"color:#96b5b4;\">use_ref</span><span style=\"color:#c0c5ce;\">(cx, Vec::&lt;Comment&gt;::new);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments_lock = comments.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments_rendered = comments_lock.</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">comment</span><span style=\"color:#c0c5ce;\">| {{\n</span><span style=\"color:#c0c5ce;\">    rsx!(CommentComponent {{\n</span><span style=\"color:#c0c5ce;\">        key: &quot;</span><span style=\"color:#a3be8c;\">{{comment.id}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        comment: comment.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">    form {{\n</span><span style=\"color:#c0c5ce;\">        onsubmit: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| {{\n</span><span style=\"color:#c0c5ce;\">            comments.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#c0c5ce;\">(Comment {{\n</span><span style=\"color:#c0c5ce;\">                content: comment_field.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                id: *next_id.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">            }});\n</span><span style=\"color:#c0c5ce;\">            next_id += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">            comment_field.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(String::new());\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        input {{\n</span><span style=\"color:#c0c5ce;\">            value: &quot;</span><span style=\"color:#a3be8c;\">{{comment_field}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            oninput: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|event| comment_field.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(event.value.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">()),\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        input {{\n</span><span style=\"color:#c0c5ce;\">            r#</span><span style=\"color:#b48ead;\">type</span><span style=\"color:#c0c5ce;\">: &quot;</span><span style=\"color:#a3be8c;\">submit</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">    comments_rendered,\n</span><span style=\"color:#c0c5ce;\">))\n</span></pre>\n",
        }
        DemoFrame { rendering_lists::App {} }
        h3 { id: "inline-for-loops",
            a { href: "#inline-for-loops", class: "header", "Inline for loops" }
        }
        p {
            "Because of how common it is to render a list of items, Dioxus provides a shorthand for this. Instead of using  "
            code { ".iter" }
            ",  "
            code { ".map" }
            ", and  "
            code { "rsx" }
            ", you can use a  "
            code { "for" }
            " loop with a body of rsx code:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comment_field = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, String::new);\n</span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> next_id = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> comments = </span><span style=\"color:#96b5b4;\">use_ref</span><span style=\"color:#c0c5ce;\">(cx, Vec::&lt;Comment&gt;::new);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">    form {{\n</span><span style=\"color:#c0c5ce;\">        onsubmit: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| {{\n</span><span style=\"color:#c0c5ce;\">            comments.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#c0c5ce;\">(Comment {{\n</span><span style=\"color:#c0c5ce;\">                content: comment_field.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                id: *next_id.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">            }});\n</span><span style=\"color:#c0c5ce;\">            next_id += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">            comment_field.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(String::new());\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        input {{\n</span><span style=\"color:#c0c5ce;\">            value: &quot;</span><span style=\"color:#a3be8c;\">{{comment_field}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            oninput: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|event| comment_field.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(event.value.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">()),\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        input {{\n</span><span style=\"color:#c0c5ce;\">            r#</span><span style=\"color:#b48ead;\">type</span><span style=\"color:#c0c5ce;\">: &quot;</span><span style=\"color:#a3be8c;\">submit</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> comment in &amp;*comments.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Notice the body of this for loop is rsx code, not an expression\n</span><span style=\"color:#c0c5ce;\">        CommentComponent {{\n</span><span style=\"color:#c0c5ce;\">            key: &quot;</span><span style=\"color:#a3be8c;\">{{comment.id}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            comment: comment.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">))\n</span></pre>\n",
        }
        DemoFrame { rendering_lists::AppForLoop {} }
        h3 { id: "the",
            a { href: "#the", class: "header", "The " }
            code { "key" }
            " Attribute"
        }
        p {
            "Every time you re-render your list, Dioxus needs to keep track of which items go where to determine what updates need to be made to the UI."
        }
        p {
            "For example, suppose the  "
            code { "CommentComponent" }
            " had some state – e.g. a field where the user typed in a reply. If the order of comments suddenly changes, Dioxus needs to correctly associate that state with the same comment – otherwise, the user will end up replying to a different comment!"
        }
        p {
            "To help Dioxus keep track of list items, we need to associate each item with a unique key. In the example above, we dynamically generated the unique key. In real applications, it's more likely that the key will come from e.g. a database ID. It doesn't matter where you get the key from, as long as it meets the requirements:"
        }
        ul {
            li { "Keys must be unique in a list" }
            li { "The same item should always get associated with the same key" }
            li {
                "Keys should be relatively small (i.e. converting the entire Comment structure to a String would be a pretty bad key) so they can be compared efficiently"
            }
        }
        p {
            "You might be tempted to use an item's index in the list as its key. That’s what Dioxus will use if you don’t specify a key at all. This is only acceptable if you can guarantee that the list is constant – i.e., no re-ordering, additions, or deletions."
        }
        blockquote {
            p {
                "Note that if you pass the key to a component you've made, it won't receive the key as a prop. It’s only used as a hint by Dioxus itself. If your component needs an ID, you have to pass it as a separate prop."
            }
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceRouter() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "router",
            a { href: "#router", class: "header", "Router" }
        }
        p {
            "In many of your apps, you'll want to have different \"scenes\". For a webpage, these scenes might be the different webpages with their own content. For a desktop app, these scenes might be different views in your app."
        }
        p {
            "To unify these platforms, Dioxus provides a first-party solution for scene management called Dioxus Router."
        }
        h2 { id: "what-is-it",
            a { href: "#what-is-it", class: "header", "What is it?" }
        }
        p {
            "For an app like the Dioxus landing page (https://dioxuslabs.com), we want to have several different scenes:"
        }
        ul {
            li { "Homepage" }
            li { "Blog" }
        }
        p {
            "Each of these scenes is independent – we don't want to render both the homepage and blog at the same time."
        }
        p {
            "The Dioxus router makes it easy to create these scenes. To make sure we're using the router, add the  "
            code { "dioxus-router" }
            " package to your  "
            code { "Cargo.toml" }
            "."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add dioxus-router\n</span></pre>\n" }
        h2 { id: "using-the-router",
            a { href: "#using-the-router", class: "header", "Using the router" }
        }
        p {
            "Unlike other routers in the Rust ecosystem, our router is built declaratively at compile time. This makes it possible to compose our app layout simply by defining an enum."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// All of our routes will be a variant of this Route enum\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// if the current location is &quot;/home&quot;, render the Home component\n</span><span style=\"color:#c0c5ce;\">\t#[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/home</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">\tHome {{}},\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// if the current location is &quot;/blog&quot;, render the Blog component\n</span><span style=\"color:#c0c5ce;\">\t#[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">\tBlog {{}},\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Whenever we visit this app, we will get either the Home component or the Blog component rendered depending on which route we enter at. If neither of these routes match the current location, then nothing will render."
        }
        p { "We can fix this one of two ways:" }
        ul {
            li { "A fallback 404 page" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">\t#[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/home</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">\tHome {{}},\n</span><span style=\"color:#c0c5ce;\">\t#[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">\tBlog {{}},\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">//  if the current location doesn&#39;t match any of the above routes, render the NotFound component\n</span><span style=\"color:#c0c5ce;\">\t#[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:..segments</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">\tNotFound {{ segments: Vec&lt;String&gt; }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        ul {
            li { "Redirect 404 to home" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">\t#[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/home</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">//  if the current location doesn&#39;t match any of the above routes, redirect to &quot;/home&quot;\n</span><span style=\"color:#c0c5ce;\">\t#[</span><span style=\"color:#bf616a;\">redirect</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:..segments</span><span style=\"color:#c0c5ce;\">&quot;, |segments: Vec&lt;String&gt;| Route::Home {{}})]\n</span><span style=\"color:#c0c5ce;\">\tHome {{}},\n</span><span style=\"color:#c0c5ce;\">\t#[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">\tBlog {{}},\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">//  if the current location doesn&#39;t match any of the above routes, render the NotFound component\n</span><span style=\"color:#c0c5ce;\">\t#[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:..segments</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">\tNotFound {{ segments: Vec&lt;String&gt; }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "links",
            a { href: "#links", class: "header", "Links" }
        }
        p {
            "For our app to navigate these routes, we can provide clickable elements called Links. These simply wrap  "
            code { "<a>" }
            " elements that, when clicked, navigate the app to the given location. Because our route is an enum of valid routes, if you try to link to a page that doesn't exist, you will get a compiler error."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">rsx! {{\n</span><span style=\"color:#c0c5ce;\">\tLink {{\n</span><span style=\"color:#c0c5ce;\">\t\tto: Route::Home {{}},\n</span><span style=\"color:#c0c5ce;\">\t\t&quot;</span><span style=\"color:#a3be8c;\">Go home!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\t}}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        h2 { id: "more-reading",
            a { href: "#more-reading", class: "header", "More reading" }
        }
        p {
            "This page is just a very brief overview of the router. For more information, check out the "
            a { href: "../router", "" }
            " or some of the "
            a { href: "https://github.com/DioxusLabs/dioxus/blob/master/examples/router.rs",
                ""
            }
            "."
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceUseFuture() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "usefuture",
            a { href: "#usefuture", class: "header", "UseFuture" }
        }
        p {
            a { href: "https://docs.rs/dioxus-hooks/latest/dioxus_hooks/fn.use_future.html",
                ""
                code { "use_future" }
            }
            " lets you run an async closure, and provides you with its result."
        }
        p {
            "For example, we can make an API request (using "
            a { href: "https://docs.rs/reqwest/latest/reqwest/index.html", "" }
            ") inside "
            code { "use_future" }
            ":"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> future = </span><span style=\"color:#96b5b4;\">use_future</span><span style=\"color:#c0c5ce;\">(cx, (), |_| async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">    reqwest::get(&quot;</span><span style=\"color:#a3be8c;\">https://dog.ceo/api/breeds/image/random</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .await\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .json::&lt;ApiResponse&gt;()\n</span><span style=\"color:#c0c5ce;\">        .await\n</span><span style=\"color:#c0c5ce;\">}});\n</span></pre>\n" }
        p {
            "The code inside  "
            code { "use_future" }
            " will be submitted to the Dioxus scheduler once the component has rendered."
        }
        p {
            "We can use  "
            code { ".value()" }
            " to get the result of the future. On the first run, since there's no data ready when the component loads, its value will be  "
            code { "None" }
            ". However, once the future is finished, the component will be re-rendered and the value will now be  "
            code { "Some(...)" }
            ", containing the return value of the closure."
        }
        p { "We can then render that result:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> future.</span><span style=\"color:#96b5b4;\">value</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    Some(Ok(response)) =&gt; rsx! {{\n</span><span style=\"color:#c0c5ce;\">        button {{\n</span><span style=\"color:#c0c5ce;\">            onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| future.</span><span style=\"color:#96b5b4;\">restart</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Click to fetch another doggo</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            img {{\n</span><span style=\"color:#c0c5ce;\">                max_width: &quot;</span><span style=\"color:#a3be8c;\">500px</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                max_height: &quot;</span><span style=\"color:#a3be8c;\">500px</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                src: &quot;</span><span style=\"color:#a3be8c;\">{{response.image_url}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">    Some(Err(_)) =&gt; rsx! {{ div {{ &quot;</span><span style=\"color:#a3be8c;\">Loading dogs failed</span><span style=\"color:#c0c5ce;\">&quot; }} }},\n</span><span style=\"color:#c0c5ce;\">    None =&gt; rsx! {{ div {{ &quot;</span><span style=\"color:#a3be8c;\">Loading dogs...</span><span style=\"color:#c0c5ce;\">&quot; }} }},\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n",
        }
        DemoFrame { __interactive_04::use_future_ {} }
        h2 { id: "restarting-the-future",
            a { href: "#restarting-the-future", class: "header", "Restarting the Future" }
        }
        p {
            "The  "
            code { "UseFuture" }
            " handle provides a  "
            code { "restart" }
            " method. It can be used to execute the future again, producing a new value."
        }
        h2 { id: "dependencies",
            a { href: "#dependencies", class: "header", "Dependencies" }
        }
        p {
            "Often, you will need to run the future again every time some value (e.g. a prop) changes. Rather than calling  "
            code { "restart" }
            " manually, you can provide a tuple of \"dependencies\" to the hook. It will automatically re-run the future when any of those dependencies change. Example:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> future = </span><span style=\"color:#96b5b4;\">use_future</span><span style=\"color:#c0c5ce;\">(cx, (breed,), |(</span><span style=\"color:#bf616a;\">breed</span><span style=\"color:#c0c5ce;\">,)| async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">    reqwest::get(format!(&quot;</span><span style=\"color:#a3be8c;\">https://dog.ceo/api/breed/</span><span style=\"color:#d08770;\">{{breed}}</span><span style=\"color:#a3be8c;\">/images/random</span><span style=\"color:#c0c5ce;\">&quot;))\n</span><span style=\"color:#c0c5ce;\">        .await\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .json::&lt;ApiResponse&gt;()\n</span><span style=\"color:#c0c5ce;\">        .await\n</span><span style=\"color:#c0c5ce;\">}});\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceUseCoroutine() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "coroutines",
            a { href: "#coroutines", class: "header", "Coroutines" }
        }
        p {
            "Another tool in your async toolbox are coroutines. Coroutines are futures that can have values sent to them."
        }
        p {
            "Like regular futures, code in a coroutine will run until the next  "
            code { "await" }
            " point before yielding. This low-level control over asynchronous tasks is quite powerful, allowing for infinitely looping tasks like WebSocket polling, background timers, and other periodic actions."
        }
        h2 { id: "",
            a { href: "#", class: "header", "" }
            code { "use_coroutine" }
        }
        p {
            "The  "
            code { "use_coroutine" }
            " hook allows you to create a coroutine. Most coroutines we write will be polling loops using await."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">futures_util::StreamExt;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> ws: &amp;Coroutine&lt;()&gt; = </span><span style=\"color:#96b5b4;\">use_coroutine</span><span style=\"color:#c0c5ce;\">(cx, |</span><span style=\"color:#bf616a;\">rx</span><span style=\"color:#c0c5ce;\">| async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Connect to some sort of service\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> conn = </span><span style=\"color:#96b5b4;\">connect_to_ws_server</span><span style=\"color:#c0c5ce;\">().await;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Wait for data on the service\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">while let </span><span style=\"color:#c0c5ce;\">Some(msg) = conn.</span><span style=\"color:#96b5b4;\">next</span><span style=\"color:#c0c5ce;\">().await {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// handle messages\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }});\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "For many services, a simple async loop will handle the majority of use cases." }
        h2 { id: "yielding-values",
            a { href: "#yielding-values", class: "header", "Yielding Values" }
        }
        p {
            "To yield values from a coroutine, simply bring in a  "
            code { "UseState" }
            " handle and set the value whenever your coroutine completes its work."
        }
        p {
            "The future must be  "
            code { "'static" }
            " – so any values captured by the task cannot carry any references to  "
            code { "cx" }
            ", such as a  "
            code { "UseState" }
            "."
        }
        p {
            "You can use "
            a { href: "https://doc.rust-lang.org/std/borrow/trait.ToOwned.html#tymethod.to_owned",
                ""
            }
            " to create a clone of the hook handle which can be moved into the async closure."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> sync_status = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || Status::Launching);\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> sync_task = </span><span style=\"color:#96b5b4;\">use_coroutine</span><span style=\"color:#c0c5ce;\">(cx, |</span><span style=\"color:#bf616a;\">rx</span><span style=\"color:#c0c5ce;\">: UnboundedReceiver&lt;SyncAction&gt;| {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> sync_status = sync_status.</span><span style=\"color:#96b5b4;\">to_owned</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">loop </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            tokio::time::sleep(Duration::from_secs(</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">)).await;\n</span><span style=\"color:#c0c5ce;\">            sync_status.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(Status::Working);\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}});\n</span></pre>\n",
        }
        p {
            "To make this a bit less verbose, Dioxus exports the  "
            code { "to_owned!" }
            " macro which will create a binding as shown above, which can be quite helpful when dealing with many values."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> sync_status = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || Status::Launching);\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> load_status = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || Status::Launching);\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> sync_task = </span><span style=\"color:#96b5b4;\">use_coroutine</span><span style=\"color:#c0c5ce;\">(cx, |</span><span style=\"color:#bf616a;\">rx</span><span style=\"color:#c0c5ce;\">: UnboundedReceiver&lt;SyncAction&gt;| {{\n</span><span style=\"color:#c0c5ce;\">    to_owned![sync_status, load_status];\n</span><span style=\"color:#c0c5ce;\">    async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// ...\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}});\n</span></pre>\n",
        }
        h2 { id: "sending-values",
            a { href: "#sending-values", class: "header", "Sending Values" }
        }
        p {
            "You might've noticed the  "
            code { "use_coroutine" }
            " closure takes an argument called  "
            code { "rx" }
            ". What is that? Well, a common pattern in complex apps is to handle a bunch of async code at once. With libraries like Redux Toolkit, managing multiple promises at once can be challenging and a common source of bugs."
        }
        p {
            "With Coroutines, we can centralize our async logic. The  "
            code { "rx" }
            " parameter is an Channel that allows code external to the coroutine to send data "
            em { "into" }
            " the coroutine. Instead of looping on an external service, we can loop on the channel itself, processing messages from within our app without needing to spawn a new future. To send data into the coroutine, we would call \"send\" on the handle."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">futures_util::StreamExt;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">ProfileUpdate {{\n</span><span style=\"color:#c0c5ce;\">    SetUsername(String),\n</span><span style=\"color:#c0c5ce;\">    SetAge(</span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> profile = </span><span style=\"color:#96b5b4;\">use_coroutine</span><span style=\"color:#c0c5ce;\">(cx, |</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">rx</span><span style=\"color:#c0c5ce;\">: UnboundedReceiver&lt;ProfileUpdate&gt;| async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> server = </span><span style=\"color:#96b5b4;\">connect_to_server</span><span style=\"color:#c0c5ce;\">().await;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">while let </span><span style=\"color:#c0c5ce;\">Some(msg) = rx.</span><span style=\"color:#96b5b4;\">next</span><span style=\"color:#c0c5ce;\">().await {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> msg {{\n</span><span style=\"color:#c0c5ce;\">            ProfileUpdate::SetUsername(name) =&gt; server.</span><span style=\"color:#96b5b4;\">update_username</span><span style=\"color:#c0c5ce;\">(name).await,\n</span><span style=\"color:#c0c5ce;\">            ProfileUpdate::SetAge(age) =&gt; server.</span><span style=\"color:#96b5b4;\">update_age</span><span style=\"color:#c0c5ce;\">(age).await,\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    button {{\n</span><span style=\"color:#c0c5ce;\">        onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| profile.</span><span style=\"color:#96b5b4;\">send</span><span style=\"color:#c0c5ce;\">(ProfileUpdate::SetUsername(&quot;</span><span style=\"color:#a3be8c;\">Bob</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">())),\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">Update username</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n",
        }
        blockquote {
            p {
                "Note: In order to use/run the  "
                code { "rx.next().await" }
                " statement you will need to extend the "
                code { "Stream" }
                "]"
                code { "UnboundedReceiver" }
                "]"
                code { "use futures_util::stream::StreamExt;" }
                "."
            }
        }
        p {
            "For sufficiently complex apps, we could build a bunch of different useful \"services\" that loop on channels to update the app."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> profile = </span><span style=\"color:#96b5b4;\">use_coroutine</span><span style=\"color:#c0c5ce;\">(cx, profile_service);\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> editor = </span><span style=\"color:#96b5b4;\">use_coroutine</span><span style=\"color:#c0c5ce;\">(cx, editor_service);\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> sync = </span><span style=\"color:#96b5b4;\">use_coroutine</span><span style=\"color:#c0c5ce;\">(cx, sync_service);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">profile_service</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">rx</span><span style=\"color:#c0c5ce;\">: UnboundedReceiver&lt;ProfileCommand&gt;) {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// do stuff\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">sync_service</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">rx</span><span style=\"color:#c0c5ce;\">: UnboundedReceiver&lt;SyncCommand&gt;) {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// do stuff\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">editor_service</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">rx</span><span style=\"color:#c0c5ce;\">: UnboundedReceiver&lt;EditorCommand&gt;) {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// do stuff\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "We can combine coroutines with "
            a { href: "https://docs.rs/fermi/latest/fermi/index.html", "" }
            " to emulate Redux Toolkit's Thunk system with much less headache. This lets us store all of our app's state "
            em { "within" }
            " a task and then simply update the \"view\" values stored in Atoms. It cannot be understated how powerful this technique is: we get all the perks of native Rust tasks with the optimizations and ergonomics of global state. This means your "
            em { "actual" }
            " state does not need to be tied up in a system like Fermi or Redux – the only Atoms that need to exist are those that are used to drive the display/UI."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">static </span><span style=\"color:#d08770;\">USERNAME</span><span style=\"color:#c0c5ce;\">: Atom&lt;String&gt; = Atom(|_| &quot;</span><span style=\"color:#a3be8c;\">default</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> atoms = </span><span style=\"color:#96b5b4;\">use_atom_root</span><span style=\"color:#c0c5ce;\">(cx);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#96b5b4;\">use_coroutine</span><span style=\"color:#c0c5ce;\">(cx, |</span><span style=\"color:#bf616a;\">rx</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#96b5b4;\">sync_service</span><span style=\"color:#c0c5ce;\">(rx, atoms.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">()));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        Banner {{}}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Banner</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> username = </span><span style=\"color:#96b5b4;\">use_read</span><span style=\"color:#c0c5ce;\">(cx, &amp;</span><span style=\"color:#d08770;\">USERNAME</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Welcome back, {{username}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Now, in our sync service, we can structure our state however we want. We only need to update the view values when ready."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">\n</span></pre>\n" }
        h2 { id: "automatic-injection-into-the-context-api",
            a {
                href: "#automatic-injection-into-the-context-api",
                class: "header",
                "Automatic injection into the Context API"
            }
        }
        p {
            "Coroutine handles are automatically injected through the context API. You can use the  "
            code { "use_coroutine_handle" }
            " hook with the message type as a generic to fetch a handle."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Child</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> sync_task = use_coroutine_handle::&lt;SyncAction&gt;(cx).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    sync_task.</span><span style=\"color:#96b5b4;\">send</span><span style=\"color:#c0c5ce;\">(SyncAction::SetUsername);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
    }
}
#[component(no_case_check)]
pub fn ReferenceSpawn() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "spawning-futures",
            a { href: "#spawning-futures", class: "header", "Spawning Futures" }
        }
        p {
            "The  "
            code { "use_future" }
            " and  "
            code { "use_coroutine" }
            " hooks are useful if you want to unconditionally spawn the future. Sometimes, though, you'll want to only spawn a future in response to an event, such as a mouse click. For example, suppose you need to send a request when the user clicks a \"log in\" button. For this, you can use  "
            code { "cx.spawn" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> response = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || String::from(&quot;</span><span style=\"color:#a3be8c;\">...</span><span style=\"color:#c0c5ce;\">&quot;));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> log_in = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">spawn</span><span style=\"color:#c0c5ce;\">({{\n</span><span style=\"color:#c0c5ce;\">        to_owned![response];\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">        async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> resp = reqwest::Client::new()\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">https://dioxuslabs.com</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">send</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">                .await;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> resp {{\n</span><span style=\"color:#c0c5ce;\">                Ok(_data) =&gt; {{\n</span><span style=\"color:#c0c5ce;\">                    log::info!(&quot;</span><span style=\"color:#a3be8c;\">dioxuslabs.com responded!</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">                    response.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">dioxuslabs.com responded!</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">                Err(err) =&gt; {{\n</span><span style=\"color:#c0c5ce;\">                    log::info!(\n</span><span style=\"color:#c0c5ce;\">                        &quot;</span><span style=\"color:#a3be8c;\">Request failed with error: {{err:?}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                    )\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }});\n</span><span style=\"color:#c0c5ce;\">}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">render! {{\n</span><span style=\"color:#c0c5ce;\">    button {{\n</span><span style=\"color:#c0c5ce;\">        onclick: log_in,\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">Response: {{response}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        DemoFrame { spawn::App {} }
        blockquote {
            p {
                "Note:  "
                code { "spawn" }
                " will always spawn a "
                em { "new" }
                " future. You most likely don't want to call it on every render."
            }
        }
        p {
            "Calling  "
            code { "spawn" }
            " will give you a  "
            code { "JoinHandle" }
            " which lets you cancel or pause the future."
        }
        h2 { id: "spawning-tokio-tasks",
            a { href: "#spawning-tokio-tasks", class: "header", "Spawning Tokio Tasks" }
        }
        p {
            "Sometimes, you might want to spawn a background task that needs multiple threads or talk to hardware that might block your app code. In these cases, we can directly spawn a Tokio task from our future. For Dioxus-Desktop, your task will be spawned onto Tokio's Multithreaded runtime:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">spawn</span><span style=\"color:#c0c5ce;\">(async {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#c0c5ce;\">_ = tokio::spawn(async {{}}).await;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#c0c5ce;\">_ = tokio::task::spawn_local(async {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// some !Send work\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">    .await;\n</span><span style=\"color:#c0c5ce;\">}});\n</span></pre>\n" }
    }
}
#[component(no_case_check)]
pub fn ReferenceDesktopIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "desktop",
            a { href: "#desktop", class: "header", "Desktop" }
        }
        p { "This guide will cover concepts specific to the Dioxus desktop renderer." }
        h2 { id: "running-javascript",
            a { href: "#running-javascript", class: "header", "Running Javascript" }
        }
        p {
            "Dioxus provides some ergonomic wrappers over the browser API, but in some cases you may need to access parts of the browser API Dioxus does not expose."
        }
        p {
            "For these cases, Dioxus desktop exposes the use_eval hook that allows you to run raw Javascript in the webview:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    dioxus_desktop::launch(app);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Use eval returns a function that can spawn eval instances\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> create_eval = </span><span style=\"color:#96b5b4;\">use_eval</span><span style=\"color:#c0c5ce;\">(cx);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// You can create as many eval instances as you want\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> eval = </span><span style=\"color:#96b5b4;\">create_eval</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;\n</span><span style=\"color:#a3be8c;\">        // You can send messages from JavaScript to Rust with the dioxus.send function\n</span><span style=\"color:#a3be8c;\">        dioxus.send(&quot;Hi from JS!&quot;);\n</span><span style=\"color:#a3be8c;\">        // You can receive messages from Rust to JavaScript with the dioxus.recv function\n</span><span style=\"color:#a3be8c;\">        let msg = await dioxus.recv();\n</span><span style=\"color:#a3be8c;\">        console.log(msg);\n</span><span style=\"color:#a3be8c;\">        </span><span style=\"color:#c0c5ce;\">&quot;#,\n</span><span style=\"color:#c0c5ce;\">    )\n</span><span style=\"color:#c0c5ce;\">    .</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// You can send messages to JavaScript with the send method\n</span><span style=\"color:#c0c5ce;\">    eval.</span><span style=\"color:#96b5b4;\">send</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">Hi from Rust!</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">()).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> future = </span><span style=\"color:#96b5b4;\">use_future</span><span style=\"color:#c0c5ce;\">(cx, (), |_| {{\n</span><span style=\"color:#c0c5ce;\">        to_owned![eval];\n</span><span style=\"color:#c0c5ce;\">        async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// You can receive any message from JavaScript with the recv method\n</span><span style=\"color:#c0c5ce;\">            eval.</span><span style=\"color:#96b5b4;\">recv</span><span style=\"color:#c0c5ce;\">().await.</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> future.</span><span style=\"color:#96b5b4;\">value</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">        Some(v) =&gt; cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">            p {{ &quot;</span><span style=\"color:#a3be8c;\">{{v}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        )),\n</span><span style=\"color:#c0c5ce;\">        _ =&gt; cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">            p {{ &quot;</span><span style=\"color:#a3be8c;\">hello</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        )),\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        h2 { id: "custom-assets",
            a { href: "#custom-assets", class: "header", "Custom Assets" }
        }
        p { "You can link to local assets in dioxus desktop instead of using a url:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    dioxus_desktop::launch(app);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            img {{ src: &quot;</span><span style=\"color:#a3be8c;\">examples/assets/logo.png</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        h2 { id: "integrating-with-wry",
            a { href: "#integrating-with-wry", class: "header", "Integrating with Wry" }
        }
        p {
            "In cases where you need more low level control over your window, you can use wry APIs exposed through the "
            a { href: "https://docs.rs/dioxus-desktop/0.3.0/dioxus_desktop/struct.Config.html",
                ""
            }
            " and the "
            a { href: "https://docs.rs/dioxus-desktop/0.4.0/dioxus_desktop/fn.use_window.html",
                ""
            }
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceWebIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "web",
            a { href: "#web", class: "header", "Web" }
        }
        p { "This guide will cover concepts specific to the Dioxus web renderer." }
        h2 { id: "running-javascript",
            a { href: "#running-javascript", class: "header", "Running Javascript" }
        }
        p {
            "Dioxus provides some ergonomic wrappers over the browser API, but in some cases you may need to access parts of the browser API Dioxus does not expose."
        }
        p {
            "For these cases, Dioxus desktop exposes the use_eval hook that allows you to run raw Javascript in the webview:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    dioxus_desktop::launch(app);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Use eval returns a function that can spawn eval instances\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> create_eval = </span><span style=\"color:#96b5b4;\">use_eval</span><span style=\"color:#c0c5ce;\">(cx);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// You can create as many eval instances as you want\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> eval = </span><span style=\"color:#96b5b4;\">create_eval</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;\n</span><span style=\"color:#a3be8c;\">        // You can send messages from JavaScript to Rust with the dioxus.send function\n</span><span style=\"color:#a3be8c;\">        dioxus.send(&quot;Hi from JS!&quot;);\n</span><span style=\"color:#a3be8c;\">        // You can receive messages from Rust to JavaScript with the dioxus.recv function\n</span><span style=\"color:#a3be8c;\">        let msg = await dioxus.recv();\n</span><span style=\"color:#a3be8c;\">        console.log(msg);\n</span><span style=\"color:#a3be8c;\">        </span><span style=\"color:#c0c5ce;\">&quot;#,\n</span><span style=\"color:#c0c5ce;\">    )\n</span><span style=\"color:#c0c5ce;\">    .</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// You can send messages to JavaScript with the send method\n</span><span style=\"color:#c0c5ce;\">    eval.</span><span style=\"color:#96b5b4;\">send</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">Hi from Rust!</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">()).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> future = </span><span style=\"color:#96b5b4;\">use_future</span><span style=\"color:#c0c5ce;\">(cx, (), |_| {{\n</span><span style=\"color:#c0c5ce;\">        to_owned![eval];\n</span><span style=\"color:#c0c5ce;\">        async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// You can receive any message from JavaScript with the recv method\n</span><span style=\"color:#c0c5ce;\">            eval.</span><span style=\"color:#96b5b4;\">recv</span><span style=\"color:#c0c5ce;\">().await.</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> future.</span><span style=\"color:#96b5b4;\">value</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">        Some(v) =&gt; cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">            p {{ &quot;</span><span style=\"color:#a3be8c;\">{{v}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        )),\n</span><span style=\"color:#c0c5ce;\">        _ =&gt; cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">            p {{ &quot;</span><span style=\"color:#a3be8c;\">hello</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        )),\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        p {
            "If you are targeting web, but don't plan on targeting any other Dioxus renderer you can also use the generated wrappers in the "
            a { href: "https://rustwasm.github.io/wasm-bindgen/web-sys/index.html",
                ""
            }
            " and "
            a { href: "https://gloo-rs.web.app/", "" }
            " crates."
        }
        h2 { id: "customizing-index-template",
            a { href: "#customizing-index-template", class: "header", "Customizing Index Template" }
        }
        p {
            "Dioxus supports providing custom index.html templates. The index.html must include a  "
            code { "div" }
            " with the id  "
            code { "main" }
            " to be used. Hot Reload is still supported. An example"
            a { href: "https://github.com/DioxusLabs/Dioxus/examples/PWA-example/index.html",
                ""
            }
            "."
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceSsr() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "server-side-rendering",
            a { href: "#server-side-rendering", class: "header", "Server-Side Rendering" }
        }
        p {
            "For lower-level control over the rendering process, you can use the  "
            code { "dioxus-ssr" }
            " crate directly. This can be useful when integrating with a web framework that  "
            code { "dioxus-fullstack" }
            " does not support, or pre-rendering pages."
        }
        h2 { id: "setup",
            a { href: "#setup", class: "header", "Setup" }
        }
        p {
            "For this guide, we're going to show how to use Dioxus SSR with "
            a { href: "https://docs.rs/axum/latest/axum/", "" }
            "."
        }
        p { "Make sure you have Rust and Cargo installed, and then create a new project:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo new --bin demo\n</span><span style=\"color:#c0c5ce;\">cd demo\n</span></pre>\n" }
        p { "Add Dioxus and the ssr renderer as dependencies:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add dioxus\n</span><span style=\"color:#c0c5ce;\">cargo add dioxus-ssr\n</span></pre>\n" }
        p {
            "Next, add all the Axum dependencies. This will be different if you're using a different Web Framework"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add tokio --features full\n</span><span style=\"color:#c0c5ce;\">cargo add axum\n</span></pre>\n" }
        p { "Your dependencies should look roughly like this:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[dependencies]\n</span><span style=\"color:#c0c5ce;\">axum = &quot;</span><span style=\"color:#a3be8c;\">0.4.5</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">dioxus = {{ version = &quot;</span><span style=\"color:#a3be8c;\">*</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">dioxus-ssr = {{ version = &quot;</span><span style=\"color:#a3be8c;\">*</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">tokio = {{ version = &quot;</span><span style=\"color:#a3be8c;\">1.15.0</span><span style=\"color:#c0c5ce;\">&quot;, features = [&quot;</span><span style=\"color:#a3be8c;\">full</span><span style=\"color:#c0c5ce;\">&quot;] }}\n</span></pre>\n" }
        p { "Now, set up your Axum app to respond on an endpoint." }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">axum::{{response::Html, routing::get, Router}};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">tokio</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">main</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> addr = std::net::SocketAddr::from(([</span><span style=\"color:#d08770;\">127</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">], </span><span style=\"color:#d08770;\">3000</span><span style=\"color:#c0c5ce;\">));\n</span><span style=\"color:#c0c5ce;\">\tprintln!(&quot;</span><span style=\"color:#a3be8c;\">listening on http://</span><span style=\"color:#d08770;\">{{}}</span><span style=\"color:#c0c5ce;\">&quot;, addr);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\taxum::Server::bind(&amp;addr)\n</span><span style=\"color:#c0c5ce;\">\t\t.</span><span style=\"color:#96b5b4;\">serve</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">\t\t\tRouter::new()\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t.</span><span style=\"color:#96b5b4;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">(app_endpoint))\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t.</span><span style=\"color:#96b5b4;\">into_make_service</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t)\n</span><span style=\"color:#c0c5ce;\">\t\t.await\n</span><span style=\"color:#c0c5ce;\">\t\t.</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "And then add our endpoint. We can either render  "
            code { "rsx!" }
            " directly:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app_endpoint</span><span style=\"color:#c0c5ce;\">() -&gt; Html&lt;String&gt; {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// render the rsx! macro to HTML\n</span><span style=\"color:#c0c5ce;\">\tHtml(dioxus_ssr::render_lazy(rsx! {{\n</span><span style=\"color:#c0c5ce;\">\t\tdiv {{ &quot;</span><span style=\"color:#a3be8c;\">hello world!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">\t}}))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p { "Or we can render VirtualDoms." }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app_endpoint</span><span style=\"color:#c0c5ce;\">() -&gt; Html&lt;String&gt; {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// create a component that renders a div with the text &quot;hello world&quot;\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">\t\tcx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(div {{ &quot;</span><span style=\"color:#a3be8c;\">hello world</span><span style=\"color:#c0c5ce;\">&quot; }}))\n</span><span style=\"color:#c0c5ce;\">\t}}\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// create a VirtualDom with the app component\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> app = VirtualDom::new(app);\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// rebuild the VirtualDom before rendering\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let </span><span style=\"color:#c0c5ce;\">_ = app.</span><span style=\"color:#96b5b4;\">rebuild</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// render the VirtualDom to HTML\n</span><span style=\"color:#c0c5ce;\">\tHtml(dioxus_ssr::render_vdom(&amp;app))\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "multithreaded-support",
            a { href: "#multithreaded-support", class: "header", "Multithreaded Support" }
        }
        p {
            "The Dioxus VirtualDom, sadly, is not currently  "
            code { "Send" }
            ". Internally, we use quite a bit of interior mutability which is not thread-safe."
            code { "Send" }
            ", it is possible to render a VirtualDom immediately to a String – but you cannot hold the VirtualDom across an await point. For retained-state SSR (essentially LiveView), you'll need to spawn a VirtualDom on its own thread and communicate with it via channels or create a pool of VirtualDoms."
            em { "must" }
            " remain on the thread it started. We are working on loosening this requirement."
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceLiveview() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "liveview",
            a { href: "#liveview", class: "header", "Liveview" }
        }
        p { "This guide will cover concepts specific to the Dioxus liveview renderer." }
        h2 { id: "router-integration",
            a { href: "#router-integration", class: "header", "Router Integration" }
        }
        p {
            "Currently, the Dioxus router does not integrate with the browser history in the liveview renderer. If you are interested in contributing this feature to Dioxus this issue is tracked "
            a { href: "https://github.com/DioxusLabs/dioxus/issues/1038", "" }
            "."
        }
        h2 { id: "managing-latency",
            a { href: "#managing-latency", class: "header", "Managing Latency" }
        }
        p {
            "Liveview makes it incredibly convenient to talk to your server from the client, but there are some downsides. Mainly in Dioxus Liveview every interaction goes through the server by default."
        }
        p {
            "Because of this, with the liveview renderer you need to be very deliberate about managing latency. Events that would be fast enough on other renderers like "
            a { href: "../../reference/user_input", "" }
            ", can be frustrating to use in the liveview renderer."
        }
        p {
            "To get around this issue you can inject bits of javascript in your liveview application. If you use a raw attribute as a listener, you can inject some javascript that will be run when the event is triggered:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">render! {{\n</span><span style=\"color:#c0c5ce;\">    div {{\n</span><span style=\"color:#c0c5ce;\">        input {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">oninput</span><span style=\"color:#c0c5ce;\">&quot;: &quot;</span><span style=\"color:#a3be8c;\">console.log(&#39;input changed!&#39;)</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
    }
}
#[component(no_case_check)]
pub fn ReferenceFullstackIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "fullstack-development",
            a { href: "#fullstack-development", class: "header", "Fullstack development" }
        }
        p { "Dioxus Fullstack contains helpers for:" }
        ul {
            li { "Incremental, static, and server side rendering" }
            li { "Hydrating your application on the Client" }
            li { "Communicating between a server and a client" }
        }
        p {
            "This guide will teach you everything you need to know about how to use the utilities in Dioxus fullstack to create amazing fullstack applications."
        }
        blockquote {
            p {
                "In addition to this guide, you can find more examples of full-stack apps and information about how to integrate with other frameworks and desktop renderers in the "
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/fullstack/examples",
                    ""
                }
                "."
            }
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceFullstackServerFunctions() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "communicating-with-the-server",
            a { href: "#communicating-with-the-server", class: "header",
                "Communicating with the server"
            }
        }
        p {
            code { "dioxus-fullstack" }
            " provides server functions that allow you to call an automatically generated API on the server from the client as if it were a local function."
        }
        p {
            "To make a server function, simply add the  "
            code { "#[server(YourUniqueType)]" }
            " attribute to a function. The function must:"
        }
        ul {
            li { "Be an async function" }
            li {
                "Have arguments and a return type that both implement serialize and deserialize (with "
                a { href: "https://serde.rs/", "" }
                ")."
            }
            li {
                "Return a "
                code { "Result" }
                " with an error type of ServerFnError"
            }
        }
        p {
            "You must call  "
            code { "register" }
            " on the type you passed into the server macro in your main function before starting your server to tell Dioxus about the server function."
        }
        p {
            "Let's continue building on the app we made in the "
            a { href: "../../getting_started/fullstack", "" }
            " guide. We will add a server function to our app that allows us to double the count on the server."
        }
        p { "First, add serde as a dependency:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add serde\n</span></pre>\n" }
        p {
            "Next, add the server function to your  "
            code { "main.rs" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_fullstack::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> config = LaunchBuilder::new(App);\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">cfg</span><span style=\"color:#c0c5ce;\">(feature = &quot;</span><span style=\"color:#a3be8c;\">ssr</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> config = config.</span><span style=\"color:#96b5b4;\">incremental</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">        IncrementalRendererConfig::default().</span><span style=\"color:#96b5b4;\">invalidate_after</span><span style=\"color:#c0c5ce;\">(std::time::Duration::from_secs(</span><span style=\"color:#d08770;\">120</span><span style=\"color:#c0c5ce;\">)),\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    config.</span><span style=\"color:#96b5b4;\">launch</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">High-Five counter: {{count}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">Up high!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count -= </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">Down low!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{\n</span><span style=\"color:#c0c5ce;\">            onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| {{\n</span><span style=\"color:#c0c5ce;\">                to_owned![count];\n</span><span style=\"color:#c0c5ce;\">                async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// Call the server function just like a local async function\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Ok(new_count) = </span><span style=\"color:#96b5b4;\">double_server</span><span style=\"color:#c0c5ce;\">(*count.</span><span style=\"color:#96b5b4;\">current</span><span style=\"color:#c0c5ce;\">()).await {{\n</span><span style=\"color:#c0c5ce;\">                        count.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(new_count);\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Double</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">server</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">double_server</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">number</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#c0c5ce;\">) -&gt; Result&lt;</span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#c0c5ce;\">, ServerFnError&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Perform some expensive computation or access a database on the server\n</span><span style=\"color:#c0c5ce;\">    tokio::time::sleep(std::time::Duration::from_secs(</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">)).await;\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> result = number * </span><span style=\"color:#d08770;\">2</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">server calculated </span><span style=\"color:#d08770;\">{{result}}</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    Ok(result)\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        p {
            "Now, build your client-side bundle with  "
            code { "dx build --features web" }
            " and run your server with  "
            code { "cargo run --features ssr" }
            ". You should see a new button that multiplies the count by 2."
        }
        h2 { id: "cached-data-fetching",
            a { href: "#cached-data-fetching", class: "header", "Cached data fetching" }
        }
        p { "One common use case for server functions is fetching data from the server:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case, unused)]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_fullstack::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    LaunchBuilder::new(app).</span><span style=\"color:#96b5b4;\">launch</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_future</span><span style=\"color:#c0c5ce;\">(cx, (), |_| async {{ </span><span style=\"color:#96b5b4;\">get_server_data</span><span style=\"color:#c0c5ce;\">().await }});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">server data is {{count.value():?}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">server</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_server_data</span><span style=\"color:#c0c5ce;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Access a database\n</span><span style=\"color:#c0c5ce;\">    tokio::time::sleep(std::time::Duration::from_millis(</span><span style=\"color:#d08770;\">100</span><span style=\"color:#c0c5ce;\">)).await;\n</span><span style=\"color:#c0c5ce;\">    Ok(&quot;</span><span style=\"color:#a3be8c;\">Hello from the server!</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        p {
            "If you navigate to the site above, you will first see  "
            code { "server data is None" }
            ", then after the  "
            code { "WASM" }
            " has loaded and the request to the server has finished, you will see  "
            code { "server data is Some(Ok(\"Hello from the server!\"))" }
            "."
        }
        p {
            "This approach works, but it can be slow. Instead of waiting for the client to load and send a request to the server, what if we could get all of the data we needed for the page on the server and send it down to the client with the initial HTML page?"
        }
        p {
            "This is exactly what the  "
            code { "use_server_future" }
            " hook allows us to do!  "
            code { "use_server_future" }
            " is similar to the  "
            code { "use_future" }
            " hook, but it allows you to wait for a future on the server and send the result of the future down to the client."
        }
        p {
            "Let's change our data fetching to use  "
            code { "use_server_future" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case, unused)]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_fullstack::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    LaunchBuilder::new(app).</span><span style=\"color:#96b5b4;\">launch</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_server_future</span><span style=\"color:#c0c5ce;\">(cx, (), |_| async {{ </span><span style=\"color:#96b5b4;\">get_server_data</span><span style=\"color:#c0c5ce;\">().await }})?;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">server data is {{count.value():?}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">server</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_server_data</span><span style=\"color:#c0c5ce;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Access a database\n</span><span style=\"color:#c0c5ce;\">    tokio::time::sleep(std::time::Duration::from_millis(</span><span style=\"color:#d08770;\">100</span><span style=\"color:#c0c5ce;\">)).await;\n</span><span style=\"color:#c0c5ce;\">    Ok(&quot;</span><span style=\"color:#a3be8c;\">Hello from the server!</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        blockquote {
            p {
                "Notice the  "
                code { "?" }
                " after  "
                code { "use_server_future" }
                ". This is what tells Dioxus fullstack to wait for the future to resolve before continuing rendering. If you want to not wait for a specific future, you can just remove the ? and deal with the  "
                code { "Option" }
                " manually."
            }
        }
        p {
            "Now when you load the page, you should see  "
            code { "server data is Ok(\"Hello from the server!\")" }
            ". No need to wait for the  "
            code { "WASM" }
            " to load or wait for the request to finish!"
        }
        SandBoxFrame { url: "https://codesandbox.io/p/sandbox/dioxus-fullstack-server-future-qwpp4p?file=/src/main.rs:3,24" }
        h2 { id: "running-the-client-with-dioxus-desktop",
            a {
                href: "#running-the-client-with-dioxus-desktop",
                class: "header",
                "Running the client with dioxus-desktop"
            }
        }
        p {
            "The project presented so far makes a web browser interact with the server, but it is also possible to make a desktop program interact with the server in a similar fashion. (The full example code is available in the "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/fullstack/examples/axum-desktop",
                ""
            }
            ")"
        }
        p {
            "First, we need to make two binary targets, one for the desktop program (the  "
            code { "client.rs" }
            " file), one for the server (the  "
            code { "server.rs" }
            " file). The client app and the server functions are written in a shared  "
            code { "lib.rs" }
            " file."
        }
        p {
            "The desktop and server targets have slightly different build configuration to enable additional dependencies or features."
        }
        ul {
            li {
                "the client.rs has to be run with the "
                code { "desktop" }
                " feature, so that the optional "
                code { "dioxus-desktop" }
                " dependency is included"
            }
            li {
                "the server.rs has to be run with the "
                code { "ssr" }
                " features; this will generate the server part of the server functions and will include the "
                code { "axum" }
                " dependency to run as a server."
            }
        }
        p { "Once you create your project, you can run the server executable with:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo run --bin server --features ssr\n</span></pre>\n" }
        p { "and the client desktop executable with:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo run --bin client --features desktop\n</span></pre>\n" }
        h3 { id: "client-code",
            a { href: "#client-code", class: "header", "Client code" }
        }
        p {
            "The client file is pretty straightforward. You only need to set the server url in the client code, so it knows where to send the network requests. Then, dioxus_desktop launches the app."
        }
        p {
            "For development, the example project runs the server on  "
            code { "localhost:8080" }
            ". "
            strong { "Before you release remember to update the url to your production url." }
        }
        h3 { id: "server-code",
            a { href: "#server-code", class: "header", "Server code" }
        }
        p {
            "In the server code, first you have to set the network address and port where the server will listen to."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> addr = std::net::SocketAddr::from(([</span><span style=\"color:#d08770;\">127</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">], </span><span style=\"color:#d08770;\">8080</span><span style=\"color:#c0c5ce;\">));\n</span></pre>\n" }
        p {
            "Then, you have to register the types declared in the server function macros into the axum server."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">server</span><span style=\"color:#c0c5ce;\">(GetServerData)]\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_server_data</span><span style=\"color:#c0c5ce;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#c0c5ce;\">    Ok(&quot;</span><span style=\"color:#a3be8c;\">Hello from the server!</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p {
            "The  "
            code { "GetServerData" }
            " type has to be registered in the axum server, which will add the corresponding route to the server."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let </span><span style=\"color:#c0c5ce;\">_ = GetServerData::register_explicit();\n</span></pre>\n" }
        p { "Finally, the server is started and it begins responding to requests." }
    }
}
#[component(no_case_check)]
pub fn ReferenceFullstackExtractors() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "extractors",
            a { href: "#extractors", class: "header", "Extractors" }
        }
        p {
            "Server functions are an ergonomic way to call a function on the server. Server function work by registering an endpoint on the server and using requests on the client. Most of the time, you shouldn't need to worry about how server functions operate, but there are some times when you need to get some value from the request other than the data passed in the server function."
        }
        p {
            "For example, requests contain information about the user's browser (called the "
            a { href: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent",
                ""
            }
            "). We can use an extractor to retrieve that information."
        }
        p {
            "You can use the  "
            code { "extract" }
            " method within a server function to extract something from the request. You can extract any type that implements  "
            code { "FromServerContext" }
            " (or when axum is enabled, you can use axum extractors directly):"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">server</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">log_user_agent</span><span style=\"color:#c0c5ce;\">() -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#c0c5ce;\">axum::TypedHeader(user_agent): axum::TypedHeader&lt;axum::headers::UserAgent&gt; = </span><span style=\"color:#96b5b4;\">extract</span><span style=\"color:#c0c5ce;\">().await?;\n</span><span style=\"color:#c0c5ce;\">    log::info!(&quot;</span><span style=\"color:#a3be8c;\">{{:?}}</span><span style=\"color:#c0c5ce;\">&quot;, user_agent);\n</span><span style=\"color:#c0c5ce;\">    Ok(())\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceFullstackMiddleware() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "middleware",
            a { href: "#middleware", class: "header", "Middleware" }
        }
        p {
            "Extractors allow you to wrap your server function in some code that changes either the request or the response. Dioxus fullstack integrates with "
            a { href: "https://docs.rs/tower/latest/tower/index.html", "" }
            " to allow you to wrap your server functions in middleware."
        }
        p {
            "You can use the  "
            code { "#[middleware]" }
            " attribute to add a layer of middleware to your server function. Let's add a timeout middleware to a server function. This middleware will stop running the server function if it reaches a certain timeout:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">server</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#65737e;\">// Add a timeout middleware to the server function that will return an error if the function takes longer than 1 second to execute\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">middleware</span><span style=\"color:#c0c5ce;\">(tower_http::timeout::TimeoutLayer::</span><span style=\"color:#8fa1b3;\">new</span><span style=\"color:#c0c5ce;\">(std::time::Duration::</span><span style=\"color:#8fa1b3;\">from_secs</span><span style=\"color:#c0c5ce;\">(1)))]\n</span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">timeout</span><span style=\"color:#c0c5ce;\">() -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#c0c5ce;\">    tokio::time::sleep(std::time::Duration::from_secs(</span><span style=\"color:#d08770;\">2</span><span style=\"color:#c0c5ce;\">)).await;\n</span><span style=\"color:#c0c5ce;\">    Ok(())\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceFullstackAuthentication() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "authentication",
            a { href: "#authentication", class: "header", "Authentication" }
        }
        p {
            "You can use "
            a { href: "./extractors", "" }
            " to integrate auth with your Fullstack application."
        }
        p {
            "You can create a custom extractors that extracts the auth session from the request. From that auth session, you can check if the user has the required privileges before returning the private data."
        }
        p {
            "A "
            a { href: "https://github.com/dioxuslabs/dioxus/blob/master/packages/fullstack/examples/axum-auth/src/main.rs",
                ""
            }
            " with the complete implementation is available in the fullstack examples."
        }
    }
}
#[component(no_case_check)]
pub fn ReferenceFullstackRouting() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "routing",
            a { href: "#routing", class: "header", "Routing" }
        }
        p {
            "You can easily integrate your fullstack application with a client side router using the  "
            code { "launch_router" }
            " macro. The  "
            code { "launch_router" }
            " macro works the same as the  "
            code { "launch" }
            " macro except it accepts a Router instead of a Component:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_fullstack::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_router::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">serde::{{Deserialize, Serialize}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> config = LaunchBuilder::&lt;FullstackRouterConfig&lt;Route&gt;&gt;::router();\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">cfg</span><span style=\"color:#c0c5ce;\">(feature = &quot;</span><span style=\"color:#a3be8c;\">ssr</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    config\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">incremental</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">            IncrementalRendererConfig::default()\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">invalidate_after</span><span style=\"color:#c0c5ce;\">(std::time::Duration::from_secs(</span><span style=\"color:#d08770;\">120</span><span style=\"color:#c0c5ce;\">)),\n</span><span style=\"color:#c0c5ce;\">        )\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">launch</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">cfg</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#8fa1b3;\">not</span><span style=\"color:#c0c5ce;\">(feature = &quot;</span><span style=\"color:#a3be8c;\">ssr</span><span style=\"color:#c0c5ce;\">&quot;))]\n</span><span style=\"color:#c0c5ce;\">    config.</span><span style=\"color:#96b5b4;\">launch</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Routable, Debug, PartialEq, Serialize, Deserialize)]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    Home {{}},\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog/:id</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    Blog {{ id: </span><span style=\"color:#b48ead;\">i32 </span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Blog</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">i32</span><span style=\"color:#c0c5ce;\">) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        Link {{ to: Route::Home {{}}, &quot;</span><span style=\"color:#a3be8c;\">Go to counter</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        table {{\n</span><span style=\"color:#c0c5ce;\">            tbody {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">for </span><span style=\"color:#c0c5ce;\">_ in </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">..*id {{\n</span><span style=\"color:#c0c5ce;\">                    tr {{\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#b48ead;\">for </span><span style=\"color:#c0c5ce;\">_ in </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">..*id {{\n</span><span style=\"color:#c0c5ce;\">                            td {{ &quot;</span><span style=\"color:#a3be8c;\">hello world!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">                        }}\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Home</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> text = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || &quot;</span><span style=\"color:#a3be8c;\">...</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        Link {{\n</span><span style=\"color:#c0c5ce;\">            to: Route::Blog {{\n</span><span style=\"color:#c0c5ce;\">                id: *count.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Go to blog</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            h1 {{ &quot;</span><span style=\"color:#a3be8c;\">High-Five counter: {{count}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">            button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">Up high!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">            button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count -= </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">Down low!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">            button {{\n</span><span style=\"color:#c0c5ce;\">                onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| {{\n</span><span style=\"color:#c0c5ce;\">                    to_owned![text];\n</span><span style=\"color:#c0c5ce;\">                    async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Ok(data) = </span><span style=\"color:#96b5b4;\">get_server_data</span><span style=\"color:#c0c5ce;\">().await {{\n</span><span style=\"color:#c0c5ce;\">                            println!(&quot;</span><span style=\"color:#a3be8c;\">Client received: </span><span style=\"color:#d08770;\">{{}}</span><span style=\"color:#c0c5ce;\">&quot;, data);\n</span><span style=\"color:#c0c5ce;\">                            text.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(data.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#96b5b4;\">post_server_data</span><span style=\"color:#c0c5ce;\">(data).await.</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">                        }}\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                }},\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">Run server function!</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Server said: {{text}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">server</span><span style=\"color:#c0c5ce;\">(PostServerData)]\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">post_server_data</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">data</span><span style=\"color:#c0c5ce;\">: String) -&gt; Result&lt;(), ServerFnError&gt; {{\n</span><span style=\"color:#c0c5ce;\">    println!(&quot;</span><span style=\"color:#a3be8c;\">Server received: </span><span style=\"color:#d08770;\">{{}}</span><span style=\"color:#c0c5ce;\">&quot;, data);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    Ok(())\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">server</span><span style=\"color:#c0c5ce;\">(GetServerData)]\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get_server_data</span><span style=\"color:#c0c5ce;\">() -&gt; Result&lt;String, ServerFnError&gt; {{\n</span><span style=\"color:#c0c5ce;\">    Ok(&quot;</span><span style=\"color:#a3be8c;\">Hello from the server!</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        SandBoxFrame { url: "https://codesandbox.io/p/sandbox/dioxus-fullstack-router-s75v5q?file=%2Fsrc%2Fmain.rs%3A7%2C1" }
    }
}
#[component(no_case_check)]
pub fn RouterIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "introduction",
            a { href: "#introduction", class: "header", "Introduction" }
        }
        blockquote {
            p {
                "If you are not familiar with Dioxus itself, check out the "
                a { href: "router/../guide", "" }
                " first."
            }
        }
        p {
            "Whether you are building a website, desktop app, or mobile app, splitting your app's views into \"pages\" can be an effective method for organization and maintainability."
        }
        p {
            "For this purpose, Dioxus provides a router. Use the  "
            code { "cargo add" }
            " command to add the dependency:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo add dioxus-router\n</span></pre>\n" }
        p {
            "Then, add this to your  "
            code { "Dioxus.toml" }
            " (learn more about configuration "
            a { href: "router/../CLI/configure", "" }
            "):"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[web.watcher]\n</span><span style=\"color:#c0c5ce;\">index_on_404 = </span><span style=\"color:#d08770;\">true\n</span></pre>\n" }
        blockquote {
            p {
                "This configuration only works when using  "
                code { "dx serve" }
                ". If you host your app in a different way (which you most likely do in production), you need to find out how to add a fallback 404 page to your app, and make it a copy of the generated  "
                code { "dist/index.html" }
                "."
            }
        }
        p {
            "This will instruct  "
            code { "dx serve" }
            " to redirect any unknown route to the index, to then be resolved by the router."
            code { "localhost:8080" }
            ", then click a link to go to "
            code { "localhost:8080/contact" }
            "), the app renders the new route without reloading."
            em { "before" }
            " going to the index (go straight to "
            code { "localhost:8080/contact" }
            "), we are trying to access a static route from the server, but the only static route on our server is the index (because the Dioxus frontend is a Single Page Application) and it will fail unless we redirect all missing routes to the index."
        }
        p { "This book is intended to get you up to speed with Dioxus Router. It is split" }
        ol {
            li {
                "The "
                a { href: "router/reference", "" }
                " section explains individual features in "
            }
            li {
                "If you prefer a learning-by-doing approach, you can check out the "
                em {
                    a { href: "router/example", "" }
                }
                ". It guides you through "
            }
        }
        blockquote {
            p {
                "Please note that this is not the only documentation for the Dioxus Router. You"
                a { href: "https://docs.rs/dioxus-router/", "" }
                "."
            }
        }
    }
}
#[component(no_case_check)]
pub fn RouterExampleIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "overview",
            a { href: "#overview", class: "header", "Overview" }
        }
        p { "In this guide, you'll learn to effectively use Dioxus Router whether you're" }
        blockquote {
            p {
                "To follow along with the router example, you'll need a working Dioxus app."
                a { href: "https://dioxuslabs.com/learn/0.4/getting_started", "" }
                " to get started."
            }
        }
        blockquote {
            p {
                "Make sure to add Dioxus Router as a dependency, as explained in the"
                a { href: "example/..", "" }
                "."
            }
        }
        h2 { id: "youll-learn-how-to",
            a { href: "#youll-learn-how-to", class: "header", "You'll learn how to" }
        }
        ul {
            li { "Create routes and render \"pages\"." }
            li { "Utilize nested routes, create a navigation bar, and render content for a" }
            li { "Parse URL parameters to dynamically display content." }
            li { "Redirect visitors to different routes." }
        }
        blockquote {
            p {
                strong { "Disclaimer" }
            }
            p { "The example will only display the features of Dioxus Router. It will not" }
        }
        p {
            "You can find the complete application in the "
            a { href: "example/full-code", "" }
            " chapter."
        }
    }
}
#[component(no_case_check)]
pub fn RouterExampleFirstRoute() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "creating-our-first-route",
            a { href: "#creating-our-first-route", class: "header", "Creating Our First Route" }
        }
        p { "In this chapter, we will start utilizing Dioxus Router and add a homepage and a" }
        h2 { id: "fundamentals",
            a { href: "#fundamentals", class: "header", "Fundamentals" }
        }
        p {
            "The core of the Dioxus Router is the "
            code { "Routable" }
            "]"
            code { "Router" }
            "]"
        }
        p { "Routable is a trait for anything that can:" }
        ul {
            li { "Be parsed from a URL" }
            li { "Be turned into a URL" }
            li { "Be rendered as to a Element" }
        }
        p {
            "Let's create a new router. First, we need an actual page to route to! Let's add a homepage component:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Home</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Welcome to the Dioxus Blog!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        h2 { id: "creating-routes",
            a { href: "#creating-routes", class: "header", "Creating Routes" }
        }
        p { "We want to use Dioxus Router to separate our application into different \"pages\"." }
        p {
            "To start using Dioxus Router, we need to use the "
            code { "Routable" }
            "]"
        }
        p {
            "The "
            code { "Routable" }
            "]"
            code { "route(path)" }
            "]"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_router::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">/// An enum of all of the possible routes in the app.\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// The home page is at the / route\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// If the name of the component and variant are the same you can omit the component and props name\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// If they are different you can specify them like this:\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// #[route(&quot;/&quot;, ComponentName, PropsName)]\n</span><span style=\"color:#c0c5ce;\">    Home {{}},\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "All other hooks and components the router provides can only be used as a descendant of a "
            code { "Router" }
            "]"
        }
        p {
            "If you head to your application's browser tab, you should now see the text"
            code { "Welcome to Dioxus Blog!" }
            " when on the root URL ("
            code { "http://localhost:8080/" }
            "). If"
        }
        p {
            "This is because we told Dioxus Router to render the  "
            code { "Home" }
            " component only when"
            code { "/" }
            "."
        }
        h2 { id: "fallback-route",
            a { href: "#fallback-route", class: "header", "Fallback Route" }
        }
        p {
            "In our example, when a route doesn't exist Dioxus Router doesn't render anything. Many sites also have a \"404\" page when a path does not exist. Let's add one to our site."
        }
        p {
            "First, we create a new  "
            code { "PageNotFound" }
            " component."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">PageNotFound</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">: Vec&lt;String&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Page not found</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        p {{ &quot;</span><span style=\"color:#a3be8c;\">We are terribly sorry, but the page you requested doesn&#39;t exist.</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        pre {{\n</span><span style=\"color:#c0c5ce;\">            color: &quot;</span><span style=\"color:#a3be8c;\">red</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">log:</span><span style=\"color:#96b5b4;\">\\n</span><span style=\"color:#a3be8c;\">attemped to navigate to: {{route:?}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "Next, register the route in the Route enum to match if all other routes fail." }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    Home {{}},\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// PageNotFound is a catch all route that will match any route and placing the matched segments in the route field\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:..route</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    PageNotFound {{ route: Vec&lt;String&gt; }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "Now when you go to a route that doesn't exist, you should see the page not found" }
        h2 { id: "conclusion",
            a { href: "#conclusion", class: "header", "Conclusion" }
        }
        p {
            "In this chapter, we learned how to create a route and tell Dioxus Router what"
            code { "/" }
            ". We also created a 404 page to"
        }
    }
}
#[component(no_case_check)]
pub fn RouterExampleBuildingANest() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "building-a-nest",
            a { href: "#building-a-nest", class: "header", "Building a Nest" }
        }
        p { "In this chapter, we will begin to build the blog portion of our site which will" }
        h2 { id: "site-navigation",
            a { href: "#site-navigation", class: "header", "Site Navigation" }
        }
        p { "Our site visitors won't know all the available pages and blogs on our site so we" }
        p {
            "We want our navbar component to be rendered on several different pages on our site. Instead of duplicating the code, we can create a component that wraps all children routes. This is called a layout component. To tell the router where to render the child routes, we use the "
            code { "Outlet" }
            "]"
        }
        p {
            "Let's create a new  "
            code { "NavBar" }
            " component:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">NavBar</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        nav {{\n</span><span style=\"color:#c0c5ce;\">            ul {{\n</span><span style=\"color:#c0c5ce;\">                li {{ &quot;</span><span style=\"color:#a3be8c;\">links</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The Outlet component will render child routes (In this case just the Home component) inside the Outlet component\n</span><span style=\"color:#c0c5ce;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Next, let's add our  "
            code { "NavBar" }
            " component as a layout to our Route enum:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// All routes under the NavBar layout will be rendered inside of the NavBar Outlet\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">layout</span><span style=\"color:#c0c5ce;\">(NavBar)]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        Home {{}},\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">end_layout</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:..route</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    PageNotFound {{ route: Vec&lt;String&gt; }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "To add links to our  "
            code { "NavBar" }
            ", we could always use an HTML anchor element but that has two issues:"
        }
        ol {
            li { "It causes a full-page reload" }
            li { "We can accidentally link to a page that doesn't exist" }
        }
        p {
            "Instead, we want to use the "
            a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Link.html",
                ""
                code { "Link" }
            }
            " component provided by Dioxus Router."
        }
        p {
            "The "
            a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Link.html",
                ""
                code { "Link" }
            }
            " is similar to a regular "
            code { "<a>" }
            " tag. It takes a target and children."
        }
        p {
            "Unlike a regular  "
            code { "<a>" }
            " tag, we can pass in our Route enum as the target. Because we annotated our routes with the "
            code { "route(path)" }
            "]"
            a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Link.html",
                ""
                code { "Link" }
            }
            " will know how to generate the correct URL. If we use the Route enum, the rust compiler will prevent us from linking to a page that doesn't exist."
        }
        p { "Let's add our links:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">NavBar</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        nav {{\n</span><span style=\"color:#c0c5ce;\">            ul {{\n</span><span style=\"color:#c0c5ce;\">                li {{\n</span><span style=\"color:#c0c5ce;\">                    Link {{\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The Link component will navigate to the route specified\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// in the target prop which is checked to exist at compile time\n</span><span style=\"color:#c0c5ce;\">                        to: Route::Home {{}},\n</span><span style=\"color:#c0c5ce;\">                        &quot;</span><span style=\"color:#a3be8c;\">Home</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        blockquote {
            p {
                "Using this method, the "
                a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.Link.html",
                    ""
                    code { "Link" }
                }
                " component only works for links within our"
                a { href: "./navigation-targets", "" }
                "."
            }
        }
        p { "Now you should see a list of links near the top of your page. Click on one and" }
        h2 { id: "url-parameters-and-nested-routes",
            a { href: "#url-parameters-and-nested-routes", class: "header",
                "URL Parameters and Nested Routes"
            }
        }
        p {
            "Many websites such as GitHub put parameters in their URL. For example,"
            code { "https://github.com/DioxusLabs" }
            " utilizes the text after the domain to"
        }
        p { "We want to store our blogs in a database and load them as needed. We also" }
        p { "We could utilize a search page that loads a blog when clicked but then our users" }
        p {
            "The path to our blog will look like  "
            code { "/blog/myBlogPage" }
            ",  "
            code { "myBlogPage" }
            " being the"
        }
        p {
            "First, let's create a layout component (similar to the navbar) that wraps the blog content. This allows us to add a heading that tells the user they are on the blog."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Blog</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Blog</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p { "Now we'll create another index component, that'll be displayed when no blog post" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">BlogList</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h2 {{ &quot;</span><span style=\"color:#a3be8c;\">Choose a post</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        ul {{\n</span><span style=\"color:#c0c5ce;\">            li {{\n</span><span style=\"color:#c0c5ce;\">                Link {{\n</span><span style=\"color:#c0c5ce;\">                    to: Route::BlogPost {{ name: &quot;</span><span style=\"color:#a3be8c;\">Blog post 1</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">() }},\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">Read the first blog post</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            li {{\n</span><span style=\"color:#c0c5ce;\">                Link {{\n</span><span style=\"color:#c0c5ce;\">                    to: Route::BlogPost {{ name: &quot;</span><span style=\"color:#a3be8c;\">Blog post 2</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">() }},\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">Read the second blog post</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "We also need to create a component that displays an actual blog post. This component will accept the URL parameters as props:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// The name prop comes from the /:name route segment\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">BlogPost</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">name</span><span style=\"color:#c0c5ce;\">: String) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h2 {{ &quot;</span><span style=\"color:#a3be8c;\">Blog Post: {{name}}</span><span style=\"color:#c0c5ce;\">&quot;}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p { "Finally, let's tell our router about those components:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">layout</span><span style=\"color:#c0c5ce;\">(NavBar)]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        Home {{}},\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">nest</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">            #[</span><span style=\"color:#bf616a;\">layout</span><span style=\"color:#c0c5ce;\">(Blog)]\n</span><span style=\"color:#c0c5ce;\">            #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">            BlogList {{}},\n</span><span style=\"color:#c0c5ce;\">            #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/post/:name</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">            BlogPost {{ name: String }},\n</span><span style=\"color:#c0c5ce;\">            #[</span><span style=\"color:#bf616a;\">end_layout</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">end_nest</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">end_layout</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:..route</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    PageNotFound {{\n</span><span style=\"color:#c0c5ce;\">        route: Vec&lt;String&gt;,\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "That's it! If you head to  "
            code { "/blog/1" }
            " you should see our sample post."
        }
        h2 { id: "conclusion",
            a { href: "#conclusion", class: "header", "Conclusion" }
        }
        p { "In this chapter, we utilized Dioxus Router's Link, and Route Parameter" }
    }
}
#[component(no_case_check)]
pub fn RouterExampleNavigationTargets() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "navigation-targets",
            a { href: "#navigation-targets", class: "header", "Navigation Targets" }
        }
        p {
            "In the previous chapter, we learned how to create links to pages within our app."
            code { "target" }
            " property. This property takes something that can be converted to a "
            a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/navigation/enum.NavigationTarget.html",
                ""
                code { "NavigationTarget" }
            }
            "."
        }
        h2 { id: "what-is-a-navigation-target",
            a { href: "#what-is-a-navigation-target", class: "header",
                "What is a navigation target?"
            }
        }
        p {
            "A "
            a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/navigation/enum.NavigationTarget.html",
                ""
                code { "NavigationTarget" }
            }
            " is similar to the "
            code { "href" }
            " of an HTML anchor element. It"
        }
        ul {
            li {
                a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/navigation/enum.NavigationTarget.html#variant.Internal",
                    ""
                    code { "Internal" }
                }
                ": We used internal links in the previous chapter. It's a link to a page within our"
            }
            li {
                a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/navigation/enum.NavigationTarget.html#variant.External",
                    ""
                    code { "External" }
                }
                ": This works exactly like an HTML anchors' "
                code { "href" }
                ". Don't use this for in-app"
            }
        }
        h2 { id: "external-navigation",
            a { href: "#external-navigation", class: "header", "External navigation" }
        }
        p { "If we need a link to an external page we can do it like this:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">GoToDioxus</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        Link {{\n</span><span style=\"color:#c0c5ce;\">            to: &quot;</span><span style=\"color:#a3be8c;\">https://dioxuslabs.com</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">ExternalTarget target</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
    }
}
#[component(no_case_check)]
pub fn RouterExampleRedirectionPerfection() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "redirection-perfection",
            a { href: "#redirection-perfection", class: "header", "Redirection Perfection" }
        }
        p { "You're well on your way to becoming a routing master!" }
        p { "In this chapter, we will cover creating redirects" }
        h2 { id: "creating-redirects",
            a { href: "#creating-redirects", class: "header", "Creating Redirects" }
        }
        p { "A redirect is very simple. When dioxus encounters a redirect while finding out" }
        p {
            "As a simple example, let's say you want user to still land on your blog, even"
            code { "/myblog" }
            " or "
            code { "/myblog/:name" }
            "."
        }
        p { "Redirects are special attributes in the router enum that accept a route and a closure" }
        p { "Let's add a redirect to our router enum:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">layout</span><span style=\"color:#c0c5ce;\">(NavBar)]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        Home {{}},\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">nest</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">            #[</span><span style=\"color:#bf616a;\">layout</span><span style=\"color:#c0c5ce;\">(Blog)]\n</span><span style=\"color:#c0c5ce;\">                #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">                BlogList {{}},\n</span><span style=\"color:#c0c5ce;\">                #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/post/:name</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">                BlogPost {{ name: String }},\n</span><span style=\"color:#c0c5ce;\">            #[</span><span style=\"color:#bf616a;\">end_layout</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">end_nest</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">end_layout</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">nest</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/myblog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">redirect</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;, || Route::BlogList {{}})]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">redirect</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:name</span><span style=\"color:#c0c5ce;\">&quot;, |name: String| Route::BlogPost {{ name }})]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">end_nest</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:..route</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    PageNotFound {{\n</span><span style=\"color:#c0c5ce;\">        route: Vec&lt;String&gt;,\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "That's it! Now your users will be redirected to the blog." }
        h3 { id: "conclusion",
            a { href: "#conclusion", class: "header", "Conclusion" }
        }
        p {
            "Well done! You've completed the Dioxus Router guide. You've built a small"
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/router/examples",
                ""
            }
            ", or"
            a { href: "https://docs.rs/dioxus-router/", "" }
            "."
        }
        h3 { id: "challenges",
            a { href: "#challenges", class: "header", "Challenges" }
        }
        ul {
            li { "Organize your components into separate files for better maintainability." }
            li { "Give your app some style if you haven't already." }
            li { "Build an about page so your visitors know who you are." }
            li { "Add a user system that uses URL parameters." }
            li { "Create a simple admin system to create, delete, and edit blogs." }
            li { "If you want to go to the max, hook up your application to a rest API and database." }
        }
    }
}
#[component(no_case_check)]
pub fn RouterExampleFullCode() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "full-code",
            a { href: "#full-code", class: "header", "Full Code" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_router::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ANCHOR: router\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">layout</span><span style=\"color:#c0c5ce;\">(NavBar)]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        Home {{}},\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">nest</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">            #[</span><span style=\"color:#bf616a;\">layout</span><span style=\"color:#c0c5ce;\">(Blog)]\n</span><span style=\"color:#c0c5ce;\">                #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">                BlogList {{}},\n</span><span style=\"color:#c0c5ce;\">                #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/post/:name</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">                BlogPost {{ name: String }},\n</span><span style=\"color:#c0c5ce;\">            #[</span><span style=\"color:#bf616a;\">end_layout</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">end_nest</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">end_layout</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">nest</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/myblog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">redirect</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;, || Route::BlogList {{}})]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">redirect</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:name</span><span style=\"color:#c0c5ce;\">&quot;, |name: String| Route::BlogPost {{ name }})]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">end_nest</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:..route</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    PageNotFound {{\n</span><span style=\"color:#c0c5ce;\">        route: Vec&lt;String&gt;,\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#65737e;\">// ANCHOR_END: router\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        Router::&lt;Route&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">NavBar</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        nav {{\n</span><span style=\"color:#c0c5ce;\">            ul {{\n</span><span style=\"color:#c0c5ce;\">                li {{ Link {{ to: Route::Home {{}}, &quot;</span><span style=\"color:#a3be8c;\">Home</span><span style=\"color:#c0c5ce;\">&quot; }} }}\n</span><span style=\"color:#c0c5ce;\">                li {{ Link {{ to: Route::BlogList {{}}, &quot;</span><span style=\"color:#a3be8c;\">Blog</span><span style=\"color:#c0c5ce;\">&quot; }} }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Home</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Welcome to the Dioxus Blog!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Blog</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Blog</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">BlogList</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h2 {{ &quot;</span><span style=\"color:#a3be8c;\">Choose a post</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        ul {{\n</span><span style=\"color:#c0c5ce;\">            li {{\n</span><span style=\"color:#c0c5ce;\">                Link {{\n</span><span style=\"color:#c0c5ce;\">                    to: Route::BlogPost {{ name: &quot;</span><span style=\"color:#a3be8c;\">Blog post 1</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">() }},\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">Read the first blog post</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            li {{\n</span><span style=\"color:#c0c5ce;\">                Link {{\n</span><span style=\"color:#c0c5ce;\">                    to: Route::BlogPost {{ name: &quot;</span><span style=\"color:#a3be8c;\">Blog post 2</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">() }},\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">Read the second blog post</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">BlogPost</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">name</span><span style=\"color:#c0c5ce;\">: String) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h2 {{ &quot;</span><span style=\"color:#a3be8c;\">Blog Post: {{name}}</span><span style=\"color:#c0c5ce;\">&quot;}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">PageNotFound</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">: Vec&lt;String&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Page not found</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        p {{ &quot;</span><span style=\"color:#a3be8c;\">We are terribly sorry, but the page you requested doesn&#39;t exist.</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        pre {{\n</span><span style=\"color:#c0c5ce;\">            color: &quot;</span><span style=\"color:#a3be8c;\">red</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">log:</span><span style=\"color:#96b5b4;\">\\n</span><span style=\"color:#a3be8c;\">attemped to navigate to: {{route:?}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn RouterReferenceIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "adding-the-router-to-your-application",
            a {
                href: "#adding-the-router-to-your-application",
                class: "header",
                "Adding the router to your application"
            }
        }
        p { "In this chapter, we will learn how to add the router to our app. By itself, this" }
        blockquote {
            p {
                "Make sure you added the  "
                code { "dioxus-router" }
                " dependency as explained in the"
                a { href: "reference/..", "" }
                "."
            }
        }
        p { "In most cases, we want to add the router to the root component of our app. This" }
        p { "First, we define the router with the router macro:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_router::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">/// An enum of all of the possible routes in the app.\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// The home page is at the / route\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// If the name of the component and variant are the same you can omit the component and props name\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// If they are different you can specify them like this:\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// #[route(&quot;/&quot;, ComponentName, PropsName)]\n</span><span style=\"color:#c0c5ce;\">    Home {{}},\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Then we render the router with the "
            code { "Router" }
            "]"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        Router::&lt;Route&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
    }
}
#[component(no_case_check)]
pub fn RouterReferenceRoutesIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "defining-routes",
            a { href: "#defining-routes", class: "header", "Defining Routes" }
        }
        p {
            "When creating a "
            code { "Routable" }
            "]"
            code { "route(\"path\")" }
            " attribute."
        }
        h2 { id: "route-segments",
            a { href: "#route-segments", class: "header", "Route Segments" }
        }
        p {
            "Each route is made up of segments. Most segments are separated by  "
            code { "/" }
            " characters in the path."
        }
        p { "There are four fundamental types of segments:" }
        ol {
            li {
                a { href: "routes/#static-segments", "" }
                " are fixed strings that must be present in the path."
            }
            li {
                a { href: "routes/#dynamic-segments", "" }
                " are types that can be parsed from a segment."
            }
            li {
                a { href: "routes/#catch-all-segments", "" }
                " are types that can be parsed from multiple segments."
            }
            li {
                a { href: "routes/#query-segments", "" }
                " are types that can be parsed from the query string."
            }
        }
        p { "Routes are matched:" }
        ul {
            li {
                "First, from most specific to least specific (Static then Dynamic then Catch All) (Query is always matched)"
            }
            li {
                "Then, if multiple routes match the same path, the order in which they are defined in the enum is followed."
            }
        }
        h2 { id: "static-segments",
            a { href: "#static-segments", class: "header", "Static segments" }
        }
        p {
            "Fixed routes match a specific path. For example, the route  "
            code { "#[route(\"/about\")]" }
            " will match the path  "
            code { "/about" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Routes always start with a slash\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    Home {{}},\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// You can have multiple segments in a route\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/hello/world</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    HelloWorld {{}},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Home</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">HelloWorld</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "dynamic-segments",
            a { href: "#dynamic-segments", class: "header", "Dynamic Segments" }
        }
        p {
            "Dynamic segments are in the form of  "
            code { ":name" }
            " where  "
            code { "name" }
            " is"
        }
        p {
            "The segment can be of any type that implements  "
            code { "FromStr" }
            "."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// segments that start with : are dynamic segments\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/post/:name</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    BlogPost {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// You must include dynamic segments in child variants\n</span><span style=\"color:#c0c5ce;\">        name: String,\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/document/:id</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    Document {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// You can use any type that implements FromStr\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// If the segment can&#39;t be parsed, the route will not match\n</span><span style=\"color:#c0c5ce;\">        id: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// Components must contain the same dynamic segments as their corresponding variant\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">BlogPost</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">name</span><span style=\"color:#c0c5ce;\">: String) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Document</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "catch-all-segments",
            a { href: "#catch-all-segments", class: "header", "Catch All Segments" }
        }
        p {
            "Catch All segments are in the form of  "
            code { ":..name" }
            " where  "
            code { "name" }
            " is the name of the field in the route variant. If the segments are parsed successfully then the route matches, otherwise the matching continues."
        }
        p {
            "The segment can be of any type that implements  "
            code { "FromSegments" }
            ". (Vec"
        }
        p {
            "Catch All segments must be the "
            em { "last route segment" }
            " in the path (query segments are not counted) and cannot be included in nests."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// segments that start with :.. are catch all segments\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog/:..segments</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    BlogPost {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// You must include catch all segment in child variants\n</span><span style=\"color:#c0c5ce;\">        segments: Vec&lt;String&gt;,\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// Components must contain the same catch all segments as their corresponding variant\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">BlogPost</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">segments</span><span style=\"color:#c0c5ce;\">: Vec&lt;String&gt;) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "query-segments",
            a { href: "#query-segments", class: "header", "Query Segments" }
        }
        p {
            "Query segments are in the form of  "
            code { "?:name" }
            " where  "
            code { "name" }
            " is the name of the field in the route variant."
        }
        p {
            "Unlike "
            a { href: "routes/#dynamic-segments", "" }
            " and "
            a { href: "routes/#catch-all-segments", "" }
            ", parsing a Query segment must not fail."
        }
        p {
            "The segment can be of any type that implements  "
            code { "FromQuery" }
            "."
        }
        p {
            "Query segments must be the "
            em { "after all route segments" }
            " and cannot be included in nests."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// segments that start with ?: are query segments\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog?:query_params</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    BlogPost {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// You must include query segments in child variants\n</span><span style=\"color:#c0c5ce;\">        query_params: BlogQuerySegments,\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Debug, Clone, PartialEq)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">BlogQuerySegments {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">name</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">surname</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">/// The display impl needs to display the query in a way that can be parsed:\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#c0c5ce;\">Display </span><span style=\"color:#b48ead;\">for </span><span style=\"color:#c0c5ce;\">BlogQuerySegments {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">fmt</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">f</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#c0c5ce;\">std::fmt::Formatter&lt;&#39;_&gt;) -&gt; std::fmt::Result {{\n</span><span style=\"color:#c0c5ce;\">        write!(f, &quot;</span><span style=\"color:#a3be8c;\">name=</span><span style=\"color:#d08770;\">{{}}</span><span style=\"color:#a3be8c;\">&amp;surname=</span><span style=\"color:#d08770;\">{{}}</span><span style=\"color:#c0c5ce;\">&quot;, </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.name, </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.surname)\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">/// The query segment is anything that implements https://docs.rs/dioxus-router/latest/dioxus_router/routable/trait.FromQuery.html. You can implement that trait for a struct if you want to parse multiple query parameters.\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#c0c5ce;\">FromQuery </span><span style=\"color:#b48ead;\">for </span><span style=\"color:#c0c5ce;\">BlogQuerySegments {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">from_query</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">query</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">str</span><span style=\"color:#c0c5ce;\">) -&gt; </span><span style=\"color:#b48ead;\">Self </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> name = None;\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> surname = None;\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> pairs = form_urlencoded::parse(query.</span><span style=\"color:#96b5b4;\">as_bytes</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">        pairs.</span><span style=\"color:#96b5b4;\">for_each</span><span style=\"color:#c0c5ce;\">(|(</span><span style=\"color:#bf616a;\">key</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">)| {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> key == &quot;</span><span style=\"color:#a3be8c;\">name</span><span style=\"color:#c0c5ce;\">&quot; {{\n</span><span style=\"color:#c0c5ce;\">                name = Some(value.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> key == &quot;</span><span style=\"color:#a3be8c;\">surname</span><span style=\"color:#c0c5ce;\">&quot; {{\n</span><span style=\"color:#c0c5ce;\">                surname = Some(value.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }});\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">Self </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            name: name.</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">            surname: surname.</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">BlogPost</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">query_params</span><span style=\"color:#c0c5ce;\">: BlogQuerySegments) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div{{&quot;</span><span style=\"color:#a3be8c;\">This is your blogpost with a query segment:</span><span style=\"color:#c0c5ce;\">&quot;}}\n</span><span style=\"color:#c0c5ce;\">        div{{format!(&quot;</span><span style=\"color:#d08770;\">{{:?}}</span><span style=\"color:#c0c5ce;\">&quot;, query_params)}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{ Router::&lt;Route&gt;{{}} }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn RouterReferenceRoutesNested() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "nested-routes",
            a { href: "#nested-routes", class: "header", "Nested Routes" }
        }
        p { "When developing bigger applications we often want to nest routes within each" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">└ Settings\n</span><span style=\"color:#c0c5ce;\">  ├ General Settings (displayed when opening the settings)\n</span><span style=\"color:#c0c5ce;\">  ├ Change Password\n</span><span style=\"color:#c0c5ce;\">  └ Privacy Settings\n</span></pre>\n" }
        p { "We might want to map this structure to these paths and components:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">/settings\t\t  -&gt; Settings {{ GeneralSettings }}\n</span><span style=\"color:#c0c5ce;\">/settings/password -&gt; Settings {{ PWSettings }}\n</span><span style=\"color:#c0c5ce;\">/settings/privacy  -&gt; Settings {{ PrivacySettings }}\n</span></pre>\n" }
        p { "Nested routes allow us to do this without repeating /settings in every route." }
        h2 { id: "nesting",
            a { href: "#nesting", class: "header", "Nesting" }
        }
        p {
            "To nest routes, we use the  "
            code { "#[nest(\"path\")]" }
            " and  "
            code { "#[end_nest]" }
            " attributes."
        }
        p { "The path in nest must not:" }
        ol {
            li {
                "Contain a "
                a { href: "./#catch-all-segments", "" }
            }
            li {
                "Contain a "
                a { href: "./#query-segments", "" }
            }
        }
        p {
            "If you define a dynamic segment in a nest, it will be available to all child routes and layouts."
        }
        p {
            "To finish a nest, we use the  "
            code { "#[end_nest]" }
            " attribute or the end of the enum."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#65737e;\">// Skipping formatting allows you to indent nests\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Start the /blog nest\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">nest</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// You can nest as many times as you want\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">nest</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:id</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">            #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/post</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">            PostId {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// You must include parent dynamic segments in child variants\n</span><span style=\"color:#c0c5ce;\">                id: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// End nests manually with #[end_nest]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">end_nest</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:id</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The absolute route of BlogPost is /blog/:name\n</span><span style=\"color:#c0c5ce;\">        BlogPost {{\n</span><span style=\"color:#c0c5ce;\">            id: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Or nests are ended automatically at the end of the enum\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">BlogPost</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">PostId</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn RouterReferenceLayouts() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "layouts",
            a { href: "#layouts", class: "header", "Layouts" }
        }
        p {
            "Layouts allow you to wrap all child routes in a component. This can be useful when creating something like a header that will be used in many different routes."
        }
        p {
            "[ "
            code { "Outlet" }
            "]"
            code { "Outlet" }
            "]"
        }
        p {
            "This page is built with the Dioxus. It uses Layouts in several different places. Here is an outline of how layouts are used on the current page. Hover over different layouts to see what elements they are on the page."
        }
        LayoutsExplanation {}
        p { "Here is a more complete example of a layout wrapping the body of a page." }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">layout</span><span style=\"color:#c0c5ce;\">(Wrapper)]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        Index {{}},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Wrapper</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        header {{ &quot;</span><span style=\"color:#a3be8c;\">header</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The index route will be rendered here\n</span><span style=\"color:#c0c5ce;\">        Outlet::&lt;Route&gt; {{ }}\n</span><span style=\"color:#c0c5ce;\">        footer {{ &quot;</span><span style=\"color:#a3be8c;\">footer</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Index</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Index</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "The example above will output the following HTML (line breaks added for" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">&lt;header&gt;header&lt;</span><span style=\"background-color:#bf616a;color:#2b303b;\">/</span><span style=\"color:#c0c5ce;\">header&gt;\n</span><span style=\"color:#c0c5ce;\">&lt;h1&gt;Index&lt;</span><span style=\"background-color:#bf616a;color:#2b303b;\">/</span><span style=\"color:#c0c5ce;\">h1&gt;\n</span><span style=\"color:#c0c5ce;\">&lt;footer&gt;footer&lt;</span><span style=\"background-color:#bf616a;color:#2b303b;\">/</span><span style=\"color:#c0c5ce;\">footer&gt;\n</span></pre>\n" }
        h2 { id: "layouts-with-dynamic-segments",
            a { href: "#layouts-with-dynamic-segments", class: "header",
                "Layouts with dynamic segments"
            }
        }
        p {
            "You can combine layouts with "
            a { href: "./routes/nested", "" }
            " to create dynamic layouts with content that changes based on the current route."
        }
        p {
            "Just like routes, layouts components must accept a prop for each dynamic segment in the route. For example, if you have a route with a dynamic segment like  "
            code { "/:name" }
            ", your layout component must accept a  "
            code { "name" }
            " prop:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">nest</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:name</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">layout</span><span style=\"color:#c0c5ce;\">(Wrapper)]\n</span><span style=\"color:#c0c5ce;\">            #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">            Index {{\n</span><span style=\"color:#c0c5ce;\">                name: String,\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Wrapper</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">name</span><span style=\"color:#c0c5ce;\">: String) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        header {{ &quot;</span><span style=\"color:#a3be8c;\">Welcome {{name}}!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The index route will be rendered here\n</span><span style=\"color:#c0c5ce;\">        Outlet::&lt;Route&gt; {{ }}\n</span><span style=\"color:#c0c5ce;\">        footer {{ &quot;</span><span style=\"color:#a3be8c;\">footer</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Index</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">name</span><span style=\"color:#c0c5ce;\">: String) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">This is a homepage for {{name}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Or to get the full route, you can use the "
            a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/hooks/fn.use_route.html",
                ""
                code { "use_route" }
            }
            " hook."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone)]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">layout</span><span style=\"color:#c0c5ce;\">(Wrapper)]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/:name</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        Index {{\n</span><span style=\"color:#c0c5ce;\">            name: String,\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Wrapper</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> full_route = use_route::&lt;Route&gt;(cx).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        header {{ &quot;</span><span style=\"color:#a3be8c;\">Welcome to {{full_route}}!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The index route will be rendered here\n</span><span style=\"color:#c0c5ce;\">        Outlet::&lt;Route&gt; {{ }}\n</span><span style=\"color:#c0c5ce;\">        footer {{ &quot;</span><span style=\"color:#a3be8c;\">footer</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Index</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">name</span><span style=\"color:#c0c5ce;\">: String) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">This is a homepage for {{name}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn RouterReferenceNavigationIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "links--navigation",
            a { href: "#links--navigation", class: "header", "Links & Navigation" }
        }
        p { "When we split our app into pages, we need to provide our users with a way to" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">&lt;a href=&quot;</span><span style=\"color:#a3be8c;\">/other</span><span style=\"color:#c0c5ce;\">&quot;&gt;Link to an other page&lt;</span><span style=\"background-color:#bf616a;color:#2b303b;\">/</span><span style=\"color:#c0c5ce;\">a&gt;\n</span></pre>\n" }
        p { "However, we cannot do that when using the router for three reasons:" }
        ol {
            li { "Anchor tags make the browser load a new page from the server. This takes a" }
            li { "Navigation using anchor tags only works when the app is running inside a" }
            li { "Anchor tags cannot check if the target page exists. This means we cannot" }
        }
        p {
            "To solve these problems, the router provides us with a "
            code { "Link" }
            "]"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">NavBar</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        nav {{\n</span><span style=\"color:#c0c5ce;\">            ul {{\n</span><span style=\"color:#c0c5ce;\">                li {{\n</span><span style=\"color:#c0c5ce;\">                    Link {{\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The Link component will navigate to the route specified\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// in the target prop which is checked to exist at compile time\n</span><span style=\"color:#c0c5ce;\">                        to: Route::Home {{}},\n</span><span style=\"color:#c0c5ce;\">                        &quot;</span><span style=\"color:#a3be8c;\">Home</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        Outlet::&lt;Route&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "The  "
            code { "target" }
            " in the example above is similar to the  "
            code { "href" }
            " of a regular anchor"
            code { "NavigationTarget" }
            "]"
        }
        ul {
            li {
                "The example uses a Internal route. This is the most common type of navigation."
                code { "Routable" }
                "]"
            }
            li {
                "["
                code { "External" }
                "]"
            }
        }
        blockquote {
            p {
                "The "
                code { "Link" }
                "]"
            }
        }
    }
}
#[component(no_case_check)]
pub fn RouterReferenceNavigationProgrammatic() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "programmatic-navigation",
            a { href: "#programmatic-navigation", class: "header", "Programmatic Navigation" }
        }
        p { "Sometimes we want our application to navigate to another page without having the" }
        h2 { id: "using-a-navigator",
            a { href: "#using-a-navigator", class: "header", "Using a Navigator" }
        }
        p {
            "We can get a navigator with the "
            code { "use_navigator" }
            "]"
            code { "Navigator" }
            "]"
        }
        p {
            "We can use the "
            code { "Navigator" }
            "]"
        }
        ul {
            li {
                code { "push" }
                " will navigate to the target. It works like a regular anchor tag."
            }
            li {
                code { "replace" }
                " works like "
                code { "push" }
                ", except that it replaces the current history entry"
            }
            li {
                code { "Go back" }
                " works like the browser's back button."
            }
            li {
                code { "Go forward" }
                " works like the browser's forward button."
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Home</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> nav = </span><span style=\"color:#96b5b4;\">use_navigator</span><span style=\"color:#c0c5ce;\">(cx);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// push\n</span><span style=\"color:#c0c5ce;\">    nav.</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#c0c5ce;\">(Route::PageNotFound {{ route: vec![] }});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// replace\n</span><span style=\"color:#c0c5ce;\">    nav.</span><span style=\"color:#96b5b4;\">replace</span><span style=\"color:#c0c5ce;\">(Route::Home {{}});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// go back\n</span><span style=\"color:#c0c5ce;\">    nav.</span><span style=\"color:#96b5b4;\">go_back</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// go forward\n</span><span style=\"color:#c0c5ce;\">    nav.</span><span style=\"color:#96b5b4;\">go_forward</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Welcome to the Dioxus Blog!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "You might have noticed that, like "
            code { "Link" }
            "]"
            code { "Navigator" }
            "]"
            code { "push" }
            " and"
            code { "replace" }
            " functions take a "
            code { "NavigationTarget" }
            "]"
            code { "Internal" }
            "]"
            code { "External" }
            "]"
        }
        h2 { id: "external-navigation-targets",
            a { href: "#external-navigation-targets", class: "header",
                "External Navigation Targets"
            }
        }
        p {
            "Unlike a "
            code { "Link" }
            "]"
            code { "Navigator" }
            "]"
        }
        p { "This means, that under certain conditions, navigation to external targets can" }
    }
}
#[component(no_case_check)]
pub fn RouterReferenceHistoryProviders() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "history-providers",
            a { href: "#history-providers", class: "header", "History Providers" }
        }
        p {
            "[ "
            code { "HistoryProvider" }
            "]"
        }
        p {
            "The router provides two "
            code { "HistoryProvider" }
            "]"
        }
        ul {
            li {
                "The "
                code { "MemoryHistory" }
                "]"
            }
            li {
                "The "
                code { "WebHistory" }
                "]"
            }
        }
        p {
            "By default, the router uses the "
            code { "MemoryHistory" }
            "]"
            code { "WebHistory" }
            "]"
            code { "web" }
            " feature is active, but that is not guaranteed."
        }
        p { "You can override the default history:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        Router::&lt;Route&gt; {{\n</span><span style=\"color:#c0c5ce;\">            config: || RouterConfig::default().</span><span style=\"color:#96b5b4;\">history</span><span style=\"color:#c0c5ce;\">(WebHistory::default())\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
    }
}
#[component(no_case_check)]
pub fn RouterReferenceHistoryButtons() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "history-buttons",
            a { href: "#history-buttons", class: "header", "History Buttons" }
        }
        p { "Some platforms, like web browsers, provide users with an easy way to navigate" }
        p { "However, native platforms usually don't provide such amenities, which means that" }
        ul {
            li {
                a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.GoBackButton.html",
                    ""
                    code { "GoBackButton" }
                }
            }
            li {
                a { href: "https://docs.rs/dioxus-router/latest/dioxus_router/components/fn.GoForwardButton.html",
                    ""
                    code { "GoForwardButton" }
                }
            }
        }
        blockquote {
            p {
                "If you want to navigate through the history programmatically, take a look at"
                a { href: "./navigation/programmatic",
                    ""
                    code { "programmatic navigation" }
                }
                "."
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">HistoryNavigation</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        GoBackButton {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Back to the Past</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        GoForwardButton {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Back to the Future</span><span style=\"color:#c0c5ce;\">&quot; </span><span style=\"color:#65737e;\">/* You see what I did there? 😉 */\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "As you might know, browsers usually disable the back and forward buttons if" }
        p {
            "Importantly, neither "
            code { "WebHistory" }
            "]"
        }
        p { "However, in both cases, the router will just ignore button presses, if there is" }
        p {
            "Also, when using "
            code { "WebHistory" }
            "]"
        }
    }
}
#[component(no_case_check)]
pub fn RouterReferenceStaticGeneration() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "static-generation",
            a { href: "#static-generation", class: "header", "Static Generation" }
        }
        h2 { id: "getting-the-sitemap",
            a { href: "#getting-the-sitemap", class: "header", "Getting the Sitemap" }
        }
        p {
            "The "
            code { "Routable" }
            "]"
            code { "SITE_MAP" }
            "]"
        }
        p {
            "By default, the sitemap is a tree of (static or dynamic) RouteTypes, but it can be flattened into a list of individual routes with the  "
            code { ".flatten()" }
            " method."
        }
        h2 { id: "generating-a-sitemap",
            a { href: "#generating-a-sitemap", class: "header", "Generating a Sitemap" }
        }
        p {
            "To statically render pages, we need to flatten the route tree and generate a file for each route that contains only static segments:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_router::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_ssr::incremental::{{DefaultRenderer, IncrementalRendererConfig}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">tokio</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">main</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> renderer = IncrementalRendererConfig::new()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">static_dir</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">./static</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">build</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    println!(\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">SITE MAP:</span><span style=\"color:#96b5b4;\">\\n</span><span style=\"color:#d08770;\">{{}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        Route::</span><span style=\"color:#d08770;\">SITE_MAP\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">flat_map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">| route.</span><span style=\"color:#96b5b4;\">flatten</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">| {{\n</span><span style=\"color:#c0c5ce;\">                route\n</span><span style=\"color:#c0c5ce;\">                    .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">                    .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">segment</span><span style=\"color:#c0c5ce;\">| segment.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">                    .collect::&lt;Vec&lt;_&gt;&gt;()\n</span><span style=\"color:#c0c5ce;\">                    .</span><span style=\"color:#96b5b4;\">join</span><span style=\"color:#c0c5ce;\">(&quot;&quot;)\n</span><span style=\"color:#c0c5ce;\">            }})\n</span><span style=\"color:#c0c5ce;\">            .collect::&lt;Vec&lt;_&gt;&gt;()\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">join</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#96b5b4;\">\\n</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    pre_cache_static_routes::&lt;Route, _&gt;(\n</span><span style=\"color:#c0c5ce;\">        &amp;</span><span style=\"color:#b48ead;\">mut</span><span style=\"color:#c0c5ce;\"> renderer,\n</span><span style=\"color:#c0c5ce;\">        &amp;DefaultRenderer {{\n</span><span style=\"color:#c0c5ce;\">            before_body: </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;&lt;!DOCTYPE html&gt;\n</span><span style=\"color:#a3be8c;\">        &lt;html lang=&quot;en&quot;&gt;\n</span><span style=\"color:#a3be8c;\">        &lt;head&gt;\n</span><span style=\"color:#a3be8c;\">            &lt;meta charset=&quot;UTF-8&quot;&gt;\n</span><span style=\"color:#a3be8c;\">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n</span><span style=\"color:#a3be8c;\">            initial-scale=1.0&quot;&gt;\n</span><span style=\"color:#a3be8c;\">            &lt;title&gt;Dioxus Application&lt;/title&gt;\n</span><span style=\"color:#a3be8c;\">        &lt;/head&gt;\n</span><span style=\"color:#a3be8c;\">        &lt;body&gt;</span><span style=\"color:#c0c5ce;\">&quot;#\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">            after_body: </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;&lt;/body&gt;\n</span><span style=\"color:#a3be8c;\">        &lt;/html&gt;</span><span style=\"color:#c0c5ce;\">&quot;#\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">    )\n</span><span style=\"color:#c0c5ce;\">    .await\n</span><span style=\"color:#c0c5ce;\">    .</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Blog</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Blog</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Post</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">PostId: {{id}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">PostHome</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Post</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Home</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        div {{\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">Home</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">rustfmt</span><span style=\"color:#c0c5ce;\">::</span><span style=\"color:#bf616a;\">skip</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Debug, PartialEq, Routable)]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">nest</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        Blog {{}},\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/post/index</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        PostHome {{}},\n</span><span style=\"color:#c0c5ce;\">        #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/post/:id</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">        Post {{\n</span><span style=\"color:#c0c5ce;\">            id: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">end_nest</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    Home {{}},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        h2 { id: "example",
            a { href: "#example", class: "header", "Example" }
        }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages%2Ffullstack%2Fexamples%2Fstatic-hydrated",
                    ""
                }
            }
        }
    }
}
#[component(no_case_check)]
pub fn RouterReferenceRoutingUpdateCallback() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "routing-update-callback",
            a { href: "#routing-update-callback", class: "header", "Routing Update Callback" }
        }
        p {
            "In some cases, we might want to run custom code when the current route changes. For this reason, the "
            code { "RouterConfig" }
            "]"
            code { "on_update" }
            " field."
        }
        h2 { id: "how-does-the-callback-behave",
            a { href: "#how-does-the-callback-behave", class: "header",
                "How does the callback behave?"
            }
        }
        p {
            "The  "
            code { "on_update" }
            " is called whenever the current routing information changes. It is called after the router updated its internal state, but before dependent components and hooks are updated."
        }
        p {
            "If the callback returns a "
            code { "NavigationTarget" }
            "]"
            code { "on_update" }
            " again."
        }
        p {
            "If at any point the router encounters a navigation failure, it will go to the appropriate state without calling the  "
            code { "on_update" }
            ". It doesn't matter if the invalid target initiated the navigation, was found as a redirect target, or was returned by the  "
            code { "on_update" }
            " itself."
        }
        h2 { id: "code-example",
            a { href: "#code-example", class: "header", "Code Example" }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, Clone, PartialEq)]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    Index {{}},\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/home</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    Home {{}},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Home</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        p {{ &quot;</span><span style=\"color:#a3be8c;\">Home</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Index</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        p {{ &quot;</span><span style=\"color:#a3be8c;\">Index</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        Router::&lt;Route&gt; {{\n</span><span style=\"color:#c0c5ce;\">            config: || RouterConfig::default().</span><span style=\"color:#96b5b4;\">on_update</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">state</span><span style=\"color:#c0c5ce;\">|{{\n</span><span style=\"color:#c0c5ce;\">                (state.</span><span style=\"color:#96b5b4;\">current</span><span style=\"color:#c0c5ce;\">() == Route::Index {{}}).</span><span style=\"color:#96b5b4;\">then_some</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">                    NavigationTarget::Internal(Route::Home {{}})\n</span><span style=\"color:#c0c5ce;\">                )\n</span><span style=\"color:#c0c5ce;\">            }})\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn CookbookIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "cookbook",
            a { href: "#cookbook", class: "header", "Cookbook" }
        }
        p { "The cookbook contains common recipes for different patterns within Dioxus." }
        p { "There are a few different sections in the cookbook:" }
        ul {
            li {
                a { href: "cookbook/publishing", "" }
                " will teach you how to present your app in a variety of delicious forms."
            }
            li {
                "Explore the "
                a { href: "cookbook/antipatterns", "" }
                " section to discover what ingredients to avoid when preparing your application."
            }
            li {
                "Within "
                a { href: "cookbook/error_handling", "" }
                ", we'll master the fine art of managing spoiled ingredients in Dioxus."
            }
            li {
                "Take a culinary journey through "
                a { href: "cookbook/state", "" }
                ", where we'll explore the world of handling local, global, and external state in Dioxus."
            }
            li {
                a { href: "cookbook/integrations", "" }
                " will guide you how to seamlessly blend external libraries into your Dioxus culinary creations."
            }
            li {
                a { href: "cookbook/testing", "" }
                " explains how to examine the unique flavor of Dioxus-specific features, like components."
            }
            li {
                a { href: "cookbook/examples", "" }
                " is a curated list of delightful recipes that demonstrate the various ways of using Dioxus ingredients."
            }
            li {
                a { href: "cookbook/tailwind", "" }
                " reveals the secrets of combining your Tailwind and Dioxus ingredients into a complete meal. You will also learn about using other NPM ingredients (packages) with Dioxus."
            }
            li {
                "In the "
                a { href: "cookbook/custom_renderer", "" }
                " section, we embark on a cooking adventure, inventing new ways to cook with Dioxus!"
            }
            li {
                a { href: "cookbook/optimizing", "" }
                " will show you how to maximize the quality of your ingredients."
            }
        }
    }
}
#[component(no_case_check)]
pub fn CookbookPublishing() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "publishing",
            a { href: "#publishing", class: "header", "Publishing" }
        }
        p {
            "After you have build your application, you will need to publish it somewhere. This reference will outline different methods of publishing your desktop or web application."
        }
        h2 { id: "web-publishing-with-github-pages",
            a { href: "#web-publishing-with-github-pages", class: "header",
                "Web: Publishing with GitHub Pages"
            }
        }
        p {
            "Edit your  "
            code { "Dioxus.toml" }
            " to point your  "
            code { "out_dir" }
            " to the  "
            code { "docs" }
            " folder and the  "
            code { "base_path" }
            " to the name of your repo:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[application]\n</span><span style=\"color:#c0c5ce;\"># ...\n</span><span style=\"color:#c0c5ce;\">out_dir = &quot;</span><span style=\"color:#a3be8c;\">docs</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">[web.app]\n</span><span style=\"color:#c0c5ce;\">base_path = &quot;</span><span style=\"color:#a3be8c;\">your_repo</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
        p { "Then build your app and publish it to Github:" }
        ul {
            li {
                "Make sure GitHub Pages is set up for your repo to publish any static files in the docs directory"
            }
            li { "Build your app with:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx build --release\n</span></pre>\n" }
        ul {
            li { "Add and commit with git" }
            li { "Push to GitHub" }
        }
        h2 { id: "desktop-creating-an-installer",
            a { href: "#desktop-creating-an-installer", class: "header",
                "Desktop: Creating an installer"
            }
        }
        p {
            "Dioxus desktop app uses your operating system's WebView library, so it's portable to be distributed for other platforms."
        }
        p { "In this section, we'll cover how to bundle your app for macOS, Windows, and Linux." }
        h2 { id: "preparing-your-application-for-bundling",
            a {
                href: "#preparing-your-application-for-bundling",
                class: "header",
                "Preparing your application for bundling"
            }
        }
        p {
            "Depending on your platform, you may need to add some additional code to your  "
            code { "main.rs" }
            " file to make sure your app is ready for bundling. On Windows, you'll need to add the  "
            code { "#![windows_subsystem = \"windows\"]" }
            " attribute to your  "
            code { "main.rs" }
            " file to hide the terminal window that pops up when you run your app. "
            strong { "If you're developing on Windows, only use this when bundling." }
            " It will disable the terminal, so you will not get logs of any kind. You can gate it behind a feature, like so:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\"># Cargo.toml\n</span><span style=\"color:#c0c5ce;\">[features]\n</span><span style=\"color:#c0c5ce;\">bundle = []\n</span></pre>\n" }
        p {
            "And then your  "
            code { "main.rs" }
            ":"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#![</span><span style=\"color:#bf616a;\">cfg_attr</span><span style=\"color:#c0c5ce;\">(feature = &quot;</span><span style=\"color:#a3be8c;\">bundle</span><span style=\"color:#c0c5ce;\">&quot;, windows_subsystem = &quot;</span><span style=\"color:#a3be8c;\">windows</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span></pre>\n" }
        h2 { id: "install",
            a { href: "#install", class: "header", "Install " }
            code { "dioxus CLI" }
        }
        p {
            "The first thing we'll do is install the "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/cli",
                ""
            }
            ". This extension to cargo will make it very easy to package our app for the various platforms."
        }
        p { "To install, simply run" }
        p {
            code { "cargo install dioxus-cli" }
        }
        h2 { id: "building",
            a { href: "#building", class: "header", "Building" }
        }
        p {
            "To bundle your application you can simply run  "
            code { "dx bundle --release" }
            " (also add  "
            code { "--features bundle" }
            " if you're using that, see the "
            a { href: "#preparing-your-application-for-bundling", "" }
            " for more) to produce a final app with all the optimizations and assets builtin."
        }
        p {
            "Once you've ran the command, your app should be accessible in  "
            code { "dist/bundle/" }
            "."
        }
        p { "For example, a macOS app would look like this:" }
        p {
            img {
                src: "/static/images/publish.png",
                alt: "Published App",
                title: "",
            }
        }
        p {
            "Nice! And it's only 4.8 Mb – extremely lean!! Because Dioxus leverages your platform's native WebView, Dioxus apps are extremely memory efficient and won't waste your battery."
        }
        blockquote {
            p {
                "Note: not all CSS works the same on all platforms. Make sure to view your app's CSS on each platform – or web browser (Firefox, Chrome, Safari) before publishing."
            }
        }
    }
}
#[component(no_case_check)]
pub fn CookbookAntipatterns() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "antipatterns",
            a { href: "#antipatterns", class: "header", "Antipatterns" }
        }
        p {
            "This example shows what not to do and provides a reason why a given pattern is considered an \"AntiPattern\". Most anti-patterns are considered wrong for performance or code re-usability reasons."
        }
        h2 { id: "unnecessarily-nested-fragments",
            a { href: "#unnecessarily-nested-fragments", class: "header",
                "Unnecessarily Nested Fragments"
            }
        }
        p {
            "Fragments don't mount a physical element to the DOM immediately, so Dioxus must recurse into its children to find a physical DOM node. This process is called \"normalization\". This means that deeply nested fragments make Dioxus perform unnecessary work. Prefer one or two levels of fragments / nested components until presenting a true DOM element."
        }
        p {
            "Only Component and Fragment nodes are susceptible to this issue. Dioxus mitigates this with components by providing an API for registering shared state without the Context Provider pattern."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// ❌ Don&#39;t unnecessarily nest fragments\n</span><span style=\"color:#b48ead;\">let </span><span style=\"color:#c0c5ce;\">_ = cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">    Fragment {{\n</span><span style=\"color:#c0c5ce;\">        Fragment {{\n</span><span style=\"color:#c0c5ce;\">            Fragment {{\n</span><span style=\"color:#c0c5ce;\">                Fragment {{\n</span><span style=\"color:#c0c5ce;\">                    Fragment {{\n</span><span style=\"color:#c0c5ce;\">                        div {{ &quot;</span><span style=\"color:#a3be8c;\">Finally have a real node!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">                    }}\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ✅ Render shallow structures\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!(\n</span><span style=\"color:#c0c5ce;\">    div {{ &quot;</span><span style=\"color:#a3be8c;\">Finally have a real node!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">))\n</span></pre>\n",
        }
        h2 { id: "incorrect-iterator-keys",
            a { href: "#incorrect-iterator-keys", class: "header", "Incorrect Iterator Keys" }
        }
        p {
            "As described in the "
            a { href: "../reference/dynamic_rendering#the", "" }
            ", list items must have unique keys that are associated with the same items across renders. This helps Dioxus associate state with the contained components and ensures good diffing performance. Do not omit keys, unless you know that the list will never change."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> data: &amp;HashMap&lt;_, _&gt; = &amp;cx.props.data;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ❌ No keys\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    ul {{\n</span><span style=\"color:#c0c5ce;\">        data.</span><span style=\"color:#96b5b4;\">values</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">| rsx!(\n</span><span style=\"color:#c0c5ce;\">            li {{ &quot;</span><span style=\"color:#a3be8c;\">List item: {{value}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        ))\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ❌ Using index as keys\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    ul {{\n</span><span style=\"color:#c0c5ce;\">        cx.props.data.</span><span style=\"color:#96b5b4;\">values</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">enumerate</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|(</span><span style=\"color:#bf616a;\">index</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">)| rsx!(\n</span><span style=\"color:#c0c5ce;\">            li {{ key: &quot;</span><span style=\"color:#a3be8c;\">{{index}}</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">List item: {{value}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        ))\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// ✅ Using unique IDs as keys:\n</span><span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">    ul {{\n</span><span style=\"color:#c0c5ce;\">        cx.props.data.</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|(</span><span style=\"color:#bf616a;\">key</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">)| rsx!(\n</span><span style=\"color:#c0c5ce;\">            li {{ key: &quot;</span><span style=\"color:#a3be8c;\">{{key}}</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">List item: {{value}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        ))\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n",
        }
        h2 { id: "avoid-interior-mutability-in-props",
            a { href: "#avoid-interior-mutability-in-props", class: "header",
                "Avoid Interior Mutability in Props"
            }
        }
        p {
            "While it is technically acceptable to have a  "
            code { "Mutex" }
            " or a  "
            code { "RwLock" }
            " in the props, they will be difficult to use."
        }
        p {
            "Suppose you have a struct  "
            code { "User" }
            " containing the field  "
            code { "username: String" }
            ". If you pass a  "
            code { "Mutex<User>" }
            " prop to a  "
            code { "UserComponent" }
            " component, that component may wish to pass the username as a  "
            code { "&str" }
            " prop to a child component. However, it cannot pass that borrowed field down, since it only would live as long as the  "
            code { "Mutex" }
            "'s lock, which belongs to the  "
            code { "UserComponent" }
            " function. Therefore, the component will be forced to clone the  "
            code { "username" }
            " field."
        }
        h2 { id: "avoid-updating-state-during-render",
            a { href: "#avoid-updating-state-during-render", class: "header",
                "Avoid Updating State During Render"
            }
        }
        p {
            "Every time you update the state, Dioxus needs to re-render the component – this is inefficient! Consider refactoring your code to avoid this."
        }
        p {
            "Also, if you unconditionally update the state during render, it will be re-rendered in an infinite loop."
        }
    }
}
#[component(no_case_check)]
pub fn CookbookErrorHandling() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "error-handling",
            a { href: "#error-handling", class: "header", "Error handling" }
        }
        p {
            "A selling point of Rust for web development is the reliability of always knowing where errors can occur and being forced to handle them"
        }
        p {
            "However, we haven't talked about error handling at all in this guide! In this chapter, we'll cover some strategies in handling errors to ensure your app never crashes."
        }
        h2 { id: "the-simplest--returning-none",
            a { href: "#the-simplest--returning-none", class: "header",
                "The simplest – returning None"
            }
        }
        p {
            "Astute observers might have noticed that  "
            code { "Element" }
            " is actually a type alias for  "
            code { "Option<VNode>" }
            ". You don't need to know what a  "
            code { "VNode" }
            " is, but it's important to recognize that we could actually return nothing at all:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">\tNone\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p {
            "This lets us add in some syntactic sugar for operations we think "
            em { "shouldn't" }
            " fail, but we're still not confident enough to \"unwrap\" on."
        }
        blockquote {
            p {
                "The nature of  "
                code { "Option<VNode>" }
                " might change in the future as the  "
                code { "try" }
                " trait gets upgraded."
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// immediately return &quot;None&quot;\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> name = cx.</span><span style=\"color:#96b5b4;\">use_hook</span><span style=\"color:#c0c5ce;\">(|_| Some(&quot;</span><span style=\"color:#a3be8c;\">hi</span><span style=\"color:#c0c5ce;\">&quot;))?;\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        h2 { id: "early-return-on-result",
            a { href: "#early-return-on-result", class: "header", "Early return on result" }
        }
        p {
            "Because Rust can't accept both Options and Results with the existing try infrastructure, you'll need to manually handle Results. This can be done by converting them into Options or by explicitly handling them."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// Convert Result to Option\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> name = cx.</span><span style=\"color:#96b5b4;\">use_hook</span><span style=\"color:#c0c5ce;\">(|_| &quot;</span><span style=\"color:#a3be8c;\">1.234</span><span style=\"color:#c0c5ce;\">&quot;).</span><span style=\"color:#96b5b4;\">parse</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#c0c5ce;\">()?;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// Early return\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> count = cx.</span><span style=\"color:#96b5b4;\">use_hook</span><span style=\"color:#c0c5ce;\">(|_| &quot;</span><span style=\"color:#a3be8c;\">1.234</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> val = </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> count.</span><span style=\"color:#96b5b4;\">parse</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">\t\tOk(val) =&gt; val\n</span><span style=\"color:#c0c5ce;\">\t\tErr(err) =&gt; </span><span style=\"color:#b48ead;\">return</span><span style=\"color:#c0c5ce;\"> cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!{{ &quot;</span><span style=\"color:#a3be8c;\">Parsing failed</span><span style=\"color:#c0c5ce;\">&quot; }})\n</span><span style=\"color:#c0c5ce;\">\t}};\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Notice that while hooks in Dioxus do not like being called in conditionals or loops, they "
            em { "are" }
            " okay with early returns. Returning an error state early is a completely valid way of handling errors."
        }
        h2 { id: "match-results",
            a { href: "#match-results", class: "header", "Match results" }
        }
        p {
            "The next \"best\" way of handling errors in Dioxus is to match on the error locally. This is the most robust way of handling errors, though it doesn't scale to architectures beyond a single component."
        }
        p { "To do this, we simply have an error state built into our component:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> err = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || None);\n</span></pre>\n" }
        p {
            "Whenever we perform an action that generates an error, we'll set that error state. We can then match on the error in a number of ways (early return, return Element, etc)."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Commandline</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> error = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || None);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\tcx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#b48ead;\">match </span><span style=\"color:#c0c5ce;\">*error {{\n</span><span style=\"color:#c0c5ce;\">\t\tSome(error) =&gt; rsx!(\n</span><span style=\"color:#c0c5ce;\">\t\t\th1 {{ &quot;</span><span style=\"color:#a3be8c;\">An error occurred</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">\t\t)\n</span><span style=\"color:#c0c5ce;\">\t\tNone =&gt; rsx!(\n</span><span style=\"color:#c0c5ce;\">\t\t\tinput {{\n</span><span style=\"color:#c0c5ce;\">\t\t\t\toninput: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| error.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(Some(&quot;</span><span style=\"color:#a3be8c;\">bad thing happened!</span><span style=\"color:#c0c5ce;\">&quot;)),\n</span><span style=\"color:#c0c5ce;\">\t\t\t}}\n</span><span style=\"color:#c0c5ce;\">\t\t)\n</span><span style=\"color:#c0c5ce;\">\t}})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "passing-error-states-through-components",
            a {
                href: "#passing-error-states-through-components",
                class: "header",
                "Passing error states through components"
            }
        }
        p {
            "If you're dealing with a handful of components with minimal nesting, you can just pass the error handle into child components."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Commandline</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> error = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || None);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Some(error) = **error {{\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#b48ead;\">return</span><span style=\"color:#c0c5ce;\"> cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!{{ &quot;</span><span style=\"color:#a3be8c;\">An error occurred</span><span style=\"color:#c0c5ce;\">&quot; }});\n</span><span style=\"color:#c0c5ce;\">\t}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\tcx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!{{\n</span><span style=\"color:#c0c5ce;\">\t\tChild {{ error: error.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">() }}\n</span><span style=\"color:#c0c5ce;\">\t\tChild {{ error: error.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">() }}\n</span><span style=\"color:#c0c5ce;\">\t\tChild {{ error: error.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">() }}\n</span><span style=\"color:#c0c5ce;\">\t\tChild {{ error: error.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">() }}\n</span><span style=\"color:#c0c5ce;\">\t}})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Much like before, our child components can manually set the error during their own actions. The advantage to this pattern is that we can easily isolate error states to a few components at a time, making our app more predictable and robust."
        }
        h2 { id: "going-global",
            a { href: "#going-global", class: "header", "Going global" }
        }
        p {
            "A strategy for handling cascaded errors in larger apps is through signaling an error using global state. This particular pattern involves creating an \"error\" context, and then setting it wherever relevant. This particular method is not as \"sophisticated\" as React's error boundary, but it is more fitting for Rust."
        }
        p {
            "To get started, consider using a built-in hook like  "
            code { "use_context" }
            " and  "
            code { "use_context_provider" }
            " or Fermi. Of course, it's pretty easy to roll your own hook too."
        }
        p {
            "At the \"top\" of our architecture, we're going to want to explicitly declare a value that could be an error."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">InputError {{\n</span><span style=\"color:#c0c5ce;\">\tNone,\n</span><span style=\"color:#c0c5ce;\">\tTooLong,\n</span><span style=\"color:#c0c5ce;\">\tTooShort,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">static </span><span style=\"color:#d08770;\">INPUT_ERROR</span><span style=\"color:#c0c5ce;\">: Atom&lt;InputError&gt; = |_| InputError::None;\n</span></pre>\n" }
        p {
            "Then, in our top level component, we want to explicitly handle the possible error state for this part of the tree."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">TopLevel</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> error = </span><span style=\"color:#96b5b4;\">use_read</span><span style=\"color:#c0c5ce;\">(cx, </span><span style=\"color:#d08770;\">INPUT_ERROR</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> error {{\n</span><span style=\"color:#c0c5ce;\">\t\tTooLong =&gt; </span><span style=\"color:#b48ead;\">return</span><span style=\"color:#c0c5ce;\"> cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!{{ &quot;</span><span style=\"color:#a3be8c;\">FAILED: Too long!</span><span style=\"color:#c0c5ce;\">&quot; }}),\n</span><span style=\"color:#c0c5ce;\">\t\tTooShort =&gt; </span><span style=\"color:#b48ead;\">return</span><span style=\"color:#c0c5ce;\"> cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!{{ &quot;</span><span style=\"color:#a3be8c;\">FAILED: Too Short!</span><span style=\"color:#c0c5ce;\">&quot; }}),\n</span><span style=\"color:#c0c5ce;\">\t\t_ =&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">\t}}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Now, whenever a downstream component has an error in its actions, it can simply just set its own error state:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Commandline</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> set_error = </span><span style=\"color:#96b5b4;\">use_set</span><span style=\"color:#c0c5ce;\">(cx, </span><span style=\"color:#d08770;\">INPUT_ERROR</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\tcx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!{{\n</span><span style=\"color:#c0c5ce;\">\t\tinput {{\n</span><span style=\"color:#c0c5ce;\">\t\t\toninput: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|evt| {{\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t</span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> evt.value.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">() &gt; </span><span style=\"color:#d08770;\">20 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\t</span><span style=\"color:#96b5b4;\">set_error</span><span style=\"color:#c0c5ce;\">(InputError::TooLong);\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t}}\n</span><span style=\"color:#c0c5ce;\">\t\t\t}}\n</span><span style=\"color:#c0c5ce;\">\t\t}}\n</span><span style=\"color:#c0c5ce;\">\t}})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "This approach to error handling is best in apps that have \"well defined\" error states. Consider using a crate like  "
            code { "thiserror" }
            " or  "
            code { "anyhow" }
            " to simplify the generation of the error types."
        }
        p {
            "This pattern is widely popular in many contexts and is particularly helpful whenever your code generates a non-recoverable error. You can gracefully capture these \"global\" error states without panicking or mucking up state."
        }
    }
}
#[component(no_case_check)]
pub fn CookbookIntegrationsIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        p {
            "This section of the guide provides getting started guides for common tools used with Dioxus."
        }
        ul {
            li {
                a { href: "integrations/./logging", "" }
            }
            li {
                a { href: "integrations/./internationalization", "" }
            }
        }
    }
}
#[component(no_case_check)]
pub fn CookbookIntegrationsLogging() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "logging",
            a { href: "#logging", class: "header", "Logging" }
        }
        p {
            "Dioxus has a wide range of supported platforms, each with their own logging requirements. We'll discuss the different options available to you."
        }
        h4 { id: "the-log-crate",
            a { href: "#the-log-crate", class: "header", "The Log Crate" }
        }
        p {
            "The "
            a { href: "https://crates.io/crates/log", "" }
            " crate is the most universally recognized logging facade in Rust. It is also the easiest to work with in Dioxus; therefore we will be focusing on loggers that work with this crate."
        }
        p {
            "The log crate provides a variety of simple  "
            code { "println" }
            "-like macros with varying levels of severity. "
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    log::trace!(&quot;</span><span style=\"color:#a3be8c;\">trace</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    log::debug!(&quot;</span><span style=\"color:#a3be8c;\">debug</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    log::info!(&quot;</span><span style=\"color:#a3be8c;\">info</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    log::warn!(&quot;</span><span style=\"color:#a3be8c;\">warn</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    log::error!(&quot;</span><span style=\"color:#a3be8c;\">error</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p {
            "All the loggers provided on this page are, besides configuration and initialization, interfaced using these macros. Often you will also utilize the log crate's  "
            code { "LevelFilter" }
            " enum. This enum usually represents the lowest log severity you want your application to emit and can be loaded from a configuration file, environment variable, or other."
        }
        p {
            "For more information, visit log crate's "
            a { href: "https://docs.rs/log/latest/log/", "" }
            "."
        }
        h2 { id: "dioxus-logger",
            a { href: "#dioxus-logger", class: "header", "Dioxus Logger" }
        }
        p {
            a { href: "https://crates.io/crates/dioxus-logger", "" }
            " is a planned-to-be feature-rich logger that supports all of Dioxus' platforms. Currently only Desktop, Web, and any server-based targets work with Dioxus Logger."
        }
        p {
            "The easiest way to use Dioxus Logger is by calling the  "
            code { "init()" }
            " function:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">log::LevelFilter;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Init logger\n</span><span style=\"color:#c0c5ce;\">    dioxus_logger::init(LevelFilter::Info).</span><span style=\"color:#96b5b4;\">expect</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">failed to init logger</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Dioxus code\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p {
            "The  "
            code { "dioxus_logger::init()" }
            " function initializes Dioxus Logger with the log crate using the default configuration and provided  "
            code { "LevelFilter" }
            "."
        }
        h4 { id: "custom-format",
            a { href: "#custom-format", class: "header", "Custom Format" }
        }
        p {
            "Dioxus Logger allows you more control with the ability to set a custom format using the  "
            code { "new" }
            " function on the  "
            code { "DioxusLogger" }
            " struct:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">log::LevelFilter;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Init logger\n</span><span style=\"color:#c0c5ce;\">    dioxus_logger::DioxusLogger::new(LevelFilter::Info)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">use_format</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">[{{LEVEL}}] {{PATH}} - {{ARGS}}</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">build</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">expect</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">failed to init logger</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Dioxus code\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "In this example, we are building a new  "
            code { "DioxusLogger" }
            " struct, providing the  "
            code { "LevelFilter" }
            ", calling the  "
            code { "use_format()" }
            " function, and initializing the logger with the  "
            code { "build()" }
            " function (acts as  "
            code { "init()" }
            " in the previous example)."
        }
        p {
            "The key function call in this example is  "
            code { "use_format()" }
            ". This function takes a  "
            code { "&str" }
            " that specifies how you want your logs to be formatted. To specify a variable in the format, you wrap it's name in  "
            code { "{{}}" }
            "."
        }
        p { "The available variables are:" }
        ul {
            li {
                "LEVEL     - The "
                code { "LevelFilter" }
                " of the emitted log."
            }
            li { "PATH      - The file path of where the log was emitted, or the crate name." }
            li { "ARGS      - The arguments passed through the log macro." }
            li {
                "TIMESTAMP - A timestamp of when the log was emitted. (Requires "
                code { "timestamps" }
                " feature)"
            }
        }
        h4 { id: "timestamps",
            a { href: "#timestamps", class: "header", "Timestamps" }
        }
        p {
            "Another feature of Dioxus Logger is the ability to include timestamps with your logs. By default, this feature is disabled and has to be enabled by adding  "
            code { "timestamps" }
            " to your features section of the  "
            code { "dioxus-logger" }
            " dependency:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dioxus-logger = {{ version = &quot;</span><span style=\"color:#a3be8c;\">*</span><span style=\"color:#c0c5ce;\">&quot;, features = [&quot;</span><span style=\"color:#a3be8c;\">timestamps</span><span style=\"color:#c0c5ce;\">&quot;] }}\n</span></pre>\n" }
        p {
            "By enabling this feature, you gain access to the  "
            code { "TIMESTAMP" }
            " format variable."
        }
        h4 { id: "platform-intricacies",
            a { href: "#platform-intricacies", class: "header", "Platform Intricacies" }
        }
        p {
            "On web, Dioxus Logger will use "
            a { href: "https://crates.io/crates/web-sys", "" }
            " to interact with "
            code { "console.log()" }
            " to output your logs to the browser's console. On Desktop and server-based targets, Dioxus Logger will output using "
            code { "println()" }
            "."
        }
        h4 { id: "final-notes",
            a { href: "#final-notes", class: "header", "Final Notes" }
        }
        p {
            "Dioxus Logger is the preferred logger to use with Dioxus if it suites your needs. There are many more features to come and Dioxus Logger is planned to become an integral part of Dioxus. If there are any feature suggestions or issues with Dioxus Logger, feel free to reach out on the "
            a { href: "https://discord.gg/XgGxMSkvUM", "" }
            "!"
        }
        p {
            "For more information, visit Dioxus Logger's "
            a { href: "https://docs.rs/dioxus-logger/latest/dioxus_logger/", "" }
            "."
        }
        h2 { id: "desktop-and-server",
            a { href: "#desktop-and-server", class: "header", "Desktop and Server" }
        }
        p { "For Dioxus' desktop and server targets, you can generally use the logger of your choice." }
        p { "Some popular options are:" }
        ul {
            li {
                a { href: "https://crates.io/crates/env_logger", "" }
            }
            li {
                a { href: "https://crates.io/crates/simple_logger", "" }
            }
            li {
                a { href: "https://crates.io/crates/pretty_env_logger", "" }
                " "
            }
        }
        p { "To keep this guide short, we will not be covering the usage of these loggers." }
        p {
            "For a full list of popular log-based logging crates, visit "
            a { href: "https://docs.rs/log/latest/log/#available-logging-implementations",
                ""
            }
            " list in the log crate's docs."
        }
        h2 { id: "web",
            a { href: "#web", class: "header", "Web" }
        }
        p {
            a { href: "https://crates.io/crates/wasm-logger", "" }
            " is a logging interface that can be used with Dioxus' web platform."
        }
        p {
            "The easiest way to use WASM Logger is with the  "
            code { "init" }
            " function:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Init logger\n</span><span style=\"color:#c0c5ce;\">    wasm_logger::init(wasm_logger::Config::default());\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Dioxus code\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p {
            "This starts WASM Logger with a  "
            code { "LevelFilter" }
            " of  "
            code { "Debug" }
            ". "
        }
        p {
            "To specify a custom  "
            code { "LevelFilter" }
            ", build the  "
            code { "Config" }
            " struct:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">log::LevelFilter;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Init logger\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> log_config = wasm_logger::Config::new(LevelFilter::Info);\n</span><span style=\"color:#c0c5ce;\">    wasm_logger::init(log_config);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Dioxus code\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        h4 { id: "platform-intricacies",
            a { href: "#platform-intricacies", class: "header", "Platform Intricacies" }
        }
        p {
            "WASM Logger also uses the "
            a { href: "https://crates.io/crates/web-sys", "" }
            " crate to output to the console."
        }
        p {
            "For more information, visit wasm-logger's "
            a { href: "https://docs.rs/wasm-logger/latest/wasm_logger/", "" }
            "."
        }
        h2 { id: "android",
            a { href: "#android", class: "header", "Android" }
        }
        p {
            a { href: "https://crates.io/crates/android_logger", "" }
            " is a logging interface that can be used when targeting Android. Android Logger runs whenever an event "
            code { "native_activity_create" }
            " is called by the Android system:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">log::LevelFilter;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">android_logger::Config;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">native_activity_create</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    android_logger::init_once(\n</span><span style=\"color:#c0c5ce;\">        Config::default()\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">with_max_level</span><span style=\"color:#c0c5ce;\">(LevelFilter::Info)\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">with_tag</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">myapp</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "The  "
            code { "with_tag()" }
            " is what your app's logs will show as."
        }
        h4 { id: "viewing-logs",
            a { href: "#viewing-logs", class: "header", "Viewing Logs" }
        }
        p { "Android logs are sent to logcat. To use logcat through the Android debugger, run:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">adb -d logcat\n</span></pre>\n" }
        p { "Your Android device will need developer options/usb debugging enabled." }
        p {
            "For more information, visit android_logger's "
            a { href: "https://docs.rs/android_logger/latest/android_logger/", "" }
            "."
        }
        h2 { id: "ios",
            a { href: "#ios", class: "header", "iOS" }
        }
        p {
            "The current option for iOS is the "
            a { href: "https://crates.io/crates/oslog", "" }
            " crate. "
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Init logger\n</span><span style=\"color:#c0c5ce;\">    OsLogger::new(&quot;</span><span style=\"color:#a3be8c;\">com.example.test</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">level_filter</span><span style=\"color:#c0c5ce;\">(LevelFilter::Debug)\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">init</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">expect</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">failed to init logger</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Dioxus code\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h4 { id: "viewing-logs",
            a { href: "#viewing-logs", class: "header", "Viewing Logs" }
        }
        p { "You can view the emitted logs in Xcode. " }
        p {
            "For more information, visit "
            a { href: "https://crates.io/crates/oslog", "" }
            ". "
        }
    }
}
#[component(no_case_check)]
pub fn CookbookIntegrationsInternationalization() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "internationalization",
            a { href: "#internationalization", class: "header", "Internationalization" }
        }
        p {
            "If you application supports multiple languages, the "
            a { href: "https://github.com/DioxusLabs/dioxus-std", "" }
            " crate contains helpers to make working with translations in your application easier."
        }
        h2 { id: "the-full-code-for-internationalization",
            a {
                href: "#the-full-code-for-internationalization",
                class: "header",
                "The full code for internationalization"
            }
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_std::i18n::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_std::translate;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">std::str::FromStr;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    dioxus_web::launch(app);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">static </span><span style=\"color:#d08770;\">EN_US</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">str </span><span style=\"color:#c0c5ce;\">= </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;{{\n</span><span style=\"color:#a3be8c;\">    &quot;id&quot;: &quot;en-US&quot;,\n</span><span style=\"color:#a3be8c;\">    &quot;texts&quot;: {{\n</span><span style=\"color:#a3be8c;\">        &quot;messages&quot;: {{\n</span><span style=\"color:#a3be8c;\">            &quot;hello_world&quot;: &quot;Hello World!&quot;\n</span><span style=\"color:#a3be8c;\">        }},\n</span><span style=\"color:#a3be8c;\">        &quot;messages.hello&quot;: &quot;Hello {{name}}&quot;\n</span><span style=\"color:#a3be8c;\">    }}\n</span><span style=\"color:#a3be8c;\">}}</span><span style=\"color:#c0c5ce;\">&quot;#;\n</span><span style=\"color:#b48ead;\">static </span><span style=\"color:#d08770;\">ES_ES</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">str </span><span style=\"color:#c0c5ce;\">= </span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;{{\n</span><span style=\"color:#a3be8c;\">    &quot;id&quot;: &quot;es-ES&quot;,\n</span><span style=\"color:#a3be8c;\">    &quot;texts&quot;: {{\n</span><span style=\"color:#a3be8c;\">        &quot;messages&quot;: {{\n</span><span style=\"color:#a3be8c;\">            &quot;hello_world&quot;: &quot;Hola Mundo!&quot;\n</span><span style=\"color:#a3be8c;\">        }},\n</span><span style=\"color:#a3be8c;\">        &quot;messages.hello&quot;: &quot;Hola {{name}}&quot;\n</span><span style=\"color:#a3be8c;\">    }}\n</span><span style=\"color:#a3be8c;\">}}</span><span style=\"color:#c0c5ce;\">&quot;#;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(non_snake_case)]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Body</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> i18 = </span><span style=\"color:#96b5b4;\">use_i18</span><span style=\"color:#c0c5ce;\">(cx);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> change_to_english = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| i18.</span><span style=\"color:#96b5b4;\">set_language</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">en-US</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">parse</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> change_to_spanish = </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| i18.</span><span style=\"color:#96b5b4;\">set_language</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">es-ES</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">parse</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    render!(\n</span><span style=\"color:#c0c5ce;\">        button {{\n</span><span style=\"color:#c0c5ce;\">            onclick: change_to_english,\n</span><span style=\"color:#c0c5ce;\">            label {{\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">English</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        button {{\n</span><span style=\"color:#c0c5ce;\">            onclick: change_to_spanish,\n</span><span style=\"color:#c0c5ce;\">            label {{\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">Spanish</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        p {{ translate!(i18, &quot;</span><span style=\"color:#a3be8c;\">messages.hello_world</span><span style=\"color:#c0c5ce;\">&quot;) }}\n</span><span style=\"color:#c0c5ce;\">        p {{ translate!(i18, &quot;</span><span style=\"color:#a3be8c;\">messages.hello</span><span style=\"color:#c0c5ce;\">&quot;, name: &quot;</span><span style=\"color:#a3be8c;\">Dioxus</span><span style=\"color:#c0c5ce;\">&quot;)  }}\n</span><span style=\"color:#c0c5ce;\">    )\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#96b5b4;\">use_init_i18n</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">        cx,\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">en-US</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">parse</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">en-US</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">parse</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        || {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> en_us = Language::from_str(</span><span style=\"color:#d08770;\">EN_US</span><span style=\"color:#c0c5ce;\">).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> es_es = Language::from_str(</span><span style=\"color:#d08770;\">ES_ES</span><span style=\"color:#c0c5ce;\">).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            vec![en_us, es_es]\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    render!(Body {{}})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn CookbookStateIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "state-cookbook",
            a { href: "#state-cookbook", class: "header", "State Cookbook" }
        }
        ul {
            li {
                a { href: "state/external", "" }
            }
            li {
                a { href: "state/custom_hooks", "" }
            }
        }
    }
}
#[component(no_case_check)]
pub fn CookbookStateExternalIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "working-with-external-state",
            a { href: "#working-with-external-state", class: "header",
                "Working with External State"
            }
        }
        p {
            "This guide will help you integrate your Dioxus application with some external state like a different thread or a websocket connection."
        }
        h2 { id: "working-with-non-reactive-state",
            a { href: "#working-with-non-reactive-state", class: "header",
                "Working with non-reactive State"
            }
        }
        p {
            a { href: "external/../../reference/use_coroutine", "" }
            " are great tool for dealing with non-reactive (state you don't render directly) state within your application."
        }
        p {
            "You can store your state inside the coroutine async block and communicate with the coroutine with messages from any child components."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// import futures::StreamExt to use the next() method\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">futures::StreamExt;\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> response_state = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || None);\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> tx = </span><span style=\"color:#96b5b4;\">use_coroutine</span><span style=\"color:#c0c5ce;\">(cx, |</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">rx</span><span style=\"color:#c0c5ce;\">| {{\n</span><span style=\"color:#c0c5ce;\">    to_owned![response_state];\n</span><span style=\"color:#c0c5ce;\">    async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Define your state before the loop\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> state = reqwest::Client::new();\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> cache: HashMap&lt;String, String&gt; = HashMap::new();\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">loop </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// Loop and wait for the next message\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Some(request) = rx.</span><span style=\"color:#96b5b4;\">next</span><span style=\"color:#c0c5ce;\">().await {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// Resolve the message\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> response = </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Some(response) = cache.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">(&amp;request) {{\n</span><span style=\"color:#c0c5ce;\">                    response.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">                }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> response = state\n</span><span style=\"color:#c0c5ce;\">                        .</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">(&amp;request)\n</span><span style=\"color:#c0c5ce;\">                        .</span><span style=\"color:#96b5b4;\">send</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">                        .await\n</span><span style=\"color:#c0c5ce;\">                        .</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">                        .</span><span style=\"color:#96b5b4;\">text</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">                        .await\n</span><span style=\"color:#c0c5ce;\">                        .</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">                    cache.</span><span style=\"color:#96b5b4;\">insert</span><span style=\"color:#c0c5ce;\">(request, response.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">                    response\n</span><span style=\"color:#c0c5ce;\">                }};\n</span><span style=\"color:#c0c5ce;\">                response_state.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(Some(response));\n</span><span style=\"color:#c0c5ce;\">            }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">break</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}});\n</span><span style=\"color:#65737e;\">// Send a message to the coroutine\n</span><span style=\"color:#c0c5ce;\">tx.</span><span style=\"color:#96b5b4;\">send</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">https://example.com</span><span style=\"color:#c0c5ce;\">&quot;.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#65737e;\">// Get the current state of the coroutine\n</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> response = response_state.</span><span style=\"color:#96b5b4;\">get</span><span style=\"color:#c0c5ce;\">();\n</span></pre>\n",
        }
        h2 { id: "making-reactive-state-external",
            a { href: "#making-reactive-state-external", class: "header",
                "Making Reactive State External"
            }
        }
        p {
            "If you have some reactive state (state that is rendered), that you want to modify from another thread, you can use the "
            a { href: "https://github.com/DioxusLabs/dioxus-std/blob/master/src/utils/rw/use_rw.rs",
                ""
            }
            " hook in the "
            a { href: "https://github.com/DioxusLabs/dioxus-std", "" }
            " crate."
        }
        p {
            "The use_rw hook works like the use_ref hook, but it is Send + Sync which makes it possible to move the hook into another thread."
        }
    }
}
#[component(no_case_check)]
pub fn CookbookStateCustomHooksIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "custom-hooks",
            a { href: "#custom-hooks", class: "header", "Custom Hooks" }
        }
        p {
            "Hooks are a great way to encapsulate business logic. If none of the existing hooks work for your problem, you can write your own."
        }
        p {
            "When writing your hook, you can make a function that accepts  "
            code { "cx: &ScopeState" }
            " as a parameter to accept a scope with any Props."
        }
        h2 { id: "composing-hooks",
            a { href: "#composing-hooks", class: "header", "Composing Hooks" }
        }
        p {
            "To avoid repetition, you can encapsulate business logic based on existing hooks to create a new hook."
        }
        p {
            "For example, if many components need to access an  "
            code { "AppSettings" }
            " struct, you can create a \"shortcut\" hook:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">use_settings</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: &amp;ScopeState) -&gt; &amp;UseSharedState&lt;AppSettings&gt; {{\n</span><span style=\"color:#c0c5ce;\">    use_shared_state::&lt;AppSettings&gt;(cx).</span><span style=\"color:#96b5b4;\">expect</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">App settings not provided</span><span style=\"color:#c0c5ce;\">&quot;)\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p {
            "Or if you want to wrap a hook that persists reloads with the storage API, you can build on top of the use_ref hook to work with mutable state:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">gloo_storage::{{LocalStorage, Storage}};\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">serde::{{de::DeserializeOwned, Serialize}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">/// A persistent storage hook that can be used to store data across application reloads.\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">allow</span><span style=\"color:#c0c5ce;\">(clippy::needless_return)]\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">use_persistent</span><span style=\"color:#c0c5ce;\">&lt;T: Serialize + DeserializeOwned + Default + </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt;(\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: &amp;ScopeState,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// A unique key for the storage entry\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">key</span><span style=\"color:#c0c5ce;\">: impl ToString,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// A function that returns the initial value if the storage entry is empty\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">init</span><span style=\"color:#c0c5ce;\">: impl FnOnce() -&gt; T,\n</span><span style=\"color:#c0c5ce;\">) -&gt; &amp;UsePersistent&lt;T&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Use the use_ref hook to create a mutable state for the storage entry\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> state = </span><span style=\"color:#96b5b4;\">use_ref</span><span style=\"color:#c0c5ce;\">(cx, </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|| {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// This closure will run when the hook is created\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> key = key.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> value = LocalStorage::get(key.</span><span style=\"color:#96b5b4;\">as_str</span><span style=\"color:#c0c5ce;\">()).</span><span style=\"color:#96b5b4;\">ok</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap_or_else</span><span style=\"color:#c0c5ce;\">(init);\n</span><span style=\"color:#c0c5ce;\">        StorageEntry {{ key, value }}\n</span><span style=\"color:#c0c5ce;\">    }});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Wrap the state in a new struct with a custom API\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Note: We use use_hook here so that this hook is easier to use in closures in the rsx. Any values with the same lifetime as the ScopeState can be used in the closure without cloning.\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">use_hook</span><span style=\"color:#c0c5ce;\">(|| UsePersistent {{\n</span><span style=\"color:#c0c5ce;\">        inner: state.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">StorageEntry&lt;T&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">key</span><span style=\"color:#c0c5ce;\">: String,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">: T,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">/// Storage that persists across application reloads\n</span><span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">UsePersistent&lt;T: </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">inner</span><span style=\"color:#c0c5ce;\">: UseRef&lt;StorageEntry&lt;T&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">impl</span><span style=\"color:#c0c5ce;\">&lt;T: Serialize + DeserializeOwned + Clone + </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt; UsePersistent&lt;T&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">/// Returns a reference to the value\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">get</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">) -&gt; T {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.inner.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">().value.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">/// Sets the value\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">set</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">: T) {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> inner = </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.inner.</span><span style=\"color:#96b5b4;\">write</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Write the new value to local storage\n</span><span style=\"color:#c0c5ce;\">        LocalStorage::set(inner.key.</span><span style=\"color:#96b5b4;\">as_str</span><span style=\"color:#c0c5ce;\">(), &amp;value);\n</span><span style=\"color:#c0c5ce;\">        inner.value = value;\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "custom-hook-logic",
            a { href: "#custom-hook-logic", class: "header", "Custom Hook Logic" }
        }
        p {
            "You can use "
            a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.ScopeState.html#method.use_hook",
                ""
                code { "cx.use_hook" }
            }
            " to build your own hooks. In fact, this is what all the standard hooks are built on!"
        }
        p {
            code { "use_hook" }
            " accepts a single closure for initializing the hook. It will be only run the first time the component is rendered. The return value of that closure will be used as the value of the hook – Dioxus will take it, and store it for as long as the component is alive. On every render (not just the first one!), you will get a reference to this value."
        }
        blockquote {
            p {
                "Note: You can implement "
                a { href: "https://doc.rust-lang.org/std/ops/trait.Drop.html",
                    ""
                    code { "Drop" }
                }
                " for your hook value – it will be dropped then the component is unmounted (no longer in the UI)"
            }
        }
        p {
            "Inside the initialization closure, you will typically make calls to other  "
            code { "cx" }
            " methods. For example:"
        }
        ul {
            li {
                "The "
                code { "use_state" }
                " hook tracks state in the hook value, and uses "
                a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.ScopeState.html#method.schedule_update",
                    ""
                    code { "cx.schedule_update" }
                }
                " to make Dioxus re-render the component whenever it changes."
            }
        }
        p {
            "Here is a simplified implementation of the  "
            code { "use_state" }
            " hook:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">std::cell::RefCell;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">std::rc::Rc;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">std::sync::Arc;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">UseState&lt;T&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">: Rc&lt;RefCell&lt;T&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">update</span><span style=\"color:#c0c5ce;\">: Arc&lt;dyn Fn()&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">my_use_state</span><span style=\"color:#c0c5ce;\">&lt;T: </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: &amp;ScopeState, </span><span style=\"color:#bf616a;\">init</span><span style=\"color:#c0c5ce;\">: impl FnOnce() -&gt; T) -&gt; &amp;UseState&lt;T&gt; {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">use_hook</span><span style=\"color:#c0c5ce;\">(|| {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The update function will trigger a re-render in the component cx is attached to\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> update = cx.</span><span style=\"color:#96b5b4;\">schedule_update</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Create the initial state\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> value = Rc::new(RefCell::new(</span><span style=\"color:#96b5b4;\">init</span><span style=\"color:#c0c5ce;\">()));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">        UseState {{ value, update }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">impl</span><span style=\"color:#c0c5ce;\">&lt;T: Clone&gt; UseState&lt;T&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">) -&gt; T {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.value.</span><span style=\"color:#96b5b4;\">borrow</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">set</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">: T) {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Update the state\n</span><span style=\"color:#c0c5ce;\">        *</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.value.</span><span style=\"color:#96b5b4;\">borrow_mut</span><span style=\"color:#c0c5ce;\">() = value;\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Trigger a re-render on the component the state is from\n</span><span style=\"color:#c0c5ce;\">        (</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.update)();\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        ul {
            li {
                "The "
                code { "use_context" }
                " hook calls "
                a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.ScopeState.html#method.consume_context",
                    ""
                    code { "cx.consume_context" }
                }
                " (which would be expensive to call on every render) to get some context from the scope"
            }
        }
        p {
            "Here is an implementation of the  "
            code { "use_context" }
            " and  "
            code { "use_context_provider" }
            " hooks:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">use_context</span><span style=\"color:#c0c5ce;\">&lt;T: </span><span style=\"color:#b48ead;\">&#39;static </span><span style=\"color:#c0c5ce;\">+ Clone&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: &amp;ScopeState) -&gt; Option&lt;&amp;T&gt; {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">use_hook</span><span style=\"color:#c0c5ce;\">(|| cx.consume_context::&lt;T&gt;()).</span><span style=\"color:#96b5b4;\">as_ref</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">use_context_provider</span><span style=\"color:#c0c5ce;\">&lt;T: </span><span style=\"color:#b48ead;\">&#39;static </span><span style=\"color:#c0c5ce;\">+ Clone&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: &amp;ScopeState, </span><span style=\"color:#bf616a;\">f</span><span style=\"color:#c0c5ce;\">: impl FnOnce() -&gt; T) -&gt; &amp;T {{\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">use_hook</span><span style=\"color:#c0c5ce;\">(|| {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> val = </span><span style=\"color:#96b5b4;\">f</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Provide the context state to the scope\n</span><span style=\"color:#c0c5ce;\">        cx.</span><span style=\"color:#96b5b4;\">provide_context</span><span style=\"color:#c0c5ce;\">(val.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">        val\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        h2 { id: "hook-anti-patterns",
            a { href: "#hook-anti-patterns", class: "header", "Hook Anti-Patterns" }
        }
        p { "When writing a custom hook, you should avoid the following anti-patterns:" }
        ul {
            li {
                "!Clone Hooks: To allow hooks to be used within async blocks, the hooks must be Clone. To make a hook clone, you can wrap data in Rc or Arc and avoid lifetimes in hooks."
            }
        }
        p { "This version of use_state may seem more efficient, but it is not cloneable:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">std::cell::RefCell;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">std::rc::Rc;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">std::sync::Arc;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">UseState&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">, T&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">: &amp;</span><span style=\"color:#b48ead;\">&#39;a </span><span style=\"color:#c0c5ce;\">RefCell&lt;T&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">update</span><span style=\"color:#c0c5ce;\">: Arc&lt;dyn Fn()&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">my_use_state</span><span style=\"color:#c0c5ce;\">&lt;T: </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt;(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: &amp;ScopeState, </span><span style=\"color:#bf616a;\">init</span><span style=\"color:#c0c5ce;\">: impl FnOnce() -&gt; T) -&gt; UseState&lt;T&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// The update function will trigger a re-render in the component cx is attached to\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> update = cx.</span><span style=\"color:#96b5b4;\">schedule_update</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Create the initial state\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> value = cx.</span><span style=\"color:#96b5b4;\">use_hook</span><span style=\"color:#c0c5ce;\">(|| RefCell::new(</span><span style=\"color:#96b5b4;\">init</span><span style=\"color:#c0c5ce;\">()));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    UseState {{ value, update }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">impl</span><span style=\"color:#c0c5ce;\">&lt;T: Clone&gt; UseState&lt;&#39;_, T&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">get</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">) -&gt; T {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.value.</span><span style=\"color:#96b5b4;\">borrow</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">set</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">: T) {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Update the state\n</span><span style=\"color:#c0c5ce;\">        *</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.value.</span><span style=\"color:#96b5b4;\">borrow_mut</span><span style=\"color:#c0c5ce;\">() = value;\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Trigger a re-render on the component the state is from\n</span><span style=\"color:#c0c5ce;\">        (</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.update)();\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "If we try to use this hook in an async block, we will get a compile error:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">FutureComponent</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: &amp;ScopeState) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> my_state = </span><span style=\"color:#96b5b4;\">my_use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\tcx.</span><span style=\"color:#96b5b4;\">spawn</span><span style=\"color:#c0c5ce;\">({{\n</span><span style=\"color:#c0c5ce;\">\t\tto_owned![my_state];\n</span><span style=\"color:#c0c5ce;\">\t\tasync </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">\t\t\tmy_state.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\t\t}}\n</span><span style=\"color:#c0c5ce;\">\t}});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\ttodo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "But with the original version, we can use it in an async block:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">FutureComponent</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: &amp;ScopeState) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> my_state = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\tcx.</span><span style=\"color:#96b5b4;\">spawn</span><span style=\"color:#c0c5ce;\">({{\n</span><span style=\"color:#c0c5ce;\">\t\tto_owned![my_state];\n</span><span style=\"color:#c0c5ce;\">\t\tasync </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">\t\t\tmy_state.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\t\t}}\n</span><span style=\"color:#c0c5ce;\">\t}});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\ttodo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn CookbookTesting() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "testing",
            a { href: "#testing", class: "header", "Testing" }
        }
        p {
            "When building application or libraries with Dioxus, you may want to include some tests to check the behavior of parts of your application. This guide will teach you how to test different parts of your Dioxus application."
        }
        h2 { id: "component-testing",
            a { href: "#component-testing", class: "header", "Component Testing" }
        }
        p {
            "You can use a combination of "
            a { href: "https://docs.rs/pretty_assertions/latest/pretty_assertions/",
                ""
            }
            " and "
            a { href: "", "" }
            " to check that two snippets of rsx are equal:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">futures::FutureExt;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">std::{{cell::RefCell, sync::Arc}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">test</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">test</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#96b5b4;\">assert_rsx_eq</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">        rsx! {{\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">Hello world</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            div {{\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">Hello world</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        rsx! {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">for </span><span style=\"color:#c0c5ce;\">_ in </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">..</span><span style=\"color:#d08770;\">2 </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">                div {{\n</span><span style=\"color:#c0c5ce;\">                    &quot;</span><span style=\"color:#a3be8c;\">Hello world</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">    )\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">assert_rsx_eq</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">first</span><span style=\"color:#c0c5ce;\">: LazyNodes&lt;</span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt;, </span><span style=\"color:#bf616a;\">second</span><span style=\"color:#c0c5ce;\">: LazyNodes&lt;</span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt;) {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> first = dioxus_ssr::render_lazy(first);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> second = dioxus_ssr::render_lazy(second);\n</span><span style=\"color:#c0c5ce;\">    pretty_assertions::assert_str_eq!(first, second);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        h2 { id: "hook-testing",
            a { href: "#hook-testing", class: "header", "Hook Testing" }
        }
        p {
            "When creating libraries around Dioxus, it can be helpful to make tests for your "
            a { href: "./state/custom_hooks", "" }
            "."
        }
        p {
            "Dioxus does not currently have a full hook testing library, but you can build a bespoke testing framework by manually driving the virtual dom."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">futures::FutureExt;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">std::{{cell::RefCell, sync::Arc}};\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">test</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">test</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#96b5b4;\">test_hook</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">        |</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#96b5b4;\">use_ref</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">).</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        |</span><span style=\"color:#bf616a;\">value</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">proxy</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> proxy.generation {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#d08770;\">0 </span><span style=\"color:#c0c5ce;\">=&gt; {{\n</span><span style=\"color:#c0c5ce;\">                value.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#d08770;\">1 </span><span style=\"color:#c0c5ce;\">=&gt; {{\n</span><span style=\"color:#c0c5ce;\">                assert_eq!(*value.</span><span style=\"color:#96b5b4;\">read</span><span style=\"color:#c0c5ce;\">(), </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">                value.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#d08770;\">2</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#d08770;\">2 </span><span style=\"color:#c0c5ce;\">=&gt; {{\n</span><span style=\"color:#c0c5ce;\">                proxy.</span><span style=\"color:#96b5b4;\">rerun</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#d08770;\">3 </span><span style=\"color:#c0c5ce;\">=&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">            _ =&gt; todo!(),\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">        |</span><span style=\"color:#bf616a;\">proxy</span><span style=\"color:#c0c5ce;\">| assert_eq!(proxy.generation, </span><span style=\"color:#d08770;\">4</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">test_hook</span><span style=\"color:#c0c5ce;\">&lt;V: </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt;(\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">initialize</span><span style=\"color:#c0c5ce;\">: impl FnMut(&amp;</span><span style=\"color:#bf616a;\">ScopeState</span><span style=\"color:#c0c5ce;\">) -&gt; V + </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">check</span><span style=\"color:#c0c5ce;\">: impl FnMut(</span><span style=\"color:#bf616a;\">V</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">MockProxy</span><span style=\"color:#c0c5ce;\">) + </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">final_check</span><span style=\"color:#c0c5ce;\">: impl FnMut(</span><span style=\"color:#bf616a;\">MockProxy</span><span style=\"color:#c0c5ce;\">) + </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">) {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Props)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">MockAppComponent&lt;\n</span><span style=\"color:#c0c5ce;\">        I: FnMut(&amp;ScopeState) -&gt; V + </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        C: FnMut(V, MockProxy) + </span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        V,\n</span><span style=\"color:#c0c5ce;\">    &gt; {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">hook</span><span style=\"color:#c0c5ce;\">: RefCell&lt;I&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">check</span><span style=\"color:#c0c5ce;\">: RefCell&lt;C&gt;,\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">impl</span><span style=\"color:#c0c5ce;\">&lt;I: FnMut(&amp;ScopeState) -&gt; V, C: FnMut(V, MockProxy), V&gt; PartialEq\n</span><span style=\"color:#c0c5ce;\">        for MockAppComponent&lt;I, C, V&gt;\n</span><span style=\"color:#c0c5ce;\">    {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">eq</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">, _: &amp;</span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#c0c5ce;\">) -&gt; </span><span style=\"color:#b48ead;\">bool </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#d08770;\">true\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">mock_app</span><span style=\"color:#c0c5ce;\">&lt;I: FnMut(&amp;ScopeState) -&gt; V, C: FnMut(V, MockProxy), V&gt;(\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope&lt;MockAppComponent&lt;I, C, V&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">    ) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> value = cx.props.hook.</span><span style=\"color:#96b5b4;\">borrow_mut</span><span style=\"color:#c0c5ce;\">()(cx);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">        cx.props.check.</span><span style=\"color:#96b5b4;\">borrow_mut</span><span style=\"color:#c0c5ce;\">()(value, MockProxy::new(cx));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">        render! {{\n</span><span style=\"color:#c0c5ce;\">            div {{}}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> vdom = VirtualDom::new_with_props(\n</span><span style=\"color:#c0c5ce;\">        mock_app,\n</span><span style=\"color:#c0c5ce;\">        MockAppComponent {{\n</span><span style=\"color:#c0c5ce;\">            hook: RefCell::new(initialize),\n</span><span style=\"color:#c0c5ce;\">            check: RefCell::new(check),\n</span><span style=\"color:#c0c5ce;\">        }},\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#c0c5ce;\">_ = vdom.</span><span style=\"color:#96b5b4;\">rebuild</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">while</span><span style=\"color:#c0c5ce;\"> vdom.</span><span style=\"color:#96b5b4;\">wait_for_work</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">now_or_never</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">is_some</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let </span><span style=\"color:#c0c5ce;\">_ = vdom.</span><span style=\"color:#96b5b4;\">render_immediate</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#96b5b4;\">final_check</span><span style=\"color:#c0c5ce;\">(MockProxy::new(vdom.</span><span style=\"color:#96b5b4;\">base_scope</span><span style=\"color:#c0c5ce;\">()));\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">MockProxy {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">rerender</span><span style=\"color:#c0c5ce;\">: Arc&lt;dyn Fn()&gt;,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub </span><span style=\"color:#bf616a;\">generation</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#c0c5ce;\">MockProxy {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">new</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">scope</span><span style=\"color:#c0c5ce;\">: &amp;ScopeState) -&gt; </span><span style=\"color:#b48ead;\">Self </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> generation = scope.</span><span style=\"color:#96b5b4;\">generation</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> rerender = scope.</span><span style=\"color:#96b5b4;\">schedule_update</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">Self </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            rerender,\n</span><span style=\"color:#c0c5ce;\">            generation,\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">rerun</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">) {{\n</span><span style=\"color:#c0c5ce;\">        (</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.rerender)();\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        h2 { id: "end-to-end-testing",
            a { href: "#end-to-end-testing", class: "header", "End to End Testing" }
        }
        p {
            "You can use "
            a { href: "https://playwright.dev/", "" }
            " to create end to end tests for your dioxus application."
        }
        p {
            "In your  "
            code { "playwright.config.js" }
            ", you will need to run cargo run or dx serve instead of the default build command. Here is a snippet from the end to end web example:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">//...\n</span><span style=\"color:#c0c5ce;\">webServer: [\n</span><span style=\"color:#c0c5ce;\">    {{\n</span><span style=\"color:#c0c5ce;\">        cwd: path.</span><span style=\"color:#96b5b4;\">join</span><span style=\"color:#c0c5ce;\">(process.</span><span style=\"color:#96b5b4;\">cwd</span><span style=\"color:#c0c5ce;\">(), </span><span style=\"color:#b48ead;\">&#39;playwright</span><span style=\"color:#c0c5ce;\">-tests&#39;, &#39;web&#39;),\n</span><span style=\"color:#c0c5ce;\">        command: </span><span style=\"color:#b48ead;\">&#39;dx</span><span style=\"color:#c0c5ce;\"> serve&#39;,\n</span><span style=\"color:#c0c5ce;\">        port: </span><span style=\"color:#d08770;\">8080</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        timeout: </span><span style=\"color:#d08770;\">10 </span><span style=\"color:#c0c5ce;\">* </span><span style=\"color:#d08770;\">60 </span><span style=\"color:#c0c5ce;\">* </span><span style=\"color:#d08770;\">1000</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        reuseExistingServer: !process.env.</span><span style=\"color:#d08770;\">CI</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        stdout: &quot;</span><span style=\"color:#a3be8c;\">pipe</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">],\n</span></pre>\n",
        }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/playwright-tests/web",
                    ""
                }
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/playwright-tests/liveview",
                    ""
                }
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/playwright-tests/fullstack",
                    ""
                }
            }
        }
    }
}
#[component(no_case_check)]
pub fn CookbookExamples() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "examples",
            a { href: "#examples", class: "header", "Examples" }
        }
        p {
            "There's a "
            em { "lot" }
            " of these, so if you're having trouble implementing something, or you just want to see cool things"
        }
        p {
            "Each of the examples in the main repository also has a permalink attached, in case the main one doesn't work."
        }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/examples",
                    ""
                }
                " - "
                a { href: "(https://github.com/DioxusLabs/dioxus/tree/60ee82942c4decf67b6ad263f639553d9b7e28a9/examples)",
                    ""
                }
                " - This is the largest list."
            }
            li {
                "Package-specific examples from the "
                a { href: "https://github.com/DioxusLabs/dioxus/", "" }
                ". To learn more about these packages, search them up on "
                a { href: "https://crates.io/", "" }
                ", or navigate from the examples to the root of the package."
                ul {
                    li {
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/web/examples",
                            ""
                        }
                        " - "
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/60ee82942c4decf67b6ad263f639553d9b7e28a9/packages/web/examples",
                            ""
                        }
                    }
                    li {
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/fullstack/examples",
                            ""
                        }
                        " - "
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/60ee82942c4decf67b6ad263f639553d9b7e28a9/packages/fullstack/examples",
                            ""
                        }
                    }
                    li {
                        a { href: "shttps://github.com/DioxusLabs/dioxus/tree/master/packages/liveview/examples",
                            ""
                        }
                        " - "
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/60ee82942c4decf67b6ad263f639553d9b7e28a9/packages/liveview/examples",
                            ""
                        }
                    }
                    li {
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/router/examples",
                            ""
                        }
                        " - "
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/60ee82942c4decf67b6ad263f639553d9b7e28a9/packages/router/examples",
                            ""
                        }
                    }
                    li {
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/dioxus-tui/examples",
                            ""
                        }
                        " - "
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/60ee82942c4decf67b6ad263f639553d9b7e28a9/packages/dioxus-tui/examples",
                            ""
                        }
                    }
                    li {
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/rink/examples",
                            ""
                        }
                        " - "
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/60ee82942c4decf67b6ad263f639553d9b7e28a9/packages/rink/examples",
                            ""
                        }
                    }
                    li {
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/rsx-rosetta/examples",
                            ""
                        }
                        " - "
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/60ee82942c4decf67b6ad263f639553d9b7e28a9/packages/rsx-rosetta/examples",
                            ""
                        }
                    }
                    li {
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/native-core/examples",
                            ""
                        }
                        " - "
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/60ee82942c4decf67b6ad263f639553d9b7e28a9/packages/native-core/examples",
                            ""
                        }
                    }
                    li {
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/signals/examples",
                            ""
                        }
                        " - "
                        a { href: "https://github.com/DioxusLabs/dioxus/tree/60ee82942c4decf67b6ad263f639553d9b7e28a9/packages/signals/examples",
                            ""
                        }
                        " - This is unreleased, but it's a very exciting project, so stay tuned!"
                    }
                }
            }
            li {
                "The "
                a { href: "https://github.com/DioxusLabs/example-projects", "" }
                " repository. It might be deprecated/removed in the future though. See "
                a { href: "https://github.com/DioxusLabs/example-projects/issues/25",
                    ""
                }
                "."
            }
        }
    }
}
#[component(no_case_check)]
pub fn CookbookTailwind() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "tailwind",
            a { href: "#tailwind", class: "header", "Tailwind" }
        }
        p {
            "You can style your Dioxus application with whatever CSS framework you choose, or just write vanilla CSS."
        }
        p {
            "One popular option for styling your Dioxus application is "
            a { href: "https://tailwindcss.com/", "" }
            ". Tailwind allows you to style your elements with CSS utility classes. This guide will show you how to setup tailwind CSS with your Dioxus application."
        }
        h2 { id: "setup",
            a { href: "#setup", class: "header", "Setup" }
        }
        ol {
            li {
                p { "Install the Dioxus CLI:" }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo install --git https:</span><span style=\"color:#65737e;\">//github.com/DioxusLabs/cli\n</span></pre>\n" }
            }
            li {
                p { "Install npm: https://docs.npmjs.com/downloading-and-installing-node-js-and-npm" }
            }
            li {
                p { "Install the tailwind css cli: https://tailwindcss.com/docs/installation" }
            }
            li {
                p { "Initialize the tailwind css project:" }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">npx tailwindcss init\n</span></pre>\n" }
                p {
                    "This should create a  "
                    code { "tailwind.config.js" }
                    " file in the root of the project."
                }
            }
            li {
                p {
                    "Edit the  "
                    code { "tailwind.config.js" }
                    " file to include rust files:"
                }
                CodeBlock {
                    contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">module.exports = {{\n</span><span style=\"color:#c0c5ce;\">    mode: &quot;</span><span style=\"color:#a3be8c;\">all</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    content: [\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// include all rust, html and css files in the src directory\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">./src/**/*.{{rs,html,css}}</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// include all html files in the output (dist) directory\n</span><span style=\"color:#c0c5ce;\">        &quot;</span><span style=\"color:#a3be8c;\">./dist/**/*.html</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    ],\n</span><span style=\"color:#c0c5ce;\">    theme: {{\n</span><span style=\"color:#c0c5ce;\">        extend: {{}},\n</span><span style=\"color:#c0c5ce;\">    }},\n</span><span style=\"color:#c0c5ce;\">    plugins: [],\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
                }
            }
            li {
                p {
                    "Create a  "
                    code { "input.css" }
                    " file with the following content:"
                }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">@tailwind base;\n</span><span style=\"color:#c0c5ce;\">@tailwind components;\n</span><span style=\"color:#c0c5ce;\">@tailwind utilities;\n</span></pre>\n" }
            }
            li {
                p {
                    "Create a  "
                    code { "Dioxus.toml" }
                    " file with the following content that links to the  "
                    code { "tailwind.css" }
                    " file:"
                }
                CodeBlock {
                    contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[application]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># App (Project) Name\n</span><span style=\"color:#c0c5ce;\">name = &quot;</span><span style=\"color:#a3be8c;\">Tailwind CSS + Dioxus</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># Dioxus App Default Platform\n</span><span style=\"color:#c0c5ce;\"># desktop, web, mobile, ssr\n</span><span style=\"color:#c0c5ce;\">default_platform = &quot;</span><span style=\"color:#a3be8c;\">web</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># `build` &amp; `serve` dist path\n</span><span style=\"color:#c0c5ce;\">out_dir = &quot;</span><span style=\"color:#a3be8c;\">dist</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># resource (public) file folder\n</span><span style=\"color:#c0c5ce;\">asset_dir = &quot;</span><span style=\"color:#a3be8c;\">public</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">[web.app]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># </span><span style=\"color:#d08770;\">HTML</span><span style=\"color:#c0c5ce;\"> title tag content\n</span><span style=\"color:#c0c5ce;\">title = &quot;</span><span style=\"color:#a3be8c;\">dioxus | ⛺</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">[web.watcher]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># when watcher trigger, regenerate the `index.html`\n</span><span style=\"color:#c0c5ce;\">reload_html = </span><span style=\"color:#d08770;\">true\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># which files or dirs will be watcher monitoring\n</span><span style=\"color:#c0c5ce;\">watch_path = [&quot;</span><span style=\"color:#a3be8c;\">src</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">public</span><span style=\"color:#c0c5ce;\">&quot;]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># uncomment line below </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> using Router\n</span><span style=\"color:#c0c5ce;\"># index_on_404 = </span><span style=\"color:#d08770;\">true\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># include `assets` in web platform\n</span><span style=\"color:#c0c5ce;\">[web.resource]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># </span><span style=\"color:#d08770;\">CSS</span><span style=\"color:#c0c5ce;\"> style file\n</span><span style=\"color:#c0c5ce;\">style = [&quot;</span><span style=\"color:#a3be8c;\">/tailwind.css</span><span style=\"color:#c0c5ce;\">&quot;]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># Javascript code file\n</span><span style=\"color:#c0c5ce;\">script = []\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">[web.resource.dev]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># serve: [dev-server] only\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># </span><span style=\"color:#d08770;\">CSS</span><span style=\"color:#c0c5ce;\"> style file\n</span><span style=\"color:#c0c5ce;\">style = []\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># Javascript code file\n</span><span style=\"color:#c0c5ce;\">script = []\n</span></pre>\n",
                }
            }
        }
        h3 { id: "bonus-steps",
            a { href: "#bonus-steps", class: "header", "Bonus Steps" }
        }
        ol {
            li {
                p { "Install the tailwind css vs code extension" }
            }
            li {
                p {
                    "Go to the settings for the extension and find the experimental regex support section. Edit the setting.json file to look like this:"
                }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">&quot;</span><span style=\"color:#a3be8c;\">tailwindCSS.experimental.classRegex</span><span style=\"color:#c0c5ce;\">&quot;: [&quot;</span><span style=\"color:#a3be8c;\">class: </span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">(.*)</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#c0c5ce;\">&quot;],\n</span><span style=\"color:#c0c5ce;\">&quot;</span><span style=\"color:#a3be8c;\">tailwindCSS.includeLanguages</span><span style=\"color:#c0c5ce;\">&quot;: {{\n</span><span style=\"color:#c0c5ce;\">    &quot;</span><span style=\"color:#a3be8c;\">rust</span><span style=\"color:#c0c5ce;\">&quot;: &quot;</span><span style=\"color:#a3be8c;\">html</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">}},\n</span></pre>\n" }
            }
        }
        h2 { id: "development",
            a { href: "#development", class: "header", "Development" }
        }
        ul {
            li {
                p {
                    "Run the following command in the root of the project to start the tailwind css compiler:"
                }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">npx tailwindcss -i ./input.css -o ./public/tailwind.css --watch\n</span></pre>\n" }
            }
        }
        h3 { id: "web",
            a { href: "#web", class: "header", "Web" }
        }
        ul {
            li {
                p {
                    "Run the following command in the root of the project to start the dioxus dev server:"
                }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx serve --hot-reload\n</span></pre>\n" }
            }
            li {
                p {
                    "Open the browser to "
                    a { href: "http://localhost:8080", "" }
                    "."
                }
            }
        }
        h3 { id: "desktop",
            a { href: "#desktop", class: "header", "Desktop" }
        }
        ul {
            li {
                p {
                    "Add a custom head pointing to the generated tailwind CSS file in your  "
                    code { "main" }
                    ". It looks like:"
                }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dioxus_desktop::launch_cfg(\n</span><span style=\"color:#c0c5ce;\">  App,\n</span><span style=\"color:#c0c5ce;\">  dioxus_desktop::Config::new()\n</span><span style=\"color:#c0c5ce;\">    .</span><span style=\"color:#96b5b4;\">with_custom_head</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#b48ead;\">r</span><span style=\"color:#c0c5ce;\">#</span><span style=\"color:#a3be8c;\">&quot;&lt;link rel=&quot;stylesheet&quot; href=&quot;public/tailwind.css&quot;&gt;</span><span style=\"color:#c0c5ce;\">&quot;#.</span><span style=\"color:#96b5b4;\">to_string</span><span style=\"color:#c0c5ce;\">()))\n</span></pre>\n" }
            }
            li {
                p { "Launch the dioxus desktop app:" }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo run\n</span></pre>\n" }
            }
        }
    }
}
#[component(no_case_check)]
pub fn CookbookCustomRenderer() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "custom-renderer",
            a { href: "#custom-renderer", class: "header", "Custom Renderer" }
        }
        p {
            "Dioxus is an incredibly portable framework for UI development. The lessons, knowledge, hooks, and components you acquire over time can always be used for future projects. However, sometimes those projects cannot leverage a supported renderer or you need to implement your own better renderer."
        }
        p {
            "Great news: the design of the renderer is entirely up to you! We provide suggestions and inspiration with the 1st party renderers, but only really require processing  "
            code { "Mutations" }
            " and sending  "
            code { "UserEvents" }
            "."
        }
        h2 { id: "the-specifics",
            a { href: "#the-specifics", class: "header", "The specifics:" }
        }
        p { "Implementing the renderer is fairly straightforward. The renderer needs to:" }
        ol {
            li { "Handle the stream of edits generated by updates to the virtual DOM" }
            li { "Register listeners and pass events into the virtual DOM's event system" }
        }
        p {
            "Essentially, your renderer needs to process edits and generate events to update the VirtualDOM. From there, you'll have everything needed to render the VirtualDOM to the screen."
        }
        p {
            "Internally, Dioxus handles the tree relationship, diffing, memory management, and the event system, leaving as little as possible required for renderers to implement themselves."
        }
        p {
            "For reference, check out the "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/interpreter",
                ""
            }
            " or "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/dioxus-tui",
                ""
            }
            " as a starting point for your custom renderer."
        }
        h2 { id: "templates",
            a { href: "#templates", class: "header", "Templates" }
        }
        p {
            "Dioxus is built around the concept of "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/prelude/struct.Template.html",
                ""
            }
            ". Templates describe a UI tree known at compile time with dynamic parts filled at runtime. This is useful internally to make skip diffing static nodes, but it is also useful for the renderer to reuse parts of the UI tree. This can be useful for things like a list of items. Each item could contain some static parts and some dynamic parts. The renderer can use the template to create a static part of the UI once, clone it for each element in the list, and then fill in the dynamic parts."
        }
        h2 { id: "mutations",
            a { href: "#mutations", class: "header", "Mutations" }
        }
        p {
            "The  "
            code { "Mutation" }
            " type is a serialized enum that represents an operation that should be applied to update the UI. The variants roughly follow this set:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Mutation {{\n</span><span style=\"color:#c0c5ce;\">\tAppendChildren,\n</span><span style=\"color:#c0c5ce;\">\tAssignId,\n</span><span style=\"color:#c0c5ce;\">\tCreatePlaceholder,\n</span><span style=\"color:#c0c5ce;\">\tCreateTextNode,\n</span><span style=\"color:#c0c5ce;\">\tHydrateText,\n</span><span style=\"color:#c0c5ce;\">\tLoadTemplate,\n</span><span style=\"color:#c0c5ce;\">\tReplaceWith,\n</span><span style=\"color:#c0c5ce;\">\tReplacePlaceholder,\n</span><span style=\"color:#c0c5ce;\">\tInsertAfter,\n</span><span style=\"color:#c0c5ce;\">\tInsertBefore,\n</span><span style=\"color:#c0c5ce;\">\tSetAttribute,\n</span><span style=\"color:#c0c5ce;\">\tSetText,\n</span><span style=\"color:#c0c5ce;\">\tNewEventListener,\n</span><span style=\"color:#c0c5ce;\">\tRemoveEventListener,\n</span><span style=\"color:#c0c5ce;\">\tRemove,\n</span><span style=\"color:#c0c5ce;\">\tPushRoot,\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "The Dioxus diffing mechanism operates as a "
            a { href: "https://en.wikipedia.org/wiki/Stack_machine", "" }
            " where the "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/enum.Mutation.html#variant.LoadTemplate",
                ""
            }
            ", "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/enum.Mutation.html#variant.CreatePlaceholder",
                ""
            }
            ", and "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/enum.Mutation.html#variant.CreateTextNode",
                ""
            }
            " mutations pushes a new \"real\" DOM node onto the stack and "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/enum.Mutation.html#variant.AppendChildren",
                ""
            }
            ", "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/enum.Mutation.html#variant.InsertAfter",
                ""
            }
            ", "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/enum.Mutation.html#variant.InsertBefore",
                ""
            }
            ", "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/enum.Mutation.html#variant.ReplacePlaceholder",
                ""
            }
            ", and "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/enum.Mutation.html#variant.ReplaceWith",
                ""
            }
            " all remove nodes from the stack."
        }
        h2 { id: "node-storage",
            a { href: "#node-storage", class: "header", "Node storage" }
        }
        p {
            "Dioxus saves and loads elements with IDs. Inside the VirtualDOM, this is just tracked as as a u64."
        }
        p {
            "Whenever a  "
            code { "CreateElement" }
            " edit is generated during diffing, Dioxus increments its node counter and assigns that new element its current NodeCount. The RealDom is responsible for remembering this ID and pushing the correct node when id is used in a mutation. Dioxus reclaims the IDs of elements when removed. To stay in sync with Dioxus you can use a sparse Vec (Vec"
        }
        h3 { id: "an-example",
            a { href: "#an-example", class: "header", "An Example" }
        }
        p {
            "For the sake of understanding, let's consider this example – a very simple UI declaration:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">rsx!( h1 {{&quot;</span><span style=\"color:#a3be8c;\">count: {{x}}</span><span style=\"color:#c0c5ce;\">&quot;}} )\n</span></pre>\n" }
        h4 { id: "building-templates",
            a { href: "#building-templates", class: "header", "Building Templates" }
        }
        p {
            "The above rsx will create a template that contains one static h1 tag and a placeholder for a dynamic text node. The template contains the static parts of the UI, and ids for the dynamic parts along with the paths to access them."
        }
        p { "The template will look something like this:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">Template {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// Some id that is unique for the entire project\n</span><span style=\"color:#c0c5ce;\">\tname: &quot;</span><span style=\"color:#a3be8c;\">main.rs:1:1:0</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// The root nodes of the template\n</span><span style=\"color:#c0c5ce;\">\troots: &amp;[\n</span><span style=\"color:#c0c5ce;\">\t\tTemplateNode::Element {{\n</span><span style=\"color:#c0c5ce;\">\t\t\ttag: &quot;</span><span style=\"color:#a3be8c;\">h1</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">\t\t\tnamespace: None,\n</span><span style=\"color:#c0c5ce;\">\t\t\tattrs: &amp;[],\n</span><span style=\"color:#c0c5ce;\">\t\t\tchildren: &amp;[\n</span><span style=\"color:#c0c5ce;\">\t\t\t\tTemplateNode::DynamicText {{\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\tid: </span><span style=\"color:#d08770;\">0\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t}},\n</span><span style=\"color:#c0c5ce;\">\t\t\t],\n</span><span style=\"color:#c0c5ce;\">\t\t}}\n</span><span style=\"color:#c0c5ce;\">\t],\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// the path to each of the dynamic nodes\n</span><span style=\"color:#c0c5ce;\">\tnode_paths: &amp;[\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#65737e;\">// the path to dynamic node with a id of 0\n</span><span style=\"color:#c0c5ce;\">\t\t&amp;[\n</span><span style=\"color:#c0c5ce;\">\t\t\t</span><span style=\"color:#65737e;\">// on the first root node\n</span><span style=\"color:#c0c5ce;\">\t\t\t</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">\t\t\t</span><span style=\"color:#65737e;\">// the first child of the root node\n</span><span style=\"color:#c0c5ce;\">\t\t\t</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">\t\t]\n</span><span style=\"color:#c0c5ce;\">\t],\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// the path to each of the dynamic attributes\n</span><span style=\"color:#c0c5ce;\">\tattr_paths: &amp;</span><span style=\"color:#b48ead;\">&#39;a </span><span style=\"color:#c0c5ce;\">[&amp;</span><span style=\"color:#b48ead;\">&#39;a </span><span style=\"color:#c0c5ce;\">[</span><span style=\"color:#b48ead;\">u8</span><span style=\"color:#c0c5ce;\">]],\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        blockquote {
            p {
                "For more detailed docs about the structure of templates see the "
                a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/prelude/struct.Template.html",
                    ""
                }
            }
        }
        p {
            "This template will be sent to the renderer in the "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/struct.Mutations.html#structfield.templates",
                ""
            }
            " supplied with the mutations the first time it is used. Any time the renderer encounters a "
            a { href: "https://docs.rs/dioxus-core/latest/dioxus_core/enum.Mutation.html#variant.LoadTemplate",
                ""
            }
            " mutation after this, it should clone the template and store it in the given id."
        }
        p {
            "For dynamic nodes and dynamic text nodes, a placeholder node should be created and inserted into the UI so that the node can be modified later."
        }
        p { "In HTML renderers, this template could look like this:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">&lt;h1&gt;&quot;&quot;&lt;/h1&gt;\n</span></pre>\n" }
        h4 { id: "applying-mutations",
            a { href: "#applying-mutations", class: "header", "Applying Mutations" }
        }
        p {
            "After the renderer has created all of the new templates, it can begin to process the mutations."
        }
        p {
            "When the renderer starts, it should contain the Root node on the stack and store the Root node with an id of 0. The Root node is the top-level node of the UI. In HTML, this is the  "
            code { "<div id=\"main\">" }
            " element."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">instructions: []\n</span><span style=\"color:#c0c5ce;\">stack: [\n</span><span style=\"color:#c0c5ce;\">\tRootNode,\n</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">nodes: [\n</span><span style=\"color:#c0c5ce;\">\tRootNode,\n</span><span style=\"color:#c0c5ce;\">]\n</span></pre>\n" }
        p {
            "The first mutation is a  "
            code { "LoadTemplate" }
            " mutation. This tells the renderer to load a root from the template with the given id. The renderer will then push the root node of the template onto the stack and store it with an id for later. In this case, the root node is an h1 element."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">instructions: [\n</span><span style=\"color:#c0c5ce;\">\tLoadTemplate {{\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#65737e;\">// the id of the template\n</span><span style=\"color:#c0c5ce;\">\t\tname: &quot;</span><span style=\"color:#a3be8c;\">main.rs:1:1:0</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#65737e;\">// the index of the root node in the template\n</span><span style=\"color:#c0c5ce;\">\t\tindex: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#65737e;\">// the id to store\n</span><span style=\"color:#c0c5ce;\">\t\tid: ElementId(</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">\t}}\n</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">stack: [\n</span><span style=\"color:#c0c5ce;\">\tRootNode,\n</span><span style=\"color:#c0c5ce;\">\t&lt;h1&gt;&quot;&quot;&lt;/h1&gt;,\n</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">nodes: [\n</span><span style=\"color:#c0c5ce;\">\tRootNode,\n</span><span style=\"color:#c0c5ce;\">\t&lt;h1&gt;&quot;&quot;&lt;/h1&gt;,\n</span><span style=\"color:#c0c5ce;\">]\n</span></pre>\n",
        }
        p {
            "Next, Dioxus will create the dynamic text node. The diff algorithm decides that this node needs to be created, so Dioxus will generate the Mutation  "
            code { "HydrateText" }
            ". When the renderer receives this instruction, it will navigate to the placeholder text node in the template and replace it with the new text."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">instructions: [\n</span><span style=\"color:#c0c5ce;\">\tLoadTemplate {{\n</span><span style=\"color:#c0c5ce;\">\t\tname: &quot;</span><span style=\"color:#a3be8c;\">main.rs:1:1:0</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">\t\tindex: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">\t\tid: ElementId(</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">\t}},\n</span><span style=\"color:#c0c5ce;\">\tHydrateText {{\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#65737e;\">// the id to store the text node\n</span><span style=\"color:#c0c5ce;\">\t\tid: ElementId(</span><span style=\"color:#d08770;\">2</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#65737e;\">// the text to set\n</span><span style=\"color:#c0c5ce;\">\t\ttext: &quot;</span><span style=\"color:#a3be8c;\">count: 0</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">\t}}\n</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">stack: [\n</span><span style=\"color:#c0c5ce;\">\tRootNode,\n</span><span style=\"color:#c0c5ce;\">\t&lt;h1&gt;&quot;</span><span style=\"color:#a3be8c;\">count: 0</span><span style=\"color:#c0c5ce;\">&quot;&lt;/h1&gt;,\n</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">nodes: [\n</span><span style=\"color:#c0c5ce;\">\tRootNode,\n</span><span style=\"color:#c0c5ce;\">\t&lt;h1&gt;&quot;</span><span style=\"color:#a3be8c;\">count: 0</span><span style=\"color:#c0c5ce;\">&quot;&lt;/h1&gt;,\n</span><span style=\"color:#c0c5ce;\">\t&quot;</span><span style=\"color:#a3be8c;\">count: 0</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">]\n</span></pre>\n",
        }
        p {
            "Remember, the h1 node is not attached to anything (it is unmounted) so Dioxus needs to generate an Edit that connects the h1 node to the Root. It depends on the situation, but in this case, we use  "
            code { "AppendChildren" }
            ". This pops the text node off the stack, leaving the Root element as the next element on the stack."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">instructions: [\n</span><span style=\"color:#c0c5ce;\">\tLoadTemplate {{\n</span><span style=\"color:#c0c5ce;\">\t\tname: &quot;</span><span style=\"color:#a3be8c;\">main.rs:1:1:0</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">\t\tindex: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">\t\tid: ElementId(</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">\t}},\n</span><span style=\"color:#c0c5ce;\">\tHydrateText {{\n</span><span style=\"color:#c0c5ce;\">\t\tid: ElementId(</span><span style=\"color:#d08770;\">2</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">\t\ttext: &quot;</span><span style=\"color:#a3be8c;\">count: 0</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">\t}},\n</span><span style=\"color:#c0c5ce;\">\tAppendChildren {{\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#65737e;\">// the id of the parent node\n</span><span style=\"color:#c0c5ce;\">\t\tid: ElementId(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#65737e;\">// the number of nodes to pop off the stack and append\n</span><span style=\"color:#c0c5ce;\">\t\tm: </span><span style=\"color:#d08770;\">1\n</span><span style=\"color:#c0c5ce;\">\t}}\n</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">stack: [\n</span><span style=\"color:#c0c5ce;\">\tRootNode,\n</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">nodes: [\n</span><span style=\"color:#c0c5ce;\">\tRootNode,\n</span><span style=\"color:#c0c5ce;\">\t&lt;h1&gt;&quot;</span><span style=\"color:#a3be8c;\">count: 0</span><span style=\"color:#c0c5ce;\">&quot;&lt;/h1&gt;,\n</span><span style=\"color:#c0c5ce;\">\t&quot;</span><span style=\"color:#a3be8c;\">count: 0</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">]\n</span></pre>\n",
        }
        p { "Over time, our stack looked like this:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[Root]\n</span><span style=\"color:#c0c5ce;\">[Root, &lt;h1&gt;&quot;&quot;&lt;/h1&gt;]\n</span><span style=\"color:#c0c5ce;\">[Root, &lt;h1&gt;&quot;</span><span style=\"color:#a3be8c;\">count: 0</span><span style=\"color:#c0c5ce;\">&quot;&lt;/h1&gt;]\n</span><span style=\"color:#c0c5ce;\">[Root]\n</span></pre>\n" }
        p {
            "Conveniently, this approach completely separates the Virtual DOM and the Real DOM. Additionally, these edits are serializable, meaning we can even manage UIs across a network connection. This little stack machine and serialized edits make Dioxus independent of platform specifics."
        }
        p {
            "Dioxus is also really fast. Because Dioxus splits the diff and patch phase, it's able to make all the edits to the RealDOM in a very short amount of time (less than a single frame) making rendering very snappy. It also allows Dioxus to cancel large diffing operations if higher priority work comes in while it's diffing."
        }
        p {
            "This little demo serves to show exactly how a Renderer would need to process a mutation stream to build UIs."
        }
        h2 { id: "event-loop",
            a { href: "#event-loop", class: "header", "Event loop" }
        }
        p {
            "Like most GUIs, Dioxus relies on an event loop to progress the VirtualDOM. The VirtualDOM itself can produce events as well, so it's important for your custom renderer can handle those too."
        }
        p {
            "The code for the WebSys implementation is straightforward, so we'll add it here to demonstrate how simple an event loop is:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\"> async </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">run</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">) -&gt; dioxus_core::error::Result&lt;()&gt; {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// Push the body element onto the WebsysDom&#39;s stack machine\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> websys_dom = </span><span style=\"color:#b48ead;\">crate</span><span style=\"color:#c0c5ce;\">::new::WebsysDom::new(</span><span style=\"color:#96b5b4;\">prepare_websys_dom</span><span style=\"color:#c0c5ce;\">());\n</span><span style=\"color:#c0c5ce;\">\twebsys_dom.stack.</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#c0c5ce;\">(root_node);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// Rebuild or hydrate the virtualdom\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> mutations = </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.internal_dom.</span><span style=\"color:#96b5b4;\">rebuild</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\twebsys_dom.</span><span style=\"color:#96b5b4;\">apply_mutations</span><span style=\"color:#c0c5ce;\">(mutations);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#65737e;\">// Wait for updates from the real dom and progress the virtual dom\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">loop </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> user_input_future = websys_dom.</span><span style=\"color:#96b5b4;\">wait_for_event</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> internal_event_future = </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.internal_dom.</span><span style=\"color:#96b5b4;\">wait_for_work</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#b48ead;\">match </span><span style=\"color:#96b5b4;\">select</span><span style=\"color:#c0c5ce;\">(user_input_future, internal_event_future).await {{\n</span><span style=\"color:#c0c5ce;\">\t\t\tEither::Left((_, _)) =&gt; {{\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> mutations = </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.internal_dom.</span><span style=\"color:#96b5b4;\">work_with_deadline</span><span style=\"color:#c0c5ce;\">(|| </span><span style=\"color:#d08770;\">false</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\t\t\t\twebsys_dom.</span><span style=\"color:#96b5b4;\">apply_mutations</span><span style=\"color:#c0c5ce;\">(mutations);\n</span><span style=\"color:#c0c5ce;\">\t\t\t}},\n</span><span style=\"color:#c0c5ce;\">\t\t\tEither::Right((event, _)) =&gt; websys_dom.</span><span style=\"color:#96b5b4;\">handle_event</span><span style=\"color:#c0c5ce;\">(event),\n</span><span style=\"color:#c0c5ce;\">\t\t}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">\t\t</span><span style=\"color:#65737e;\">// render\n</span><span style=\"color:#c0c5ce;\">\t}}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "It's important to decode what the real events are for your event system into Dioxus' synthetic event system (synthetic meaning abstracted). This simply means matching your event type and creating a Dioxus  "
            code { "UserEvent" }
            " type. Right now, the virtual event system is modeled almost entirely around the HTML spec, but we are interested in slimming it down."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">virtual_event_from_websys_event</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">event</span><span style=\"color:#c0c5ce;\">: &amp;web_sys::Event) -&gt; VirtualEvent {{\n</span><span style=\"color:#c0c5ce;\">\t</span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> event.</span><span style=\"color:#96b5b4;\">type_</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">as_str</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">\t\t&quot;</span><span style=\"color:#a3be8c;\">keydown</span><span style=\"color:#c0c5ce;\">&quot; =&gt; {{\n</span><span style=\"color:#c0c5ce;\">\t\t\t</span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> event: web_sys::KeyboardEvent = event.</span><span style=\"color:#96b5b4;\">clone</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">dyn_into</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\t\t\tUserEvent::KeyboardEvent(UserEvent {{\n</span><span style=\"color:#c0c5ce;\">\t\t\t\tscope_id: None,\n</span><span style=\"color:#c0c5ce;\">\t\t\t\tpriority: EventPriority::Medium,\n</span><span style=\"color:#c0c5ce;\">\t\t\t\tname: &quot;</span><span style=\"color:#a3be8c;\">keydown</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t</span><span style=\"color:#65737e;\">// This should be whatever element is focused\n</span><span style=\"color:#c0c5ce;\">\t\t\t\telement: Some(ElementId(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">)),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\tdata: Arc::new(KeyboardData{{\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\tchar_code: event.</span><span style=\"color:#96b5b4;\">char_code</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\tkey: event.</span><span style=\"color:#96b5b4;\">key</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\tkey_code: event.</span><span style=\"color:#96b5b4;\">key_code</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\talt_key: event.</span><span style=\"color:#96b5b4;\">alt_key</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\tctrl_key: event.</span><span style=\"color:#96b5b4;\">ctrl_key</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\tmeta_key: event.</span><span style=\"color:#96b5b4;\">meta_key</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\tshift_key: event.</span><span style=\"color:#96b5b4;\">shift_key</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\tlocation: event.</span><span style=\"color:#96b5b4;\">location</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\trepeat: event.</span><span style=\"color:#96b5b4;\">repeat</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t\twhich: event.</span><span style=\"color:#96b5b4;\">which</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">\t\t\t\t}})\n</span><span style=\"color:#c0c5ce;\">\t\t\t}})\n</span><span style=\"color:#c0c5ce;\">\t\t}}\n</span><span style=\"color:#c0c5ce;\">\t\t_ =&gt; todo!()\n</span><span style=\"color:#c0c5ce;\">\t}}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "custom-raw-elements",
            a { href: "#custom-raw-elements", class: "header", "Custom raw elements" }
        }
        p {
            "If you need to go as far as relying on custom elements/attributes for your renderer – you totally can. This still enables you to use Dioxus' reactive nature, component system, shared state, and other features, but will ultimately generate different nodes. All attributes and listeners for the HTML and SVG namespace are shuttled through helper structs that essentially compile away. You can drop in your elements any time you want, with little hassle. However, you must be sure your renderer can handle the new namespace."
        }
        p {
            "For more examples and information on how to create custom namespaces, see the "
            a { href: "https://github.com/DioxusLabs/dioxus/blob/master/packages/html/README.md#how-to-extend-it",
                ""
                code { "dioxus_html" }
                " crate"
            }
            "."
        }
        h1 { id: "native-core",
            a { href: "#native-core", class: "header", "Native Core" }
        }
        p {
            "If you are creating a renderer in rust, the "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/native-core",
                ""
            }
            " crate provides some utilities to implement a renderer. It provides an abstraction over Mutations and Templates and contains helpers that can handle the layout and text editing for you."
        }
        h2 { id: "the-realdom",
            a { href: "#the-realdom", class: "header", "The RealDom" }
        }
        p {
            "The  "
            code { "RealDom" }
            " is a higher-level abstraction over updating the Dom. It uses an entity component system to manage the state of nodes. This system allows you to modify insert and modify arbitrary components on nodes. On top of this, the RealDom provides a way to manage a tree of nodes, and the State trait provides a way to automatically add and update these components when the tree is modified. It also provides a way to apply  "
            code { "Mutations" }
            " to the RealDom."
        }
        h3 { id: "example",
            a { href: "#example", class: "header", "Example" }
        }
        p { "Let's build a toy renderer with borders, size, and text color." }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx!{{\n</span><span style=\"color:#c0c5ce;\">\tdiv{{\n</span><span style=\"color:#c0c5ce;\">\t\tcolor: &quot;</span><span style=\"color:#a3be8c;\">red</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">\t\tp{{\n</span><span style=\"color:#c0c5ce;\">\t\t\tborder: &quot;</span><span style=\"color:#a3be8c;\">1px solid black</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">\t\t\t&quot;</span><span style=\"color:#a3be8c;\">hello world</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\t\t}}\n</span><span style=\"color:#c0c5ce;\">\t}}\n</span><span style=\"color:#c0c5ce;\">}})\n</span></pre>\n" }
        p {
            "In this tree, the color depends on the parent's color. The layout depends on the children's layout, the current text, and the text size. The border depends on only the current node."
        }
        p { "In the following diagram arrows represent dataflow:" }
        p {
            a { href: "https://mermaid.live/edit#pako:eNqllV1vgjAUhv8K6W4wkQVa2QdLdrHsdlfukmSptEhjoaSWqTH-9xVwONAKst70g5739JzzlO5BJAgFAYi52EQJlsr6fAszS7d1sVhKnCdWJDJFt6peLVs5-9owohK7HFrVcFJ_pxnpmK8VVvRkTJikkWIiaxy1dhP23bUwW1WW5WbPrrqJ4ziR4EJ6dtVN2ls5y1ZztePUcrWZFCvqVEcPPDffvlyS1XoLIQnVgnVvVPR6FU9Zc-6dV453ojjOPbuetRJ57gIeXQR3cez7rjtteZyZQ2j5MqmjqwE0ZW0VKx9RKtgpFewp1aw3sXXFy6TWgiYlv8mfq1scD8ofbBCAfQg8_AMBOAyBxzEIwA4CxgQ99QbQkjnD2KT7_CfxGF8_9WXQEsq5sDZCcjICOXRCri4h6r3NA38Q6Jdi1EOx5w3DGDYYI6MUvJFjM3VoGHUeGoMd6mBnDmh2E3fo7O4Yhf0x4OkBmIKUyhQzol_GfbkcApXQlIYg0EOC5SoEYXbQ-3ChxHyXRSBQsqBTUOREx_7OsAY3BUGM-VqvUsKUkB_1U6vf05gtweEHTk4_HQ",
                ""
                img {
                    src: "https://mermaid.ink/img/pako:eNqllV1vgjAUhv8K6W4wkQVa2QdLdrHsdlfukmSptEhjoaSWqTH-9xVwONAKst70g5739JzzlO5BJAgFAYi52EQJlsr6fAszS7d1sVhKnCdWJDJFt6peLVs5-9owohK7HFrVcFJ_pxnpmK8VVvRkTJikkWIiaxy1dhP23bUwW1WW5WbPrrqJ4ziR4EJ6dtVN2ls5y1ZztePUcrWZFCvqVEcPPDffvlyS1XoLIQnVgnVvVPR6FU9Zc-6dV453ojjOPbuetRJ57gIeXQR3cez7rjtteZyZQ2j5MqmjqwE0ZW0VKx9RKtgpFewp1aw3sXXFy6TWgiYlv8mfq1scD8ofbBCAfQg8_AMBOAyBxzEIwA4CxgQ99QbQkjnD2KT7_CfxGF8_9WXQEsq5sDZCcjICOXRCri4h6r3NA38Q6Jdi1EOx5w3DGDYYI6MUvJFjM3VoGHUeGoMd6mBnDmh2E3fo7O4Yhf0x4OkBmIKUyhQzol_GfbkcApXQlIYg0EOC5SoEYXbQ-3ChxHyXRSBQsqBTUOREx_7OsAY3BUGM-VqvUsKUkB_1U6vf05gtweEHTk4_HQ?type=png",
                    alt: "",
                    title: "",
                }
            }
        }
        p {
            "To help in building a Dom, native-core provides the State trait and a RealDom struct. The State trait provides a way to describe how states in a node depend on other states in its relatives. By describing how to update a single node from its relations, native-core will derive a way to update the states of all nodes for you. Once you have a state you can provide it as a generic to RealDom. RealDom provides all of the methods to interact and update your new dom."
        }
        p {
            "Native Core cannot create all of the required methods for the State trait, but it can derive some of them. To implement the State trait, you must implement the following methods and let the  "
            code { "#[partial_derive_state]" }
            " macro handle the rest:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#65737e;\">// All states must derive Component (https://docs.rs/shipyard/latest/shipyard/derive.Component.html)\n</span><span style=\"color:#65737e;\">// They also must implement Default or provide a custom implementation of create in the State trait\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Default, Component)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">MyState;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">/// Derive some of the boilerplate for the State implementation\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">partial_derive_state</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#c0c5ce;\">State </span><span style=\"color:#b48ead;\">for </span><span style=\"color:#c0c5ce;\">MyState {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// The states of the parent nodes this state depends on\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">ParentDependencies = ();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// The states of the child nodes this state depends on\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">ChildDependencies = (</span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#c0c5ce;\">,);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// The states of the current node this state depends on\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">NodeDependencies = ();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// The parts of the current text, element, or placeholder node in the tree that this state depends on\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">const </span><span style=\"color:#d08770;\">NODE_MASK</span><span style=\"color:#c0c5ce;\">: NodeMaskBuilder&lt;</span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt; = NodeMaskBuilder::new();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// How to update the state of the current node based on the state of the parent nodes, child nodes, and the current node\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Returns true if the node was updated and false if the node was not updated\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">update</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(\n</span><span style=\"color:#c0c5ce;\">        &amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The view of the current node limited to the parts this state depends on\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_node_view</span><span style=\"color:#c0c5ce;\">: NodeView&lt;()&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The state of the current node that this state depends on\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_node</span><span style=\"color:#c0c5ce;\">: &lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">NodeDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The state of the parent nodes that this state depends on\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_parent</span><span style=\"color:#c0c5ce;\">: Option&lt;&lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">ParentDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The state of the child nodes that this state depends on\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_children</span><span style=\"color:#c0c5ce;\">: Vec&lt;&lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">ChildDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// The context of the current node used to pass global state into the tree\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_context</span><span style=\"color:#c0c5ce;\">: &amp;SendAnyMap,\n</span><span style=\"color:#c0c5ce;\">    ) -&gt; </span><span style=\"color:#b48ead;\">bool </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        todo!()\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// partial_derive_state will generate a default implementation of all the other methods\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p { "Lets take a look at how to implement the State trait for a simple renderer." }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">FontSize(</span><span style=\"color:#b48ead;\">f64</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">// All states need to derive Component\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Default, Debug, Copy, Clone, Component)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">Size(</span><span style=\"color:#b48ead;\">f64</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#b48ead;\">f64</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#65737e;\">/// Derive some of the boilerplate for the State implementation\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">partial_derive_state</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#c0c5ce;\">State </span><span style=\"color:#b48ead;\">for </span><span style=\"color:#c0c5ce;\">Size {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">ParentDependencies = ();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// The size of the current node depends on the size of its children\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">ChildDependencies = (</span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#c0c5ce;\">,);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">NodeDependencies = ();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Size only cares about the width, height, and text parts of the current node\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">const </span><span style=\"color:#d08770;\">NODE_MASK</span><span style=\"color:#c0c5ce;\">: NodeMaskBuilder&lt;</span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt; = NodeMaskBuilder::new()\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Get access to the width and height attributes\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">with_attrs</span><span style=\"color:#c0c5ce;\">(AttributeMaskBuilder::Some(&amp;[&quot;</span><span style=\"color:#a3be8c;\">width</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">height</span><span style=\"color:#c0c5ce;\">&quot;]))\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Get access to the text of the node\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">with_text</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">update</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(\n</span><span style=\"color:#c0c5ce;\">        &amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">node_view</span><span style=\"color:#c0c5ce;\">: NodeView&lt;()&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_node</span><span style=\"color:#c0c5ce;\">: &lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">NodeDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_parent</span><span style=\"color:#c0c5ce;\">: Option&lt;&lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">ParentDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">children</span><span style=\"color:#c0c5ce;\">: Vec&lt;&lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">ChildDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">context</span><span style=\"color:#c0c5ce;\">: &amp;SendAnyMap,\n</span><span style=\"color:#c0c5ce;\">    ) -&gt; </span><span style=\"color:#b48ead;\">bool </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> font_size = context.get::&lt;FontSize&gt;().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> width;\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> height;\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">if let </span><span style=\"color:#c0c5ce;\">Some(text) = node_view.</span><span style=\"color:#96b5b4;\">text</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// if the node has text, use the text to size our object\n</span><span style=\"color:#c0c5ce;\">            width = text.</span><span style=\"color:#96b5b4;\">len</span><span style=\"color:#c0c5ce;\">() as </span><span style=\"color:#b48ead;\">f64 </span><span style=\"color:#c0c5ce;\">* font_size;\n</span><span style=\"color:#c0c5ce;\">            height = font_size;\n</span><span style=\"color:#c0c5ce;\">        }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// otherwise, the size is the maximum size of the children\n</span><span style=\"color:#c0c5ce;\">            width = children\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|(</span><span style=\"color:#bf616a;\">item</span><span style=\"color:#c0c5ce;\">,)| item.</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">)\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">reduce</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">accum</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">item</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> accum &gt;= item {{ accum }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{ item }})\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">unwrap_or</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#d08770;\">0.0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">            height = children\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">iter</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|(</span><span style=\"color:#bf616a;\">item</span><span style=\"color:#c0c5ce;\">,)| item.</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">)\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">reduce</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">accum</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#bf616a;\">item</span><span style=\"color:#c0c5ce;\">| </span><span style=\"color:#b48ead;\">if</span><span style=\"color:#c0c5ce;\"> accum &gt;= item {{ accum }} </span><span style=\"color:#b48ead;\">else </span><span style=\"color:#c0c5ce;\">{{ item }})\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">unwrap_or</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#d08770;\">0.0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// if the node contains a width or height attribute it overrides the other size\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> a in node_view.</span><span style=\"color:#96b5b4;\">attributes</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">into_iter</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">flatten</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">match </span><span style=\"color:#c0c5ce;\">&amp;*a.attribute.name {{\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">width</span><span style=\"color:#c0c5ce;\">&quot; =&gt; width = a.value.</span><span style=\"color:#96b5b4;\">as_float</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">height</span><span style=\"color:#c0c5ce;\">&quot; =&gt; height = a.value.</span><span style=\"color:#96b5b4;\">as_float</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// because Size only depends on the width and height, no other attributes will be passed to the member\n</span><span style=\"color:#c0c5ce;\">                _ =&gt; panic!(),\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// to determine what other parts of the dom need to be updated we return a boolean that marks if this member changed\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> changed = (width != </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">) || (height != </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">.</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">        *</span><span style=\"color:#bf616a;\">self </span><span style=\"color:#c0c5ce;\">= </span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#c0c5ce;\">(width, height);\n</span><span style=\"color:#c0c5ce;\">        changed\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Debug, Clone, Copy, PartialEq, Default, Component)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">TextColor {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">r</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">u8</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">g</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">u8</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#bf616a;\">b</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">u8</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">partial_derive_state</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#c0c5ce;\">State </span><span style=\"color:#b48ead;\">for </span><span style=\"color:#c0c5ce;\">TextColor {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// TextColor depends on the TextColor part of the parent\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">ParentDependencies = (</span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#c0c5ce;\">,);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">ChildDependencies = ();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">NodeDependencies = ();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// TextColor only cares about the color attribute of the current node\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">const </span><span style=\"color:#d08770;\">NODE_MASK</span><span style=\"color:#c0c5ce;\">: NodeMaskBuilder&lt;</span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt; =\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Get access to the color attribute\n</span><span style=\"color:#c0c5ce;\">        NodeMaskBuilder::new().</span><span style=\"color:#96b5b4;\">with_attrs</span><span style=\"color:#c0c5ce;\">(AttributeMaskBuilder::Some(&amp;[&quot;</span><span style=\"color:#a3be8c;\">color</span><span style=\"color:#c0c5ce;\">&quot;]));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">update</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(\n</span><span style=\"color:#c0c5ce;\">        &amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">node_view</span><span style=\"color:#c0c5ce;\">: NodeView&lt;()&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_node</span><span style=\"color:#c0c5ce;\">: &lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">NodeDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">parent</span><span style=\"color:#c0c5ce;\">: Option&lt;&lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">ParentDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_children</span><span style=\"color:#c0c5ce;\">: Vec&lt;&lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">ChildDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_context</span><span style=\"color:#c0c5ce;\">: &amp;SendAnyMap,\n</span><span style=\"color:#c0c5ce;\">    ) -&gt; </span><span style=\"color:#b48ead;\">bool </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// TextColor only depends on the color tag, so getting the first tag is equivalent to looking through all tags\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> new = </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> node_view\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">attributes</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">and_then</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">attrs</span><span style=\"color:#c0c5ce;\">| attrs.</span><span style=\"color:#96b5b4;\">next</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">            .</span><span style=\"color:#96b5b4;\">and_then</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">attr</span><span style=\"color:#c0c5ce;\">| attr.value.</span><span style=\"color:#96b5b4;\">as_text</span><span style=\"color:#c0c5ce;\">())\n</span><span style=\"color:#c0c5ce;\">        {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// if there is a color tag, translate it\n</span><span style=\"color:#c0c5ce;\">            Some(&quot;</span><span style=\"color:#a3be8c;\">red</span><span style=\"color:#c0c5ce;\">&quot;) =&gt; TextColor {{ r: </span><span style=\"color:#d08770;\">255</span><span style=\"color:#c0c5ce;\">, g: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, b: </span><span style=\"color:#d08770;\">0 </span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#c0c5ce;\">            Some(&quot;</span><span style=\"color:#a3be8c;\">green</span><span style=\"color:#c0c5ce;\">&quot;) =&gt; TextColor {{ r: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, g: </span><span style=\"color:#d08770;\">255</span><span style=\"color:#c0c5ce;\">, b: </span><span style=\"color:#d08770;\">0 </span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#c0c5ce;\">            Some(&quot;</span><span style=\"color:#a3be8c;\">blue</span><span style=\"color:#c0c5ce;\">&quot;) =&gt; TextColor {{ r: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, g: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, b: </span><span style=\"color:#d08770;\">255 </span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#c0c5ce;\">            Some(color) =&gt; panic!(&quot;</span><span style=\"color:#a3be8c;\">unknown color {{}}</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">red</span><span style=\"color:#c0c5ce;\">&quot;),\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#65737e;\">// otherwise check if the node has a parent and inherit that color\n</span><span style=\"color:#c0c5ce;\">            None =&gt; </span><span style=\"color:#b48ead;\">match</span><span style=\"color:#c0c5ce;\"> parent {{\n</span><span style=\"color:#c0c5ce;\">                Some((parent,)) =&gt; *parent,\n</span><span style=\"color:#c0c5ce;\">                None =&gt; </span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#c0c5ce;\">::default(),\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">        }};\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// check if the member has changed\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> changed = new != *</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">        *</span><span style=\"color:#bf616a;\">self </span><span style=\"color:#c0c5ce;\">= new;\n</span><span style=\"color:#c0c5ce;\">        changed\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Debug, Clone, Copy, PartialEq, Default, Component)]\n</span><span style=\"color:#b48ead;\">struct </span><span style=\"color:#c0c5ce;\">Border(</span><span style=\"color:#b48ead;\">bool</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">partial_derive_state</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">impl </span><span style=\"color:#c0c5ce;\">State </span><span style=\"color:#b48ead;\">for </span><span style=\"color:#c0c5ce;\">Border {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// TextColor depends on the TextColor part of the parent\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">ParentDependencies = (</span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#c0c5ce;\">,);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">ChildDependencies = ();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">type </span><span style=\"color:#c0c5ce;\">NodeDependencies = ();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Border does not depended on any other member in the current node\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">const </span><span style=\"color:#d08770;\">NODE_MASK</span><span style=\"color:#c0c5ce;\">: NodeMaskBuilder&lt;</span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt; =\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// Get access to the border attribute\n</span><span style=\"color:#c0c5ce;\">        NodeMaskBuilder::new().</span><span style=\"color:#96b5b4;\">with_attrs</span><span style=\"color:#c0c5ce;\">(AttributeMaskBuilder::Some(&amp;[&quot;</span><span style=\"color:#a3be8c;\">border</span><span style=\"color:#c0c5ce;\">&quot;]));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">update</span><span style=\"color:#c0c5ce;\">&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;(\n</span><span style=\"color:#c0c5ce;\">        &amp;</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">node_view</span><span style=\"color:#c0c5ce;\">: NodeView&lt;()&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_node</span><span style=\"color:#c0c5ce;\">: &lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">NodeDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_parent</span><span style=\"color:#c0c5ce;\">: Option&lt;&lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">ParentDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_children</span><span style=\"color:#c0c5ce;\">: Vec&lt;&lt;</span><span style=\"color:#b48ead;\">Self::</span><span style=\"color:#c0c5ce;\">ChildDependencies as Dependancy&gt;::ElementBorrowed&lt;</span><span style=\"color:#b48ead;\">&#39;a</span><span style=\"color:#c0c5ce;\">&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#bf616a;\">_context</span><span style=\"color:#c0c5ce;\">: &amp;SendAnyMap,\n</span><span style=\"color:#c0c5ce;\">    ) -&gt; </span><span style=\"color:#b48ead;\">bool </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// check if the node contains a border attribute\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> new = </span><span style=\"color:#b48ead;\">Self</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">            node_view\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">attributes</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">and_then</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#b48ead;\">mut </span><span style=\"color:#bf616a;\">attrs</span><span style=\"color:#c0c5ce;\">| attrs.</span><span style=\"color:#96b5b4;\">next</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">map</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">a</span><span style=\"color:#c0c5ce;\">| a.attribute.name == &quot;</span><span style=\"color:#a3be8c;\">border</span><span style=\"color:#c0c5ce;\">&quot;))\n</span><span style=\"color:#c0c5ce;\">                .</span><span style=\"color:#96b5b4;\">is_some</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">        );\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// check if the member has changed\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> changed = new != *</span><span style=\"color:#bf616a;\">self</span><span style=\"color:#c0c5ce;\">;\n</span><span style=\"color:#c0c5ce;\">        *</span><span style=\"color:#bf616a;\">self </span><span style=\"color:#c0c5ce;\">= new;\n</span><span style=\"color:#c0c5ce;\">        changed\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "Now that we have our state, we can put it to use in our RealDom. We can update the RealDom with apply_mutations to update the structure of the dom (adding, removing, and changing properties of nodes) and then update_state to update the States for each of the nodes that changed."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#96b5b4;\">use_future</span><span style=\"color:#c0c5ce;\">(cx, (count,), |(</span><span style=\"color:#bf616a;\">count</span><span style=\"color:#c0c5ce;\">,)| async </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">loop </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">                tokio::time::sleep(std::time::Duration::from_secs(</span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">)).await;\n</span><span style=\"color:#c0c5ce;\">                count.</span><span style=\"color:#96b5b4;\">set</span><span style=\"color:#c0c5ce;\">(*count + </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">        cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">            div{{\n</span><span style=\"color:#c0c5ce;\">                color: &quot;</span><span style=\"color:#a3be8c;\">red</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                &quot;</span><span style=\"color:#a3be8c;\">{{count}}</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }})\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// create the vdom, the real_dom, and the binding layer between them\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> vdom = VirtualDom::new(app);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> rdom: RealDom = RealDom::new([\n</span><span style=\"color:#c0c5ce;\">        Border::to_type_erased(),\n</span><span style=\"color:#c0c5ce;\">        TextColor::to_type_erased(),\n</span><span style=\"color:#c0c5ce;\">        Size::to_type_erased(),\n</span><span style=\"color:#c0c5ce;\">    ]);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> dioxus_intigration_state = DioxusState::create(&amp;</span><span style=\"color:#b48ead;\">mut</span><span style=\"color:#c0c5ce;\"> rdom);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> mutations = vdom.</span><span style=\"color:#96b5b4;\">rebuild</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// update the structure of the real_dom tree\n</span><span style=\"color:#c0c5ce;\">    dioxus_intigration_state.</span><span style=\"color:#96b5b4;\">apply_mutations</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#b48ead;\">mut</span><span style=\"color:#c0c5ce;\"> rdom, mutations);\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> ctx = SendAnyMap::new();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// set the font size to 3.3\n</span><span style=\"color:#c0c5ce;\">    ctx.</span><span style=\"color:#96b5b4;\">insert</span><span style=\"color:#c0c5ce;\">(FontSize(</span><span style=\"color:#d08770;\">3.3</span><span style=\"color:#c0c5ce;\">));\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// update the State for nodes in the real_dom tree\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> _to_rerender = rdom.</span><span style=\"color:#96b5b4;\">update_state</span><span style=\"color:#c0c5ce;\">(ctx);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// we need to run the vdom in a async runtime\n</span><span style=\"color:#c0c5ce;\">    tokio::runtime::Builder::new_current_thread()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">enable_all</span><span style=\"color:#c0c5ce;\">()\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">build</span><span style=\"color:#c0c5ce;\">()?\n</span><span style=\"color:#c0c5ce;\">        .</span><span style=\"color:#96b5b4;\">block_on</span><span style=\"color:#c0c5ce;\">(async {{\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">loop </span><span style=\"color:#c0c5ce;\">{{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// wait for the vdom to update\n</span><span style=\"color:#c0c5ce;\">                vdom.</span><span style=\"color:#96b5b4;\">wait_for_work</span><span style=\"color:#c0c5ce;\">().await;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// get the mutations from the vdom\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> mutations = vdom.</span><span style=\"color:#96b5b4;\">render_immediate</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// update the structure of the real_dom tree\n</span><span style=\"color:#c0c5ce;\">                dioxus_intigration_state.</span><span style=\"color:#96b5b4;\">apply_mutations</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#b48ead;\">mut</span><span style=\"color:#c0c5ce;\"> rdom, mutations);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// update the state of the real_dom tree\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> ctx = SendAnyMap::new();\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// set the font size to 3.3\n</span><span style=\"color:#c0c5ce;\">                ctx.</span><span style=\"color:#96b5b4;\">insert</span><span style=\"color:#c0c5ce;\">(FontSize(</span><span style=\"color:#d08770;\">3.3</span><span style=\"color:#c0c5ce;\">));\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> _to_rerender = rdom.</span><span style=\"color:#96b5b4;\">update_state</span><span style=\"color:#c0c5ce;\">(ctx);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// render...\n</span><span style=\"color:#c0c5ce;\">                rdom.</span><span style=\"color:#96b5b4;\">traverse_depth_first</span><span style=\"color:#c0c5ce;\">(|</span><span style=\"color:#bf616a;\">node</span><span style=\"color:#c0c5ce;\">| {{\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> indent = &quot; &quot;.</span><span style=\"color:#96b5b4;\">repeat</span><span style=\"color:#c0c5ce;\">(node.</span><span style=\"color:#96b5b4;\">height</span><span style=\"color:#c0c5ce;\">() as </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> color = *node.get::&lt;TextColor&gt;().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> size = *node.get::&lt;Size&gt;().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> border = *node.get::&lt;Border&gt;().</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> id = node.</span><span style=\"color:#96b5b4;\">id</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> node = node.</span><span style=\"color:#96b5b4;\">node_type</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> node_type = &amp;*node;\n</span><span style=\"color:#c0c5ce;\">                    println!(&quot;</span><span style=\"color:#d08770;\">{{indent}}{{id:?}} {{color:?}} {{size:?}} {{border:?}} {{node_type:?}}</span><span style=\"color:#c0c5ce;\">&quot;);\n</span><span style=\"color:#c0c5ce;\">                }});\n</span><span style=\"color:#c0c5ce;\">            }}\n</span><span style=\"color:#c0c5ce;\">        }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "layout",
            a { href: "#layout", class: "header", "Layout" }
        }
        p {
            "For most platforms, the layout of the Elements will stay the same. The "
            a { href: "https://docs.rs/dioxus-native-core/latest/dioxus_native_core/layout_attributes/index.html",
                ""
            }
            " module provides a way to apply HTML attributes a "
            a { href: "https://docs.rs/taffy/latest/taffy/index.html", "" }
            " layout style."
        }
        h2 { id: "text-editing",
            a { href: "#text-editing", class: "header", "Text Editing" }
        }
        p {
            "To make it easier to implement text editing in rust renderers,  "
            code { "native-core" }
            " also contains a renderer-agnostic cursor system. The cursor can handle text editing, selection, and movement with common keyboard shortcuts integrated."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">text_editing</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> cursor = Cursor::default();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> text = String::new();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// handle keyboard input with a max text length of 10\n</span><span style=\"color:#c0c5ce;\">    cursor.</span><span style=\"color:#96b5b4;\">handle_input</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">        &amp;Code::ArrowRight,\n</span><span style=\"color:#c0c5ce;\">        &amp;Key::ArrowRight,\n</span><span style=\"color:#c0c5ce;\">        &amp;Modifiers::empty(),\n</span><span style=\"color:#c0c5ce;\">        &amp;</span><span style=\"color:#b48ead;\">mut</span><span style=\"color:#c0c5ce;\"> text,\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#d08770;\">10</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">    );\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// manually select text between characters 0-5 on the first line (this could be from dragging with a mouse)\n</span><span style=\"color:#c0c5ce;\">    cursor.start = Pos::new(</span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">    cursor.end = Some(Pos::new(</span><span style=\"color:#d08770;\">5</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">));\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// delete the selected text and move the cursor to the start of the selection\n</span><span style=\"color:#c0c5ce;\">    cursor.</span><span style=\"color:#96b5b4;\">delete_selection</span><span style=\"color:#c0c5ce;\">(&amp;</span><span style=\"color:#b48ead;\">mut</span><span style=\"color:#c0c5ce;\"> text);\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "conclusion",
            a { href: "#conclusion", class: "header", "Conclusion" }
        }
        p {
            "That should be it! You should have nearly all the knowledge required on how to implement your renderer. We're super interested in seeing Dioxus apps brought to custom desktop renderers, mobile renderers, video game UI, and even augmented reality! If you're interested in contributing to any of these projects, don't be afraid to reach out or join the "
            a { href: "https://discord.gg/XgGxMSkvUM", "" }
            "."
        }
    }
}
#[component(no_case_check)]
pub fn CookbookOptimizing() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "optimizing",
            a { href: "#optimizing", class: "header", "Optimizing" }
        }
        p {
            em {
                "Note: This is written primarily for the web, but the main optimizations will work on other platforms too."
            }
        }
        p {
            "You might have noticed that Dioxus binaries are pretty big."
            a { href: "https://github.com/tigerros/dioxus-todo-app", "" }
            " weighs in at 2.36mb!"
            a { href: "https://github.com/DioxusLabs/dioxus/pull/1402", "" }
            " will reduce the binary size of a hello world app to less than 100kb (with unstable features)."
        }
        p { "We will also discuss ways to optimize your app for increased speed." }
        p {
            "However, certain optimizations will sacrifice speed for decreased binary size or the other way around."
        }
        p {
            "To test binary sizes, we will use "
            a { href: "https://github.com/tigerros/dioxus-todo-app", "" }
            " repository as a sample app."
            code { "no-optimizations" }
            " package will serve as the base, which weighs 2.36mb as of right now."
        }
        p { "Additional resources:" }
        ul {
            li {
                a { href: "https://rustwasm.github.io/docs/book/reference/code-size.html",
                    ""
                    code { ".wasm" }
                    " code size"
                }
            }
            li {
                a { href: "https://github.com/johnthagen/min-sized-rust", "" }
            }
        }
        h2 { id: "building-in-release-mode",
            a { href: "#building-in-release-mode", class: "header", "Building in release mode" }
        }
        p {
            "This is the best way to optimize. In fact, the 2.36mb figure at the start of the guide is with release mode."
        }
        p {
            "Thankfully, no matter what tool you're using to build your app, it will probably have a  "
            code { "--release" }
            " flag to do this."
        }
        p {
            "Using the "
            a { href: "https://dioxuslabs.com/learn/0.4/CLI", "" }
            " or "
            a { href: "https://trunkrs.dev/", "" }
            ":"
        }
        ul {
            li {
                "Dioxus CLI: "
                code { "dx build --release" }
            }
            li {
                "Trunk: "
                code { "trunk build --release" }
            }
        }
        h2 { id: "upx",
            a { href: "#upx", class: "header", "UPX" }
        }
        p {
            "If you're not targeting web, you can use the "
            a { href: "https://github.com/upx/upx", "" }
            " CLI tool to compress your executables."
        }
        p { "Setup:" }
        ul {
            li {
                "Download a "
                a { href: "https://github.com/upx/upx/releases", "" }
                " and extract the directory inside to a sensible location."
            }
            li { "Add the executable located in the directory to your path variable." }
        }
        p {
            "You can run  "
            code { "upx --help" }
            " to get the CLI options, but you should also view  "
            code { "upx-doc.html" }
            " for more detailed information."
        }
        p {
            "An example command might be:  "
            code { "upx --best -o target/release/compressed.exe target/release/your-executable.exe" }
            "."
        }
        h2 { id: "build-configuration",
            a { href: "#build-configuration", class: "header", "Build configuration" }
        }
        p {
            em {
                "Note: Settings defined in "
                code { ".cargo/config.toml" }
                " will override settings in "
                code { "Cargo.toml" }
                "."
            }
        }
        p {
            "Other than the  "
            code { "--release" }
            " flag, this is the easiest way to optimize your projects, and also the most effective way,"
        }
        h3 { id: "stable",
            a { href: "#stable", class: "header", "Stable" }
        }
        p {
            "This configuration is 100% stable and decreases the binary size from 2.36mb to 310kb."
            code { ".cargo/config.toml" }
            ":"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[profile.release]\n</span><span style=\"color:#c0c5ce;\">opt-level = &quot;</span><span style=\"color:#a3be8c;\">z</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">debug = </span><span style=\"color:#d08770;\">false\n</span><span style=\"color:#c0c5ce;\">lto = </span><span style=\"color:#d08770;\">true\n</span><span style=\"color:#c0c5ce;\">codegen-units = </span><span style=\"color:#d08770;\">1\n</span><span style=\"color:#c0c5ce;\">panic = &quot;</span><span style=\"color:#a3be8c;\">abort</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">strip = </span><span style=\"color:#d08770;\">true\n</span><span style=\"color:#c0c5ce;\">incremental = </span><span style=\"color:#d08770;\">false\n</span></pre>\n" }
        p { "Links to the documentation of each value:" }
        ul {
            li {
                a { href: "https://doc.rust-lang.org/rustc/codegen-options/index.html#opt-level",
                    ""
                    code { "opt-level" }
                }
            }
            li {
                a { href: "https://doc.rust-lang.org/rustc/codegen-options/index.html#debuginfo",
                    ""
                    code { "debug" }
                }
            }
            li {
                a { href: "https://doc.rust-lang.org/rustc/codegen-options/index.html#lto",
                    ""
                    code { "lto" }
                }
            }
            li {
                a { href: "https://doc.rust-lang.org/rustc/codegen-options/index.html#codegen-units",
                    ""
                    code { "codegen-units" }
                }
            }
            li {
                a { href: "https://doc.rust-lang.org/rustc/codegen-options/index.html#panic",
                    ""
                    code { "panic" }
                }
            }
            li {
                a { href: "https://doc.rust-lang.org/rustc/codegen-options/index.html#strip",
                    ""
                    code { "strip" }
                }
            }
            li {
                a { href: "https://doc.rust-lang.org/rustc/codegen-options/index.html#incremental",
                    ""
                    code { "incremental" }
                }
            }
        }
        h3 { id: "unstable",
            a { href: "#unstable", class: "header", "Unstable" }
        }
        p {
            "This configuration contains some unstable features, but it should work just fine."
            code { ".cargo/config.toml" }
            ":"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[unstable]\n</span><span style=\"color:#c0c5ce;\">build-std = [&quot;</span><span style=\"color:#a3be8c;\">std</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">panic_abort</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">core</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">alloc</span><span style=\"color:#c0c5ce;\">&quot;]\n</span><span style=\"color:#c0c5ce;\">build-std-features = [&quot;</span><span style=\"color:#a3be8c;\">panic_immediate_abort</span><span style=\"color:#c0c5ce;\">&quot;]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">[build]\n</span><span style=\"color:#c0c5ce;\">rustflags = [\n</span><span style=\"color:#c0c5ce;\">    &quot;</span><span style=\"color:#a3be8c;\">-Clto</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    &quot;</span><span style=\"color:#a3be8c;\">-Zvirtual-function-elimination</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    &quot;</span><span style=\"color:#a3be8c;\">-Zlocation-detail=none</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># Same as in the Stable section\n</span><span style=\"color:#c0c5ce;\">[profile.release]\n</span><span style=\"color:#c0c5ce;\">opt-level = &quot;</span><span style=\"color:#a3be8c;\">z</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">debug = </span><span style=\"color:#d08770;\">false\n</span><span style=\"color:#c0c5ce;\">lto = </span><span style=\"color:#d08770;\">true\n</span><span style=\"color:#c0c5ce;\">codegen-units = </span><span style=\"color:#d08770;\">1\n</span><span style=\"color:#c0c5ce;\">panic = &quot;</span><span style=\"color:#a3be8c;\">abort</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">strip = </span><span style=\"color:#d08770;\">true\n</span><span style=\"color:#c0c5ce;\">incremental = </span><span style=\"color:#d08770;\">false\n</span></pre>\n",
        }
        p {
            em {
                "Note: The omitted space in each flag (e.g., "
                code { "-C<no space here>lto" }
                ") is intentional. It is not a typo."
            }
        }
        p {
            "The values in  "
            code { "[profile.release]" }
            " are documented in the "
            a { href: "#stable", "" }
            " section. Links to the documentation of each value:"
        }
        ul {
            li {
                a { href: "https://doc.rust-lang.org/cargo/reference/config.html#buildrustflags",
                    ""
                    code { "[build.rustflags]" }
                }
            }
            li {
                a { href: "https://doc.rust-lang.org/rustc/codegen-options/index.html#lto",
                    ""
                    code { "-C lto" }
                }
            }
            li {
                a { href: "https://doc.rust-lang.org/stable/unstable-book/compiler-flags/virtual-function-elimination.html",
                    ""
                    code { "-Z virtual-function-elimination" }
                }
            }
            li {
                a { href: "https://doc.rust-lang.org/stable/unstable-book/compiler-flags/location-detail.html",
                    ""
                    code { "-Z location-detail" }
                }
            }
        }
        h2 { id: "wasm-opt",
            a { href: "#wasm-opt", class: "header", "wasm-opt" }
        }
        p {
            em {
                "Note: In the future, "
                code { "wasm-opt" }
                " will be supported natively through the "
                a { href: "https://crates.io/crates/dioxus-cli", "" }
                "."
            }
        }
        p {
            code { "wasm-opt" }
            " is a tool from the "
            a { href: "https://github.com/WebAssembly/binaryen", "" }
            " library that optimizes your WASM files."
            a { href: "https://github.com/WebAssembly/binaryen/releases", "" }
            " and run this command from the package directory:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">wasm-opt dist/assets/dioxus/APP_NAME_bg.wasm -o dist/assets/dioxus/APP_NAME_bg.wasm -Oz\n</span></pre>\n" }
        p {
            "The  "
            code { "-Oz" }
            " flag specifies that  "
            code { "wasm-opt" }
            " should optimize for size. For speed, use  "
            code { "-O4" }
            "."
        }
        h2 { id: "improving-dioxus-code",
            a { href: "#improving-dioxus-code", class: "header", "Improving Dioxus code" }
        }
        p { "Let's talk about how you can improve your Dioxus code to be more performant." }
        p {
            "It's important to minimize the number of dynamic parts in your  "
            code { "rsx" }
            ", like conditional rendering."
            a { href: "../reference/dynamic_rendering", "" }
            "."
        }
        p {
            "Also check out "
            a { href: "antipatterns", "" }
            " for patterns that you should avoid."
        }
        h2 { id: "bundling-and-minifying-the-output-js-and-html",
            a {
                href: "#bundling-and-minifying-the-output-js-and-html",
                class: "header",
                "Bundling and minifying the output JS and HTML"
            }
        }
        p {
            "This will be added in "
            a { href: "https://github.com/DioxusLabs/dioxus/pull/1369", "" }
            "."
        }
    }
}
#[component(no_case_check)]
pub fn CliIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "introduction",
            a { href: "#introduction", class: "header", "Introduction" }
        }
        p {
            "The ✨"
            strong { "Dioxus CLI" }
            "✨ is a tool to get Dioxus projects off the ground."
        }
        p {
            "There's no documentation for commands here, but you can see all commands using  "
            code { "dx --help" }
            " once you've installed the CLI! Furthermore, you can run  "
            code { "dx <command> --help" }
            " to get help with a specific command."
        }
        h2 { id: "features",
            a { href: "#features", class: "header", "Features" }
        }
        ul {
            li { "Build and pack a Dioxus project." }
            li {
                "Format "
                code { "rsx" }
                " code."
            }
            li {
                "Hot Reload for "
                code { "web" }
                " platform."
            }
            li { "Create a Dioxus project from a template repository." }
            li { "And more!" }
        }
    }
}
#[component(no_case_check)]
pub fn CliInstallation() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "installation",
            a { href: "#installation", class: "header", "Installation" }
        }
        h2 { id: "install-the-stable-version-recommended",
            a {
                href: "#install-the-stable-version-recommended",
                class: "header",
                "Install the stable version (recommended)"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo install dioxus-cli\n</span></pre>\n" }
        p {
            "If you get an OpenSSL error on installation, ensure the dependencies listed "
            a { href: "https://docs.rs/openssl/latest/openssl/#automatic", "" }
            " are installed."
        }
        h2 { id: "install-the-latest-development-build-through-git",
            a {
                href: "#install-the-latest-development-build-through-git",
                class: "header",
                "Install the latest development build through git"
            }
        }
        p {
            "To get the latest bug fixes and features, you can install the development version from git. However, this is not fully tested. That means you're probably going to have more bugs despite having the latest bug fixes."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo install --git https:</span><span style=\"color:#65737e;\">//github.com/DioxusLabs/dioxus dioxus-cli\n</span></pre>\n" }
        p {
            "This will download the CLI from the master branch, and install it in Cargo's global binary directory ( "
            code { "~/.cargo/bin/" }
            " by default)."
        }
        p {
            "Run  "
            code { "dx --help" }
            " for a list of all the available commands. Furthermore, you can run  "
            code { "dx <command> --help" }
            " to get help with a specific command."
        }
    }
}
#[component(no_case_check)]
pub fn CliCreating() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "create-a-project",
            a { href: "#create-a-project", class: "header", "Create a Project" }
        }
        p { "Once you have the Dioxus CLI installed, you can use it to create your own project!" }
        h2 { id: "initializing-a-project",
            a { href: "#initializing-a-project", class: "header", "Initializing a project" }
        }
        p {
            "First, run the  "
            code { "dx create" }
            " command to create a new project."
        }
        blockquote {
            p {
                "It clones this "
                a { href: "https://github.com/DioxusLabs/dioxus-template", "" }
                ", which is used for web apps."
            }
            p {
                "You can create your project from a different template by passing the  "
                code { "template" }
                " argument:"
            }
            CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx create --template gh:dioxuslabs/dioxus-template\n</span></pre>\n" }
        }
        p {
            "Next, navigate into your new project using  "
            code { "cd project-name" }
            ", or simply opening it in an IDE."
        }
        blockquote {
            p { "Make sure the WASM target is installed before running the projects." }
            CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">rustup target add wasm32-unknown-unknown\n</span></pre>\n" }
        }
        p {
            "Finally, serve your project with  "
            code { "dx serve" }
            "! The CLI will tell you the address it is serving on, along with additional info such as code warnings."
        }
    }
}
#[component(no_case_check)]
pub fn CliConfigure() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "configure-project",
            a { href: "#configure-project", class: "header", "Configure Project" }
        }
        p {
            "This chapter will teach you how to configure the CLI with the  "
            code { "Dioxus.toml" }
            " file. There's an "
            a { href: "#config-example", "" }
            " which has comments to describe individual keys. You can copy that or view this documentation for a more complete learning experience."
        }
        p {
            "\"🔒\" indicates a mandatory item. Some headers are mandatory, but none of the keys inside them are. In that case, you only need to include the header, but no keys. It might look weird, but it's normal."
        }
        h2 { id: "structure",
            a { href: "#structure", class: "header", "Structure" }
        }
        p { "Each header has its TOML form directly under it." }
        h3 { id: "application-",
            a { href: "#application-", class: "header", "Application 🔒" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[application]\n</span></pre>\n" }
        p { "Application-wide configuration. Applies to both web and desktop." }
        ul {
            li {
                strong { "name" }
                " 🔒 - Project name & title."
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">name = &quot;</span><span style=\"color:#a3be8c;\">my_project</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
            }
            li {
                strong { "default_platform" }
                " 🔒 - The platform this project targets"
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\"># Currently supported platforms: web, desktop\n</span><span style=\"color:#c0c5ce;\">default_platform = &quot;</span><span style=\"color:#a3be8c;\">web</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
            }
            li {
                strong { "out_dir" }
                " - The directory to place the build artifacts from "
                code { "dx build" }
                " or "
                code { "dx serve" }
                " into. This is also where the "
                code { "assets" }
                " directory will be copied into."
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">out_dir = &quot;</span><span style=\"color:#a3be8c;\">dist</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
            }
            li {
                strong { "asset_dir" }
                " - The directory with your static assets. The CLI will automatically copy these assets into the "
                strong { "out_dir" }
                " after a build/serve."
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">asset_dir = &quot;</span><span style=\"color:#a3be8c;\">public</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
            }
            li {
                strong { "sub_package" }
                " - The sub package in the workspace to build by default."
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">sub_package = &quot;</span><span style=\"color:#a3be8c;\">my-crate</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
            }
        }
        h3 { id: "webapp-",
            a { href: "#webapp-", class: "header", "Web.App 🔒" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[web.app]\n</span></pre>\n" }
        p { "Web-specific configuration." }
        ul {
            li {
                strong { "title" }
                " - The title of the web page."
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\"># </span><span style=\"color:#d08770;\">HTML</span><span style=\"color:#c0c5ce;\"> title tag content\n</span><span style=\"color:#c0c5ce;\">title = &quot;</span><span style=\"color:#a3be8c;\">project_name</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
            }
            li {
                strong { "base_path" }
                " - The base path to build the application for serving at. This can be useful when serving your application in a subdirectory under a domain. For example, when building a site to be served on GitHub Pages."
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\"># The application will be served at domain.com/my_application/, so we need to modify the base_path to the path </span><span style=\"color:#b48ead;\">where</span><span style=\"color:#c0c5ce;\"> the application will be served\n</span><span style=\"color:#c0c5ce;\">base_path = &quot;</span><span style=\"color:#a3be8c;\">my_application</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
            }
        }
        h3 { id: "webwatcher-",
            a { href: "#webwatcher-", class: "header", "Web.Watcher 🔒" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[web.watcher]\n</span></pre>\n" }
        p { "Development server configuration." }
        ul {
            li {
                p {
                    strong { "reload_html" }
                    " - If this is true, the cli will rebuild the index.html file every time the application is rebuilt"
                }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">reload_html = </span><span style=\"color:#d08770;\">true\n</span></pre>\n" }
            }
            li {
                p {
                    strong { "watch_path" }
                    " - The files & directories to monitor for changes"
                }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">watch_path = [&quot;</span><span style=\"color:#a3be8c;\">src</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">public</span><span style=\"color:#c0c5ce;\">&quot;]\n</span></pre>\n" }
            }
            li {
                p {
                    strong { "index_on_404" }
                    " - If enabled, Dioxus will serve the root page when a route is not found."
                    em { "This is needed when serving an application that uses the router" }
                    ". However, when serving your app using something else than Dioxus (e.g. GitHub Pages), you will have to check how to configure it on that platform. In GitHub Pages, you can make a copy of "
                    code { "index.html" }
                    " named "
                    code { "404.html" }
                    " in the same directory."
                }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">index_on_404 = </span><span style=\"color:#d08770;\">true\n</span></pre>\n" }
            }
        }
        h3 { id: "webresource-",
            a { href: "#webresource-", class: "header", "Web.Resource 🔒" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[web.resource]\n</span></pre>\n" }
        p { "Static resource configuration." }
        ul {
            li {
                p {
                    strong { "style" }
                    " - CSS files to include in your application."
                }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">style = [\n</span><span style=\"color:#c0c5ce;\">   # Include from public_dir.\n</span><span style=\"color:#c0c5ce;\">   &quot;</span><span style=\"color:#a3be8c;\">./assets/style.css</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">   # Or some asset from online cdn.\n</span><span style=\"color:#c0c5ce;\">   &quot;</span><span style=\"color:#a3be8c;\">https://cdn.jsdelivr.net/npm/bootstrap/dist/css/bootstrap.css</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">]\n</span></pre>\n" }
            }
            li {
                p {
                    strong { "script" }
                    " - JavaScript files to include in your application."
                }
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">script = [\n</span><span style=\"color:#c0c5ce;\">    # Include from asset_dir.\n</span><span style=\"color:#c0c5ce;\">    &quot;</span><span style=\"color:#a3be8c;\">./public/index.js</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">    # Or from an online </span><span style=\"color:#d08770;\">CDN</span><span style=\"color:#c0c5ce;\">.\n</span><span style=\"color:#c0c5ce;\">    &quot;</span><span style=\"color:#a3be8c;\">https://cdn.jsdelivr.net/npm/bootstrap/dist/js/bootstrap.js</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">]\n</span></pre>\n" }
            }
        }
        h3 { id: "webresourcedev-",
            a { href: "#webresourcedev-", class: "header", "Web.Resource.Dev 🔒" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[web.resource.dev]\n</span></pre>\n" }
        p {
            "This is the same as "
            a { href: "#webresource-",
                ""
                code { "[web.resource]" }
            }
            ", but it only works in development servers. For example, if you want to include a file in a "
            code { "dx serve" }
            " server, but not a "
            code { "dx serve --release" }
            " server, put it here."
        }
        h3 { id: "webproxy",
            a { href: "#webproxy", class: "header", "Web.Proxy" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[[web.proxy]]\n</span></pre>\n" }
        p {
            "Configuration related to any proxies your application requires during development. Proxies will forward requests to a new service."
        }
        ul {
            li {
                strong { "backend" }
                " - The URL to the server to proxy. The CLI will forward any requests under the backend relative route to the backend instead of returning 404"
                CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">backend = &quot;</span><span style=\"color:#a3be8c;\">http://localhost:8000/api/</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
                "This will cause any requests made to the dev server with prefix /api/ to be redirected to the backend server at http://localhost:8000. The path and query parameters will be passed on as-is (path rewriting is currently not supported)."
            }
        }
        h2 { id: "config-example",
            a { href: "#config-example", class: "header", "Config example" }
        }
        p { "This includes all fields, mandatory or not." }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">[application]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># App name\n</span><span style=\"color:#c0c5ce;\">name = &quot;</span><span style=\"color:#a3be8c;\">project_name</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># The Dioxus platform to default to\n</span><span style=\"color:#c0c5ce;\">default_platform = &quot;</span><span style=\"color:#a3be8c;\">web</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># `build` &amp; `serve` output path\n</span><span style=\"color:#c0c5ce;\">out_dir = &quot;</span><span style=\"color:#a3be8c;\">dist</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># The </span><span style=\"color:#b48ead;\">static</span><span style=\"color:#c0c5ce;\"> resource path\n</span><span style=\"color:#c0c5ce;\">asset_dir = &quot;</span><span style=\"color:#a3be8c;\">public</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">[web.app]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># </span><span style=\"color:#d08770;\">HTML</span><span style=\"color:#c0c5ce;\"> title tag content\n</span><span style=\"color:#c0c5ce;\">title = &quot;</span><span style=\"color:#a3be8c;\">project_name</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">[web.watcher]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># When watcher is triggered, regenerate the `index.html`\n</span><span style=\"color:#c0c5ce;\">reload_html = </span><span style=\"color:#d08770;\">true\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># Which files or dirs will be monitored\n</span><span style=\"color:#c0c5ce;\">watch_path = [&quot;</span><span style=\"color:#a3be8c;\">src</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">public</span><span style=\"color:#c0c5ce;\">&quot;]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># Include style or script assets\n</span><span style=\"color:#c0c5ce;\">[web.resource]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># </span><span style=\"color:#d08770;\">CSS</span><span style=\"color:#c0c5ce;\"> style file\n</span><span style=\"color:#c0c5ce;\">style = []\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># Javascript code file\n</span><span style=\"color:#c0c5ce;\">script = []\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">[web.resource.dev]\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># Same as [web.resource], but </span><span style=\"color:#b48ead;\">for</span><span style=\"color:#c0c5ce;\"> development servers\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># </span><span style=\"color:#d08770;\">CSS</span><span style=\"color:#c0c5ce;\"> style file\n</span><span style=\"color:#c0c5ce;\">style = []\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\"># JavaScript files\n</span><span style=\"color:#c0c5ce;\">script = []\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">[[web.proxy]]\n</span><span style=\"color:#c0c5ce;\">backend = &quot;</span><span style=\"color:#a3be8c;\">http://localhost:8000/api/</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n",
        }
    }
}
#[component(no_case_check)]
pub fn CliTranslate() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "translating-existing-html",
            a { href: "#translating-existing-html", class: "header", "Translating existing HTML" }
        }
        p {
            "Dioxus uses a custom format called RSX to represent the HTML because it is more concise and looks more like Rust code. However, it can be a pain to convert existing HTML to RSX. That's why Dioxus comes with a tool called  "
            code { "dx translate" }
            " that can automatically convert HTML to RSX!"
        }
        p {
            "Dx translate can make converting large chunks of HTML to RSX much easier! Lets try translating some of the HTML from the Dioxus homepage:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx translate --raw  &quot;</span><span style=\"color:#a3be8c;\">&lt;div class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">relative w-full mx-4 sm:mx-auto text-gray-600</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;div class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">text-[3em] md:text-[5em] font-semibold dark:text-white text-ghdarkmetal font-sans py-12 flex flex-col</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;span&gt;Fullstack, crossplatform,&lt;/span&gt;&lt;span&gt;lightning fast, fully typed.&lt;/span&gt;&lt;/div&gt;&lt;h3 class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">text-[2em] dark:text-white font-extralight text-ghdarkmetal pt-4 max-w-screen-md mx-auto</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;Dioxus is a Rust library for building apps that run on desktop, web, mobile, and more.&lt;/h3&gt;&lt;div class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">pt-12 text-white text-[1.2em] font-sans font-bold flex flex-row justify-center space-x-4</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;a href=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">/learn/0.4/getting_started</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\"> dioxus-prevent-default=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">onclick</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\"> class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">bg-red-600 py-2 px-8 hover:-translate-y-2 transition-transform duration-300</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\"> data-dioxus-id=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">216</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;Quickstart&lt;/a&gt;&lt;a href=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">/learn/0.4/reference</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\"> dioxus-prevent-default=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">onclick</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\"> class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">bg-blue-500 py-2 px-8 hover:-translate-y-2 transition-transform duration-300</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\"> data-dioxus-id=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">214</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;Read the docs&lt;/a&gt;&lt;/div&gt;&lt;div class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">max-w-screen-2xl mx-auto pt-36</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;h1 class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">text-md</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;Trusted by top companies&lt;/h1&gt;&lt;div class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">pt-4 flex flex-row flex-wrap justify-center</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;div class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;img src=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">static/futurewei_bw.png</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;/div&gt;&lt;div class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;img src=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">static/airbuslogo.svg</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;/div&gt;&lt;div class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;img src=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">static/ESA_logo.svg</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;/div&gt;&lt;div class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;img src=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">static/yclogo.svg</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;/div&gt;&lt;div class=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;img src=</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">static/satellite.webp</span><span style=\"color:#96b5b4;\">\\&quot;</span><span style=\"color:#a3be8c;\">&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n",
        }
        p { "We get the following RSX you can easily copy and paste into your code:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">div {{ class: &quot;</span><span style=\"color:#a3be8c;\">relative w-full mx-4 sm:mx-auto text-gray-600</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">   div {{ class: &quot;</span><span style=\"color:#a3be8c;\">text-[3em] md:text-[5em] font-semibold dark:text-white text-ghdarkmetal font-sans py-12 flex flex-col</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">      span {{ &quot;</span><span style=\"color:#a3be8c;\">Fullstack, crossplatform,</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">      span {{ &quot;</span><span style=\"color:#a3be8c;\">lightning fast, fully typed.</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">   }}\n</span><span style=\"color:#c0c5ce;\">   h3 {{ class: &quot;</span><span style=\"color:#a3be8c;\">text-[2em] dark:text-white font-extralight text-ghdarkmetal pt-4 max-w-screen-md mx-auto</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">      &quot;</span><span style=\"color:#a3be8c;\">Dioxus is a Rust library for building apps that run on desktop, web, mobile, and more.</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">   }}\n</span><span style=\"color:#c0c5ce;\">   div {{ class: &quot;</span><span style=\"color:#a3be8c;\">pt-12 text-white text-[1.2em] font-sans font-bold flex flex-row justify-center space-x-4</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">      a {{\n</span><span style=\"color:#c0c5ce;\">         href: &quot;</span><span style=\"color:#a3be8c;\">/learn/0.4/getting_started</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">         data_dioxus_id: &quot;</span><span style=\"color:#a3be8c;\">216</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">         dioxus_prevent_default: &quot;</span><span style=\"color:#a3be8c;\">onclick</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">         class: &quot;</span><span style=\"color:#a3be8c;\">bg-red-600 py-2 px-8 hover:-translate-y-2 transition-transform duration-300</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">         &quot;</span><span style=\"color:#a3be8c;\">Quickstart</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">      }}\n</span><span style=\"color:#c0c5ce;\">      a {{\n</span><span style=\"color:#c0c5ce;\">         dioxus_prevent_default: &quot;</span><span style=\"color:#a3be8c;\">onclick</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">         href: &quot;</span><span style=\"color:#a3be8c;\">/learn/0.4/reference</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">         data_dioxus_id: &quot;</span><span style=\"color:#a3be8c;\">214</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">         class: &quot;</span><span style=\"color:#a3be8c;\">bg-blue-500 py-2 px-8 hover:-translate-y-2 transition-transform duration-300</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">         &quot;</span><span style=\"color:#a3be8c;\">Read the docs</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">      }}\n</span><span style=\"color:#c0c5ce;\">   }}\n</span><span style=\"color:#c0c5ce;\">   div {{ class: &quot;</span><span style=\"color:#a3be8c;\">max-w-screen-2xl mx-auto pt-36</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">      h1 {{ class: &quot;</span><span style=\"color:#a3be8c;\">text-md</span><span style=\"color:#c0c5ce;\">&quot;, &quot;</span><span style=\"color:#a3be8c;\">Trusted by top companies</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">      div {{ class: &quot;</span><span style=\"color:#a3be8c;\">pt-4 flex flex-row flex-wrap justify-center</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">         div {{ class: &quot;</span><span style=\"color:#a3be8c;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            img {{ src: &quot;</span><span style=\"color:#a3be8c;\">static/futurewei_bw.png</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">         }}\n</span><span style=\"color:#c0c5ce;\">         div {{ class: &quot;</span><span style=\"color:#a3be8c;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            img {{ src: &quot;</span><span style=\"color:#a3be8c;\">static/airbuslogo.svg</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">         }}\n</span><span style=\"color:#c0c5ce;\">         div {{ class: &quot;</span><span style=\"color:#a3be8c;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            img {{ src: &quot;</span><span style=\"color:#a3be8c;\">static/ESA_logo.svg</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">         }}\n</span><span style=\"color:#c0c5ce;\">         div {{ class: &quot;</span><span style=\"color:#a3be8c;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            img {{ src: &quot;</span><span style=\"color:#a3be8c;\">static/yclogo.svg</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">         }}\n</span><span style=\"color:#c0c5ce;\">         div {{ class: &quot;</span><span style=\"color:#a3be8c;\">h-12 w-40 bg-black p-2 m-4 flex justify-center items-center</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            img {{ src: &quot;</span><span style=\"color:#a3be8c;\">static/satellite.webp</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">         }}\n</span><span style=\"color:#c0c5ce;\">      }}\n</span><span style=\"color:#c0c5ce;\">   }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "usage",
            a { href: "#usage", class: "header", "Usage" }
        }
        p {
            "The  "
            code { "dx translate" }
            " command has several flags you can use to control your html input and rsx output."
        }
        p {
            "You can use the  "
            code { "--file" }
            " flag to translate an HTML file to RSX:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx translate --file index.html\n</span></pre>\n" }
        p {
            "Or you can use the  "
            code { "--raw" }
            " flag to translate a string of HTML to RSX:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx translate --raw &quot;</span><span style=\"color:#a3be8c;\">&lt;div&gt;Hello world&lt;/div&gt;</span><span style=\"color:#c0c5ce;\">&quot;\n</span></pre>\n" }
        p { "Both of those commands will output the following RSX:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">div {{ &quot;</span><span style=\"color:#a3be8c;\">Hello world</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span></pre>\n" }
        p {
            "The  "
            code { "dx translate" }
            " command will output the RSX to stdout. You can use the  "
            code { "--output" }
            " flag to write the RSX to a file instead."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx translate --raw &quot;</span><span style=\"color:#a3be8c;\">&lt;div&gt;Hello world&lt;/div&gt;</span><span style=\"color:#c0c5ce;\">&quot; --output index.rs\n</span></pre>\n" }
        p {
            "You can automatically create a component with the  "
            code { "--component" }
            " flag."
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx translate --raw &quot;</span><span style=\"color:#a3be8c;\">&lt;div&gt;Hello world&lt;/div&gt;</span><span style=\"color:#c0c5ce;\">&quot; --component\n</span></pre>\n" }
        p { "This will output the following component:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">component</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">   cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">      div {{ &quot;</span><span style=\"color:#a3be8c;\">Hello world</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">   }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p {
            "To learn more about the different flags  "
            code { "dx translate" }
            " supports, run  "
            code { "dx translate --help" }
            "."
        }
    }
}
#[component(no_case_check)]
pub fn ContributingIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "contributing",
            a { href: "#contributing", class: "header", "Contributing" }
        }
        p {
            "Development happens in the "
            a { href: "https://github.com/DioxusLabs/dioxus", "" }
            ". If you've found a bug or have an idea for a feature, please submit an issue (but first check if someone hasn't "
            a { href: "https://github.com/DioxusLabs/dioxus/issues", "" }
            ")."
        }
        p {
            a { href: "https://github.com/DioxusLabs/dioxus/discussions", "" }
            " can be used as a place to ask for help or talk about features. You can also join "
            a { href: "https://discord.gg/XgGxMSkvUM", "" }
            " where some development discussion happens."
        }
        h2 { id: "improving-docs",
            a { href: "#improving-docs", class: "header", "Improving Docs" }
        }
        p {
            "If you'd like to improve the docs, PRs are welcome! Both Rust docs ("
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages",
                ""
            }
            ") and this guide ("
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/docs/guide",
                ""
            }
            ") can be found in the GitHub repo."
        }
        h2 { id: "working-on-the-ecosystem",
            a { href: "#working-on-the-ecosystem", class: "header", "Working on the Ecosystem" }
        }
        p {
            "Part of what makes React great is the rich ecosystem. We'd like the same for Dioxus! So if you have a library in mind that you'd like to write and many people would benefit from, it will be appreciated. You can "
            a { href: "https://www.npmjs.com/search?q=keywords:react-component", "" }
            " for inspiration. Once you are done, add your library to the "
            a { href: "https://github.com/DioxusLabs/awesome-dioxus", "" }
            " list or share it in the "
            code { "#I-made-a-thing" }
            " channel on "
            a { href: "https://discord.gg/XgGxMSkvUM", "" }
            "."
        }
        h2 { id: "bugs--features",
            a { href: "#bugs--features", class: "header", "Bugs & Features" }
        }
        p {
            "If you've fixed "
            a { href: "https://github.com/DioxusLabs/dioxus/issues", "" }
            ", feel free to submit a PR! You can also take a look at "
            a { href: "contributing/./roadmap", "" }
            " and work on something in there. Consider "
            a { href: "https://discord.gg/XgGxMSkvUM", "" }
            " to the team first to make sure everyone's on the same page, and you don't do useless work!"
        }
        p {
            "All pull requests (including those made by a team member) must be approved by at least one other team member."
        }
        h2 { id: "before-you-contribute",
            a { href: "#before-you-contribute", class: "header", "Before you contribute" }
        }
        p {
            "You might be surprised that a lot of checks fail when making your first PR."
            em { "lots" }
            " of time, because the"
        }
        ul {
            li {
                "Format code with "
                a { href: "https://github.com/rust-lang/rustfmt", "" }
                ":"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo fmt --all\n</span></pre>\n" }
        ul {
            li {
                "Check all code "
                a { href: "https://doc.rust-lang.org/cargo/commands/cargo-check.html",
                    ""
                }
                ":"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo check --workspace --examples --tests\n</span></pre>\n" }
        ul {
            li {
                "Check if "
                a { href: "https://doc.rust-lang.org/clippy/", "" }
                " generates any warnings. Please fix these!"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo clippy --workspace --examples --tests -- -D warnings\n</span></pre>\n" }
        ul {
            li {
                "Test all code with "
                a { href: "https://doc.rust-lang.org/cargo/commands/cargo-test.html",
                    ""
                }
                ":"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo test --all --tests\n</span></pre>\n" }
        ul {
            li {
                "More tests, this time with "
                a { href: "https://sagiegurari.github.io/cargo-make/", "" }
                ". Here are all steps, including installation:"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo install --force cargo-make\n</span><span style=\"color:#c0c5ce;\">cargo make tests\n</span></pre>\n" }
        ul {
            li {
                "Test unsafe crates with "
                a { href: "https://github.com/rust-lang/miri", "" }
                ". Currently, this is used for the two MIRI tests in "
                code { "dioxus-core" }
                " and "
                code { "dioxus-native-core" }
                ":"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo miri test --package dioxus-core --test miri_stress\n</span><span style=\"color:#c0c5ce;\">cargo miri test --package dioxus-native-core --test miri_native\n</span></pre>\n" }
        ul {
            li {
                "Test with Playwright. This tests the UI itself, right in a browser. Here are all steps, including installation:"
                strong {
                    "Disclaimer: This might inexplicably fail on your machine without it being your fault."
                }
                " Make that PR anyway!"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cd playwright-tests\n</span><span style=\"color:#c0c5ce;\">npm ci\n</span><span style=\"color:#c0c5ce;\">npm install -D @playwright/test\n</span><span style=\"color:#c0c5ce;\">npx playwright install --with-deps\n</span><span style=\"color:#c0c5ce;\">npx playwright test\n</span></pre>\n" }
        h2 { id: "how-to-test-dioxus-with-local-crate",
            a { href: "#how-to-test-dioxus-with-local-crate", class: "header",
                "How to test dioxus with local crate"
            }
        }
        p {
            "If you are developing a feature, you should test it in your local setup before raising a PR. This process makes sure you are aware of your code functionality before being reviewed by peers."
        }
        ul {
            li { "Fork the following github repo (DioxusLabs/dioxus):" }
        }
        p {
            code { "https://github.com/DioxusLabs/dioxus" }
        }
        ul {
            li {
                "Create a new or use an existing rust crate (ignore this step if you will use an existing rust crate):"
            }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">cargo new --bin demo\n</span></pre>\n" }
        ul {
            li { "Add the dioxus dependencies for your rust crate (new/existing) in cargo.toml:" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dioxus = {{ path = &quot;</span><span style=\"color:#a3be8c;\">&lt;path to forked dioxus project&gt;/dioxus/packages/dioxus/</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">dioxus-web = {{ path = &quot;</span><span style=\"color:#a3be8c;\">&lt;path to forked dioxus project&gt;/dioxus/packages/web/</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span></pre>\n" }
        p {
            "This above example is for dioxus-web. To know about the dependencies for different renderer visit "
            a { href: "https://dioxuslabs.com/learn/0.4/getting_started", "" }
            "."
        }
        ul {
            li { "Run and test your feature" }
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx serve\n</span></pre>\n" }
        p {
            "If this is your first time with dioxus, please read "
            a { href: "https://dioxuslabs.com/learn/0.4/guide", "" }
            " to get familiar with dioxus."
        }
    }
}
#[component(no_case_check)]
pub fn ContributingProjectStructure() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "project-structure",
            a { href: "#project-structure", class: "header", "Project Structure" }
        }
        p {
            "There are many packages in the Dioxus organization. This document will help you understand the purpose of each package and how they fit together."
        }
        h2 { id: "renderers",
            a { href: "#renderers", class: "header", "Renderers" }
        }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/desktop",
                    ""
                }
                ": A Render that Runs Dioxus applications natively, but renders them with the system webview"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/mobile",
                    ""
                }
                ": A Render that Runs Dioxus applications natively, but renders them with the system webview. This is currently a copy of the desktop render"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/Web",
                    ""
                }
                ": Renders Dioxus applications in the browser by compiling to WASM and manipulating the DOM"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/liveview",
                    ""
                }
                ": A Render that Runs on the server, and renders using a websocket proxy in the browser"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/rink",
                    ""
                }
                ": A Renderer that renders a HTML-like tree into a terminal"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/dioxus-tui",
                    ""
                }
                ": A Renderer that uses Rink to render a Dioxus application in a terminal"
            }
            li {
                a { href: "https://github.com/DioxusLabs/blitz/tree/master/blitz-core",
                    ""
                }
                ": An experimental native renderer that renders a HTML-like tree using WGPU."
            }
            li {
                a { href: "https://github.com/DioxusLabs/blitz", "" }
                ": An experimental native renderer that uses Blitz-Core to render a Dioxus application using WGPU."
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/ssr",
                    ""
                }
                ": A Render that Runs Dioxus applications on the server, and renders them to HTML"
            }
        }
        h2 { id: "state-managementhooks",
            a { href: "#state-managementhooks", class: "header", "State Management/Hooks" }
        }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/hooks",
                    ""
                }
                ": A collection of common hooks for Dioxus applications"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/signals",
                    ""
                }
                ": A experimental state management library for Dioxus applications. This currently contains a "
                code { "Copy" }
                " version of UseRef"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus-std", "" }
                ": A collection of platform agnostic hooks to interact with system interfaces (The clipboard, camera, etc.)."
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/fermi",
                    ""
                }
                ": A global state management library for Dioxus applications."
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/router",
                    ""
                }
                ": A client-side router for Dioxus applications"
            }
        }
        h2 { id: "core-utilities",
            a { href: "#core-utilities", class: "header", "Core utilities" }
        }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/core",
                    ""
                }
                ": The core virtual dom implementation every Dioxus application uses"
                ul {
                    li {
                        "You can read more about the architecture of the core "
                        a { href: "https://dioxuslabs.com/blog/templates-diffing/",
                            ""
                        }
                        " and the "
                        a { href: "../custom_renderer", "" }
                    }
                }
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/RSX",
                    ""
                }
                ": The core parsing for RSX used for hot reloading, autoformatting, and the macro"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/core-macro",
                    ""
                }
                ": The rsx! macro used to write Dioxus applications. (This is a wrapper over the RSX crate)"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus-html-macro", "" }
                ": A html-like alternative to the RSX macro"
            }
        }
        h2 { id: "native-renderer-utilities",
            a { href: "#native-renderer-utilities", class: "header", "Native Renderer Utilities" }
        }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/native-core",
                    ""
                }
                ": Incrementally computed tree of states (mostly styles)"
                ul {
                    li {
                        "You can read more about how native-core can help you build native renderers in the "
                        a { href: "../custom_renderer/index.html#native-core", "" }
                    }
                }
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/native-core-macro",
                    ""
                }
                ": A helper macro for native core"
            }
            li {
                a { href: "https://github.com/DioxusLabs/taffy", "" }
                ": Layout engine powering Blitz-Core, Rink, and Bevy UI"
            }
        }
        h2 { id: "web-renderer-tooling",
            a { href: "#web-renderer-tooling", class: "header", "Web renderer tooling" }
        }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/html",
                    ""
                }
                ": defines html specific elements, events, and attributes"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/interpreter",
                    ""
                }
                ": defines browser bindings used by the web and desktop renderers"
            }
        }
        h2 { id: "developer-tooling",
            a { href: "#developer-tooling", class: "header", "Developer tooling" }
        }
        ul {
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/hot-reload",
                    ""
                }
                ": Macro that uses the RSX crate to hot reload static parts of any rsx! macro. This macro works with any non-web renderer with an "
                a { href: "https://crates.io/crates/dioxus-hot-reload", "" }
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/autofmt",
                    ""
                }
                ": Formats RSX code"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/RSX-rosetta",
                    ""
                }
                ": Handles conversion between HTML and RSX"
            }
            li {
                a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/cli",
                    ""
                }
                ": A Command Line Interface and VSCode extension to assist with Dioxus usage"
            }
        }
    }
}
#[component(no_case_check)]
pub fn ContributingWalkthroughReadme() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "walkthrough-of-the-hello-world-example-internals",
            a {
                href: "#walkthrough-of-the-hello-world-example-internals",
                class: "header",
                "Walkthrough of the Hello World Example Internals"
            }
        }
        p {
            "This walkthrough will take you through the internals of the Hello World example program. It will explain how major parts of Dioxus internals interact with each other to take the readme example from a source file to a running application. This guide should serve as a high-level overview of the internals of Dioxus. It is not meant to be a comprehensive guide."
        }
        p { "The core crate roughly works like this:" }
        p {
            img {
                src: "https://mermaid.ink/img/pako:eNqNk01v2zAMhv8KocsuTQ876lCgWAb0sGDD0mMAg7PoWogsBvpwWhT976MlJ3OKbKtOEvmIfEWRr6plQ0qrmDDR2uJTwGE1ft55kBXIGwqNHQYyVvywWt3BA3rjKGj4gs5BX0-V_1n4QtUthW_Mh6WzWgryg537OpJPsQJ_zsX9PrmG0fBwWxM2NIH1nmdRFuxTn4C7K4mn9djTpYAjWsnTcQBaSJiWxIcULEVILCIiu5Egyf3RhpTRwfr75tOC73LKggGmQkUcBLcDVUJyFoF_qcEkoxEVzZHDvjIXpnOhtm1PJp8rvcGw37Z8oPu4FlkvhVvbrivGypyP_3dWXRo2WdrAsp-fN391Qd5n1BBnSU0-GDy9sHyGo678xcOyOU7fMHcMHINNtcgIPfP-Wr2WAu6NeeRzGTS0z7fxgEd_7T3_Zi8b5kp1T1IxvvgWfjlu9x-SexHqo1VTN2qgMKA1MoavU6CdkkaSBlJatoY6zC7t1M6_CYo58VZUKZ1CphtVo8yDq3SHLopVJiZx2NTRLhP-9htxEk8q?type=png",
                alt: "",
                title: "",
            }
        }
        h2 { id: "the-source-file",
            a { href: "#the-source-file", class: "header", "The Source File" }
        }
        p {
            "We start will a hello world program. This program renders a desktop app with the text \"Hello World\" in a webview."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">pub fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(rsx! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">High-Five counter: {{count}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">Up high!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        button {{ onclick: </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count -= </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">, &quot;</span><span style=\"color:#a3be8c;\">Down low!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }})\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        p {
            a { href: "https://mermaid.live/edit#pako:eNqNkT1vwyAQhv8KvSlR48HphtQtqjK0S6tuSBGBS0CxwcJHk8rxfy_YVqxKVdR3ug_u4YXrQHmNwOFQ-bMyMhB7fReOJbVxfwyyMSy0l7GSpW1ARda727ksUy5MuSyKgvBC5ULA1h5N8WK_kCkfHWHgrBuiXsBynrvdsY9E3u1iM_eyvFOVVadMnELOap-o1911JLPHZ1b-YqLTc3LjTt7WifTZMJPsPdx1ov3Z_ellfcdL8R8vmTy5eUqsTUpZ-vzZzjAEK6gx1NLqtJwuNwSQwRoF8BRqGU4ChOvTORnJf3w7BZxCxBXERkvCjZXpQTXwg6zaVEVtyYe3cdvD0vsf4bucgw",
                ""
                img {
                    src: "https://mermaid.ink/img/pako:eNqNkT1vwyAQhv8KvSlR48HphtQtqjK0S6tuSBGBS0CxwcJHk8rxfy_YVqxKVdR3ug_u4YXrQHmNwOFQ-bMyMhB7fReOJbVxfwyyMSy0l7GSpW1ARda727ksUy5MuSyKgvBC5ULA1h5N8WK_kCkfHWHgrBuiXsBynrvdsY9E3u1iM_eyvFOVVadMnELOap-o1911JLPHZ1b-YqLTc3LjTt7WifTZMJPsPdx1ov3Z_ellfcdL8R8vmTy5eUqsTUpZ-vzZzjAEK6gx1NLqtJwuNwSQwRoF8BRqGU4ChOvTORnJf3w7BZxCxBXERkvCjZXpQTXwg6zaVEVtyYe3cdvD0vsf4bucgw?type=png",
                    alt: "",
                    title: "",
                }
            }
        }
        h2 { id: "the-rsx-macro",
            a { href: "#the-rsx-macro", class: "header", "The rsx! Macro" }
        }
        p {
            "Before the Rust compiler runs the program, it will expand all "
            a { href: "https://doc.rust-lang.org/reference/procedural-macros.html",
                ""
            }
            ". Here is what the hello world example looks like expanded:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    dioxus_desktop::launch(app);\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">app</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let mut</span><span style=\"color:#c0c5ce;\"> count = </span><span style=\"color:#96b5b4;\">use_state</span><span style=\"color:#c0c5ce;\">(cx, || </span><span style=\"color:#d08770;\">0</span><span style=\"color:#c0c5ce;\">);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    cx.</span><span style=\"color:#96b5b4;\">render</span><span style=\"color:#c0c5ce;\">(\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// rsx expands to LazyNodes::new\n</span><span style=\"color:#c0c5ce;\">        ::dioxus::core::LazyNodes::new(\n</span><span style=\"color:#c0c5ce;\">            </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|__cx: &amp;::dioxus::core::ScopeState| -&gt; ::dioxus::core::VNode {{\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// The template is every static part of the rsx\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#b48ead;\">static </span><span style=\"color:#d08770;\">TEMPLATE</span><span style=\"color:#c0c5ce;\">: ::dioxus::core::Template = ::dioxus::core::Template {{\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// This is the source location of the rsx that generated this template. This is used to make hot rsx reloading work. Hot rsx reloading just replaces the template with a new one generated from the rsx by the CLI.\n</span><span style=\"color:#c0c5ce;\">                    name: &quot;</span><span style=\"color:#a3be8c;\">examples</span><span style=\"color:#96b5b4;\">\\\\</span><span style=\"color:#a3be8c;\">readme.rs:14:15:250</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// The root nodes are the top level nodes of the rsx\n</span><span style=\"color:#c0c5ce;\">                    roots: &amp;[\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The h1 node\n</span><span style=\"color:#c0c5ce;\">                        ::dioxus::core::TemplateNode::Element {{\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#65737e;\">// Find the built in h1 tag in the dioxus_elements crate exported by the dioxus html crate\n</span><span style=\"color:#c0c5ce;\">                            tag: dioxus_elements::h1::</span><span style=\"color:#d08770;\">TAG_NAME</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                            namespace: dioxus_elements::h1::</span><span style=\"color:#d08770;\">NAME_SPACE</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                            attrs: &amp;[],\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#65737e;\">// The children of the h1 node\n</span><span style=\"color:#c0c5ce;\">                            children: &amp;[\n</span><span style=\"color:#c0c5ce;\">                                </span><span style=\"color:#65737e;\">// The dynamic count text node\n</span><span style=\"color:#c0c5ce;\">                                </span><span style=\"color:#65737e;\">// Any nodes that are dynamic have a dynamic placeholder with a unique index\n</span><span style=\"color:#c0c5ce;\">                                ::dioxus::core::TemplateNode::DynamicText {{\n</span><span style=\"color:#c0c5ce;\">                                    </span><span style=\"color:#65737e;\">// This index is used to find what element in `dynamic_nodes` to use instead of the placeholder\n</span><span style=\"color:#c0c5ce;\">                                    id: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                                }},\n</span><span style=\"color:#c0c5ce;\">                            ],\n</span><span style=\"color:#c0c5ce;\">                        }},\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The up high button node\n</span><span style=\"color:#c0c5ce;\">                        ::dioxus::core::TemplateNode::Element {{\n</span><span style=\"color:#c0c5ce;\">                            tag: dioxus_elements::button::</span><span style=\"color:#d08770;\">TAG_NAME</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                            namespace: dioxus_elements::button::</span><span style=\"color:#d08770;\">NAME_SPACE</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                            attrs: &amp;[\n</span><span style=\"color:#c0c5ce;\">                                </span><span style=\"color:#65737e;\">// The dynamic onclick listener attribute\n</span><span style=\"color:#c0c5ce;\">                                </span><span style=\"color:#65737e;\">// Any attributes that are dynamic have a dynamic placeholder with a unique index.\n</span><span style=\"color:#c0c5ce;\">                                ::dioxus::core::TemplateAttribute::Dynamic {{\n</span><span style=\"color:#c0c5ce;\">                                    </span><span style=\"color:#65737e;\">// Similar to dynamic nodes, dynamic attributes have a unique index used to find the attribute in `dynamic_attrs` to use instead of the placeholder\n</span><span style=\"color:#c0c5ce;\">                                    id: </span><span style=\"color:#d08770;\">0</span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                                }},\n</span><span style=\"color:#c0c5ce;\">                            ],\n</span><span style=\"color:#c0c5ce;\">                            children: &amp;[::dioxus::core::TemplateNode::Text {{ text: &quot;</span><span style=\"color:#a3be8c;\">Up high!</span><span style=\"color:#c0c5ce;\">&quot; }}],\n</span><span style=\"color:#c0c5ce;\">                        }},\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The down low button node\n</span><span style=\"color:#c0c5ce;\">                        ::dioxus::core::TemplateNode::Element {{\n</span><span style=\"color:#c0c5ce;\">                            tag: dioxus_elements::button::</span><span style=\"color:#d08770;\">TAG_NAME</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                            namespace: dioxus_elements::button::</span><span style=\"color:#d08770;\">NAME_SPACE</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                            attrs: &amp;[\n</span><span style=\"color:#c0c5ce;\">                                </span><span style=\"color:#65737e;\">// The dynamic onclick listener attribute\n</span><span style=\"color:#c0c5ce;\">                                ::dioxus::core::TemplateAttribute::Dynamic {{ id: </span><span style=\"color:#d08770;\">1</span><span style=\"color:#b48ead;\">usize </span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#c0c5ce;\">                            ],\n</span><span style=\"color:#c0c5ce;\">                            children: &amp;[::dioxus::core::TemplateNode::Text {{ text: &quot;</span><span style=\"color:#a3be8c;\">Down low!</span><span style=\"color:#c0c5ce;\">&quot; }}],\n</span><span style=\"color:#c0c5ce;\">                        }},\n</span><span style=\"color:#c0c5ce;\">                    ],\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// Node paths is a list of paths to every dynamic node in the rsx\n</span><span style=\"color:#c0c5ce;\">                    node_paths: &amp;[\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The first node path is the path to the dynamic node with an id of 0 (the count text node)\n</span><span style=\"color:#c0c5ce;\">                        &amp;[\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#65737e;\">// Go to the index 0 root node\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#d08770;\">0</span><span style=\"color:#b48ead;\">u8</span><span style=\"color:#c0c5ce;\">, </span><span style=\"color:#65737e;\">//\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#65737e;\">// Go to the first child of the root node\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#d08770;\">0</span><span style=\"color:#b48ead;\">u8</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                        ],\n</span><span style=\"color:#c0c5ce;\">                    ],\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// Attr paths is a list of paths to every dynamic attribute in the rsx\n</span><span style=\"color:#c0c5ce;\">                    attr_paths: &amp;[\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The first attr path is the path to the dynamic attribute with an id of 0 (the up high button onclick listener)\n</span><span style=\"color:#c0c5ce;\">                        &amp;[\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#65737e;\">// Go to the index 1 root node\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#d08770;\">1</span><span style=\"color:#b48ead;\">u8</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                        ],\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The second attr path is the path to the dynamic attribute with an id of 1 (the down low button onclick listener)\n</span><span style=\"color:#c0c5ce;\">                        &amp;[\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#65737e;\">// Go to the index 2 root node\n</span><span style=\"color:#c0c5ce;\">                            </span><span style=\"color:#d08770;\">2</span><span style=\"color:#b48ead;\">u8</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                        ],\n</span><span style=\"color:#c0c5ce;\">                    ],\n</span><span style=\"color:#c0c5ce;\">                }};\n</span><span style=\"color:#c0c5ce;\">                </span><span style=\"color:#65737e;\">// The VNode is a reference to the template with the dynamic parts of the rsx\n</span><span style=\"color:#c0c5ce;\">                ::dioxus::core::VNode {{\n</span><span style=\"color:#c0c5ce;\">                    parent: None,\n</span><span style=\"color:#c0c5ce;\">                    key: None,\n</span><span style=\"color:#c0c5ce;\">                    </span><span style=\"color:#65737e;\">// The static template this node will use. The template is stored in a Cell so it can be replaced with a new template when hot rsx reloading is enabled\n</span><span style=\"color:#c0c5ce;\">                    template: std::cell::Cell::new(</span><span style=\"color:#d08770;\">TEMPLATE</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">                    root_ids: dioxus::core::exports::bumpalo::collections::Vec::with_capacity_in(\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#d08770;\">3</span><span style=\"color:#c0c5ce;\">,\n</span><span style=\"color:#c0c5ce;\">                        __cx.</span><span style=\"color:#96b5b4;\">bump</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                    )\n</span><span style=\"color:#c0c5ce;\">                    .</span><span style=\"color:#96b5b4;\">into</span><span style=\"color:#c0c5ce;\">(),\n</span><span style=\"color:#c0c5ce;\">                    dynamic_nodes: __cx.</span><span style=\"color:#96b5b4;\">bump</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">alloc</span><span style=\"color:#c0c5ce;\">([\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The dynamic count text node (dynamic node id 0)\n</span><span style=\"color:#c0c5ce;\">                        __cx.</span><span style=\"color:#96b5b4;\">text_node</span><span style=\"color:#c0c5ce;\">(format_args!(&quot;</span><span style=\"color:#a3be8c;\">High-Five counter: {{0}}</span><span style=\"color:#c0c5ce;\">&quot;, count)),\n</span><span style=\"color:#c0c5ce;\">                    ]),\n</span><span style=\"color:#c0c5ce;\">                    dynamic_attrs: __cx.</span><span style=\"color:#96b5b4;\">bump</span><span style=\"color:#c0c5ce;\">().</span><span style=\"color:#96b5b4;\">alloc</span><span style=\"color:#c0c5ce;\">([\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The dynamic up high button onclick listener (dynamic attribute id 0)\n</span><span style=\"color:#c0c5ce;\">                        dioxus_elements::events::onclick(__cx, </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count += </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">                        </span><span style=\"color:#65737e;\">// The dynamic down low button onclick listener (dynamic attribute id 1)\n</span><span style=\"color:#c0c5ce;\">                        dioxus_elements::events::onclick(__cx, </span><span style=\"color:#b48ead;\">move </span><span style=\"color:#c0c5ce;\">|_| count -= </span><span style=\"color:#d08770;\">1</span><span style=\"color:#c0c5ce;\">),\n</span><span style=\"color:#c0c5ce;\">                    ]),\n</span><span style=\"color:#c0c5ce;\">                }}\n</span><span style=\"color:#c0c5ce;\">            }},\n</span><span style=\"color:#c0c5ce;\">        ),\n</span><span style=\"color:#c0c5ce;\">    )\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span></pre>\n",
        }
        p {
            "The rsx macro separates the static parts of the rsx (the template) and the dynamic parts (the "
            a { href: "https://docs.rs/dioxus-core/0.3.2/dioxus_core/prelude/struct.VNode.html#structfield.dynamic_nodes",
                ""
            }
            " and "
            a { href: "https://docs.rs/dioxus-core/0.3.2/dioxus_core/prelude/struct.VNode.html#structfield.dynamic_attrs",
                ""
            }
            ")."
        }
        p {
            "The static template only contains the parts of the rsx that cannot change at runtime with holes for the dynamic parts:"
        }
        p {
            a { href: "https://mermaid.live/edit#pako:eNqdksFuwjAMhl8l8wkkKtFx65njdtm0E0GVSQKJoEmVOgKEeHecUrXStO0wn5Lf9u8vcm6ggjZQwf4UzspiJPH2Ib3g6NLuELG1oiMkp0TsLs9EDu2iUeSCH8tz2HJmy3lRFPrqsXGq9mxeLzcbCU6LZSUGXWRdwnY7tY7Tdoko-Dq1U64fODgiUfzJMeuOe7_ZGq-ny2jNhGQu9DqT8NUK6w72RcL8dxgdzv4PnHLAKf-Fk80HoBUDrfkqeBkTUd8EC2hMbNBpXtYtJySQNQ0PqPioMR4lSH_nOkwUPq9eQUUxmQWkViOZtUN-UwPVHk8dq0Y7CvH9uf3-E9wfrmuk1A",
                ""
                img {
                    src: "https://mermaid.ink/img/pako:eNqdksFuwjAMhl8l8wkkKtFx65njdtm0E0GVSQKJoEmVOgKEeHecUrXStO0wn5Lf9u8vcm6ggjZQwf4UzspiJPH2Ib3g6NLuELG1oiMkp0TsLs9EDu2iUeSCH8tz2HJmy3lRFPrqsXGq9mxeLzcbCU6LZSUGXWRdwnY7tY7Tdoko-Dq1U64fODgiUfzJMeuOe7_ZGq-ny2jNhGQu9DqT8NUK6w72RcL8dxgdzv4PnHLAKf-Fk80HoBUDrfkqeBkTUd8EC2hMbNBpXtYtJySQNQ0PqPioMR4lSH_nOkwUPq9eQUUxmQWkViOZtUN-UwPVHk8dq0Y7CvH9uf3-E9wfrmuk1A?type=png",
                    alt: "",
                    title: "",
                }
            }
        }
        p {
            "The dynamic_nodes and dynamic_attributes are the parts of the rsx that can change at runtime:"
        }
        p {
            a { href: "https://mermaid.live/edit#pako:eNp1UcFOwzAM_RXLVzZpvUbighDiABfgtkxTlnirtSaZUgc0df130hZEEcwny35-79nu0EZHqHDfxA9bmyTw9KIDlGjz7pDMqQZ3DsazhVCQ7dQbwnEiKxwDvN3NqhN4O4C3q_VaIztYKXjkQ7184HcCG3MQSgq6Mes1bjbTPAV3RdqIJN5l-V__2_Fcf5iY68dgG7ZHBT4WD5ftZfIBN7dQ_Tj4w1B9MVTXGZa_GMYdcIGekjfsymW7oaFRavKkUZXUmXTUqENfcCZLfD0Hi0pSpgXmkzNC92zKATyqvWnaUiXHEtPz9KrxY_0nzYOPmA",
                ""
                img {
                    src: "https://mermaid.ink/img/pako:eNp1UcFOwzAM_RXLVzZpvUbighDiABfgtkxTlnirtSaZUgc0df130hZEEcwny35-79nu0EZHqHDfxA9bmyTw9KIDlGjz7pDMqQZ3DsazhVCQ7dQbwnEiKxwDvN3NqhN4O4C3q_VaIztYKXjkQ7184HcCG3MQSgq6Mes1bjbTPAV3RdqIJN5l-V__2_Fcf5iY68dgG7ZHBT4WD5ftZfIBN7dQ_Tj4w1B9MVTXGZa_GMYdcIGekjfsymW7oaFRavKkUZXUmXTUqENfcCZLfD0Hi0pSpgXmkzNC92zKATyqvWnaUiXHEtPz9KrxY_0nzYOPmA?type=png",
                    alt: "",
                    title: "",
                }
            }
        }
        h2 { id: "launching-the-app",
            a { href: "#launching-the-app", class: "header", "Launching the App" }
        }
        p {
            "The app is launched by calling the  "
            code { "launch" }
            " function with the root component. Internally, this function will create a new web view using "
            a { href: "https://docs.rs/wry/latest/wry/", "" }
            " and create a virtual dom with the root component ("
            code { "fn app()" }
            " in the readme example). This guide will not explain the renderer in-depth, but you can read more about it in the "
            a { href: "/guide/custom-renderer", "" }
            " section."
        }
        h2 { id: "the-virtual-dom",
            a { href: "#the-virtual-dom", class: "header", "The Virtual DOM" }
        }
        p {
            "Before we dive into the initial render in the virtual DOM, we need to discuss what the virtual DOM is. The virtual DOM is a representation of the DOM that is used to diff the current DOM from the new DOM. This diff is then used to create a list of mutations that need to be applied to the DOM to bring it into sync with the virtual DOM."
        }
        p { "The Virtual DOM roughly looks like this:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">pub struct </span><span style=\"color:#c0c5ce;\">VirtualDom {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// All the templates that have been created or set during hot reloading\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\">(crate) </span><span style=\"color:#bf616a;\">templates</span><span style=\"color:#c0c5ce;\">: FxHashMap&lt;TemplateId, FxHashMap&lt;</span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">, Template&lt;</span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt;&gt;&gt;,\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// A slab of all the scopes that have been created\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\">(crate) </span><span style=\"color:#bf616a;\">scopes</span><span style=\"color:#c0c5ce;\">: ScopeSlab,\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// All scopes that have been marked as dirty\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\">(crate) </span><span style=\"color:#bf616a;\">dirty_scopes</span><span style=\"color:#c0c5ce;\">: BTreeSet&lt;DirtyScope&gt;,\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Every element is actually a dual reference - one to the template and the other to the dynamic node in that template\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\">(crate) </span><span style=\"color:#bf616a;\">elements</span><span style=\"color:#c0c5ce;\">: Slab&lt;ElementRef&gt;,\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// This receiver is used to receive messages from hooks about what scopes need to be marked as dirty\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\">(crate) </span><span style=\"color:#bf616a;\">rx</span><span style=\"color:#c0c5ce;\">: futures_channel::mpsc::UnboundedReceiver&lt;SchedulerMsg&gt;,\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// The changes queued up to be sent to the renderer\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">pub</span><span style=\"color:#c0c5ce;\">(crate) </span><span style=\"color:#bf616a;\">mutations</span><span style=\"color:#c0c5ce;\">: Mutations&lt;</span><span style=\"color:#b48ead;\">&#39;static</span><span style=\"color:#c0c5ce;\">&gt;,\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        blockquote {
            p {
                "What is a "
                a { href: "https://docs.rs/slab/latest/slab/", "" }
                "?"
            }
            p {
                "A slab acts like a hashmap with integer keys if you don't care about the value of the keys. It is internally backed by a dense vector which makes it more efficient than a hashmap. When you insert a value into a slab, it returns an integer key that you can use to retrieve the value later."
            }
        }
        blockquote {
            p { "How does Dioxus use slabs?" }
            p {
                "Dioxus uses \"synchronized slabs\" to communicate between the renderer and the VDOM. When a node is created in the Virtual DOM, an (elementId, mutation) pair is passed to the renderer to identify that node, which the renderer will then render in actual DOM. These ids are also used by the Virtual Dom to reference that node in future mutations, like setting an attribute on a node or removing a node. When the renderer sends an event to the Virtual Dom, it sends the ElementId of the node that the event was triggered on. The Virtual DOM uses this id to find that node in the slab and then run the necessary event handlers."
            }
        }
        p {
            "The virtual DOM is a tree of scopes. A new  "
            code { "Scope" }
            " is created for every component when it is first rendered and recycled when the component is unmounted."
        }
        p { "Scopes serve three main purposes:" }
        ol {
            li { "They store the state of hooks used by the component" }
            li {
                "They store the state for the context API (for example: using"
                a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/fn.use_shared_state_provider.html",
                    ""
                }
                ")."
            }
            li {
                "They store the current and previous versions of the "
                code { "VNode" }
                " that was rendered, so they can be"
            }
        }
        h3 { id: "the-initial-render",
            a { href: "#the-initial-render", class: "header", "The Initial Render" }
        }
        p { "The root scope is created and rebuilt:" }
        ol {
            li { "The root component is run" }
            li {
                "The root component returns a "
                code { "VNode" }
            }
            li {
                "Mutations for this "
                code { "VNode" }
                " are created and added to the mutation list (this may involve creating new child components)"
            }
            li {
                "The "
                code { "VNode" }
                " is stored in the root's "
                code { "Scope" }
                "."
            }
        }
        p {
            "After the root's  "
            code { "Scope" }
            " is built, all generated mutations are sent to the renderer, which applies them to the DOM."
        }
        p {
            "After the initial render, the root  "
            code { "Scope" }
            " looks like this:"
        }
        p {
            a { href: "https://mermaid.live/edit#pako:eNqtVE1P4zAQ_SuzPrWikRpWXCLtBRDisItWsOxhCaqM7RKricdyJrQV8N93QtvQNCkfEnOynydv3nxkHoVCbUQipjnOVSYDwc_L1AFbWd3dB-kzuEQkuFLoDUwDFkCZAek9nGDh0RlHK__atA1GkUUHf45f0YbppAqB_aOzIAvz-t7-chN_Y-1bw1WSJKsglIu2w9tktWXxIIuHURT5XCqTYa5NmDguw2R8c5MKq2GcgF46WTB_jafi9rZL0yi5q4jQTSrf9altO4okCn1Ratwyz55Qxuku2ITlTMgs6HCQimsPmb3PvqVi-L5gjXP3QcnxWnL8JZLrwGvR31n0KV-Bx6-r-oVkT_-3G1S-NQLbk9i8rj7udP2cixed2QcDCitHJiQw7ub3EVlNecrPjudG2-6soFO5VbMECmR9T5OnlUY4-AFxfw9aTFst3McU9TK1Otm6NEn_DubBYlX2_dglLXOz48FgwJmJ5lZTlhz6xWgNaFnyDgpymcARHO0W2a9J_l5w2wYXvHuGPcqaQ-rESBQmFNJq3nCPNZoK3l4sUSR81DLMUpG6Z_aTFeHV0imRUKjMSFReSzKnVnKGhUimMi8ZNdoShl-rlfmyOUfCS_cPcePz_B_Wl4pc",
                ""
                img {
                    src: "https://mermaid.ink/img/pako:eNqtVE1P4zAQ_SuzPrWikRpWXCLtBRDisItWsOxhCaqM7RKricdyJrQV8N93QtvQNCkfEnOynydv3nxkHoVCbUQipjnOVSYDwc_L1AFbWd3dB-kzuEQkuFLoDUwDFkCZAek9nGDh0RlHK__atA1GkUUHf45f0YbppAqB_aOzIAvz-t7-chN_Y-1bw1WSJKsglIu2w9tktWXxIIuHURT5XCqTYa5NmDguw2R8c5MKq2GcgF46WTB_jafi9rZL0yi5q4jQTSrf9altO4okCn1Ratwyz55Qxuku2ITlTMgs6HCQimsPmb3PvqVi-L5gjXP3QcnxWnL8JZLrwGvR31n0KV-Bx6-r-oVkT_-3G1S-NQLbk9i8rj7udP2cixed2QcDCitHJiQw7ub3EVlNecrPjudG2-6soFO5VbMECmR9T5OnlUY4-AFxfw9aTFst3McU9TK1Otm6NEn_DubBYlX2_dglLXOz48FgwJmJ5lZTlhz6xWgNaFnyDgpymcARHO0W2a9J_l5w2wYXvHuGPcqaQ-rESBQmFNJq3nCPNZoK3l4sUSR81DLMUpG6Z_aTFeHV0imRUKjMSFReSzKnVnKGhUimMi8ZNdoShl-rlfmyOUfCS_cPcePz_B_Wl4pc?type=png",
                    alt: "",
                    title: "",
                }
            }
        }
        h3 { id: "waiting-for-events",
            a { href: "#waiting-for-events", class: "header", "Waiting for Events" }
        }
        p {
            "The Virtual DOM will only ever re-render a  "
            code { "Scope" }
            " if it is marked as dirty. Each hook is responsible for marking the  "
            code { "Scope" }
            " as dirty if the state has changed. Hooks can mark a scope as dirty by sending a message to the Virtual Dom's channel. You can see the "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/hooks",
                ""
            }
            " for the hooks dioxus includes by default on how this is done. Calling "
            code { "needs_update()" }
            " on a hook will also cause it to mark its scope as dirty."
        }
        p { "There are generally two ways a scope is marked as dirty:" }
        ol {
            li {
                "The renderer triggers an event: An event listener on this event may be called, which may mark a"
            }
            li {
                "The renderer calls"
                a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.VirtualDom.html#method.wait_for_work",
                    ""
                    code { "wait_for_work" }
                }
                ":"
            }
        }
        p {
            "Once at least one  "
            code { "Scope" }
            " is marked as dirty, the renderer can call "
            a { href: "https://docs.rs/dioxus/latest/dioxus/prelude/struct.VirtualDom.html#method.render_with_deadline",
                ""
                code { "render_with_deadline" }
            }
            " to diff the dirty scopes."
        }
        h3 { id: "diffing-scopes",
            a { href: "#diffing-scopes", class: "header", "Diffing Scopes" }
        }
        p {
            "When a user clicks the \"up high\" button, the root  "
            code { "Scope" }
            " will be marked as dirty by the  "
            code { "use_state" }
            " hook. The desktop renderer will then call  "
            code { "render_with_deadline" }
            ", which will diff the root  "
            code { "Scope" }
            "."
        }
        p {
            "To start the diffing process, the component function is run. After the root component is run it, the root  "
            code { "Scope" }
            " will look like this:"
        }
        p {
            a { href: "https://mermaid.live/edit#pako:eNrFVlFP2zAQ_iuen0BrpCaIl0i8AEJ72KQJtpcRFBnbJVYTn-U4tBXw33dpG5M2CetoBfdkny_ffb67fPIT5SAkjekkhxnPmHXk-3WiCVpZ3T9YZjJyDeDIDQcjycRCQVwmCTOGXEBhQEvtVvG1CWUldwo0-XX-6vVIF5W1GB9cWVbI1_PNL5v8jW3uPFbpmFOc2HK-GfA2WG1ZeJSFx0EQmJxxmUEupE01liEd394mVAkyjolYaFYgfu1P6N1dF8Yzua-cA51WphtTWzsLc872Zan9CnEGUkktuk6fFm_i5NxFRwn9bUimHrIvCT3-N2EBM70j5XBNOTwI5TrxmvQJkr7ELcHx67Jeggz0v92g8q0RaE-iP1193On6NyxecKUeJeFQaSdtTMLu_Xah5ctT_u94Nty2ZwU0zxWfxqQA5PecPq84kq9nfRw7SK0WDiEFZ4O37d34S_-08lFBVfb92KVb5HIrAp0WpjKYKeGyODLz0dohWIkaZNkiJqfkdLvIH6oRaTSoEmm0n06k0a5K0ZdpL61Io0Yt0nfpxc7UQ0_9cJrhyZ8syX-6brS706Mc489Vjja7fbWj3cxDqIdfJJqOaCFtwZTAV8hT7U0ovjBQRmiMS8HsNKGJfsE4Vjm4WWhOY2crOaKVEczJS8WwgAWNJywv0SuFcmB_rJ41y9fNiBqm_wA0MS9_AUuAiy0",
                ""
                img {
                    src: "https://mermaid.ink/img/pako:eNrFVlFP2zAQ_iuen0BrpCaIl0i8AEJ72KQJtpcRFBnbJVYTn-U4tBXw33dpG5M2CetoBfdkny_ffb67fPIT5SAkjekkhxnPmHXk-3WiCVpZ3T9YZjJyDeDIDQcjycRCQVwmCTOGXEBhQEvtVvG1CWUldwo0-XX-6vVIF5W1GB9cWVbI1_PNL5v8jW3uPFbpmFOc2HK-GfA2WG1ZeJSFx0EQmJxxmUEupE01liEd394mVAkyjolYaFYgfu1P6N1dF8Yzua-cA51WphtTWzsLc872Zan9CnEGUkktuk6fFm_i5NxFRwn9bUimHrIvCT3-N2EBM70j5XBNOTwI5TrxmvQJkr7ELcHx67Jeggz0v92g8q0RaE-iP1193On6NyxecKUeJeFQaSdtTMLu_Xah5ctT_u94Nty2ZwU0zxWfxqQA5PecPq84kq9nfRw7SK0WDiEFZ4O37d34S_-08lFBVfb92KVb5HIrAp0WpjKYKeGyODLz0dohWIkaZNkiJqfkdLvIH6oRaTSoEmm0n06k0a5K0ZdpL61Io0Yt0nfpxc7UQ0_9cJrhyZ8syX-6brS706Mc489Vjja7fbWj3cxDqIdfJJqOaCFtwZTAV8hT7U0ovjBQRmiMS8HsNKGJfsE4Vjm4WWhOY2crOaKVEczJS8WwgAWNJywv0SuFcmB_rJ41y9fNiBqm_wA0MS9_AUuAiy0?type=png",
                    alt: "",
                    title: "",
                }
            }
        }
        p {
            "Next, the Virtual DOM will compare the new VNode with the previous VNode and only update the parts of the tree that have changed. Because of this approach, when a component is re-rendered only the parts of the tree that have changed will be updated in the DOM by the renderer."
        }
        p {
            "The diffing algorithm goes through the list of dynamic attributes and nodes and compares them to the previous VNode. If the attribute or node has changed, a mutation that describes the change is added to the mutation list."
        }
        p {
            "Here is what the diffing algorithm looks like for the root  "
            code { "Scope" }
            " (red lines indicate that a mutation was generated, and green lines indicate that no mutation was generated)"
        }
        p {
            a { href: "https://mermaid.live/edit#pako:eNrFlFFPwjAQx7_KpT7Kko2Elya8qCE-aGLAJ5khpe1Yw9Zbug4k4He3OJjbGPig0T5t17tf_nf777aEo5CEkijBNY-ZsfAwDjW4kxfzhWFZDGNECxOOmYTIYAo2lsCyDG4xzVBLbcv8_RHKSG4V6orSIN0Wxrh8b2RYKr_uTyubd1W92GiWKg7aac6bOU3G803HbVk82xfP_Ok0JEqAT-FeLWJvpFYSOBbaSkMhCMnra5MgtfhWFrPWqHlhL2urT6atbU-oa0PNE8WXFFJ0-nazXakRroddGk9IwYEUnCd5w7Pddr5UTT8ZuVJY5F0fM7ebRLYyXNDgUnprJWxM-9lb7xAQLHe-M2xDYQCD9pD_2hez_kVn-P_rjLq6n3qjYv2iO5qz9DyvPdyv1ETp5eTTJ_7BGvQq8v1TVtl5jXUcRRcrqFh-dI4VtFlBN6t_ynLNkh5JpUmZEm5rbvfhkLiN6H4BQt2jYGYZklC_uzxWWJxsNCfUmkL2SJEJZuWdYs4cKaERS3IXlUJZNI_lGv7cxj2SMf2CeMx5_wBcbK19",
                ""
                img {
                    src: "https://mermaid.ink/img/pako:eNrFlFFPwjAQx7_KpT7Kko2Elya8qCE-aGLAJ5khpe1Yw9Zbug4k4He3OJjbGPig0T5t17tf_nf777aEo5CEkijBNY-ZsfAwDjW4kxfzhWFZDGNECxOOmYTIYAo2lsCyDG4xzVBLbcv8_RHKSG4V6orSIN0Wxrh8b2RYKr_uTyubd1W92GiWKg7aac6bOU3G803HbVk82xfP_Ok0JEqAT-FeLWJvpFYSOBbaSkMhCMnra5MgtfhWFrPWqHlhL2urT6atbU-oa0PNE8WXFFJ0-nazXakRroddGk9IwYEUnCd5w7Pddr5UTT8ZuVJY5F0fM7ebRLYyXNDgUnprJWxM-9lb7xAQLHe-M2xDYQCD9pD_2hez_kVn-P_rjLq6n3qjYv2iO5qz9DyvPdyv1ETp5eTTJ_7BGvQq8v1TVtl5jXUcRRcrqFh-dI4VtFlBN6t_ynLNkh5JpUmZEm5rbvfhkLiN6H4BQt2jYGYZklC_uzxWWJxsNCfUmkL2SJEJZuWdYs4cKaERS3IXlUJZNI_lGv7cxj2SMf2CeMx5_wBcbK19?type=png",
                    alt: "",
                    title: "",
                }
            }
        }
        h2 { id: "conclusion",
            a { href: "#conclusion", class: "header", "Conclusion" }
        }
        p {
            "This is only a brief overview of how the Virtual Dom works. There are several aspects not yet covered in this guide including:"
        }
        ul {
            li { "How the Virtual DOM handles async-components" }
            li { "Keyed diffing" }
            li {
                "Using "
                a { href: "https://github.com/fitzgen/bumpalo", "" }
                " to efficiently allocate VNodes."
            }
        }
        p {
            "If you need more information about the Virtual Dom, you can read the code of the "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/core",
                ""
            }
            " crate or reach out to us on "
            a { href: "https://discord.gg/XgGxMSkvUM", "" }
            "."
        }
    }
}
#[component(no_case_check)]
pub fn ContributingGuidingPrinciples() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "overall-goals",
            a { href: "#overall-goals", class: "header", "Overall Goals" }
        }
        p {
            "This document outlines some of the overall goals for Dioxus. These goals are not set in stone, but they represent general guidelines for the project."
        }
        p {
            "The goal of Dioxus is to make it easy to build "
            strong { "cross-platform applications that scale" }
            "."
        }
        h2 { id: "cross-platform",
            a { href: "#cross-platform", class: "header", "Cross-Platform" }
        }
        p {
            "Dioxus is designed to be cross-platform by default. This means that it should be easy to build applications that run on the web, desktop, and mobile. However, Dioxus should also be flexible enough to allow users to opt into platform-specific features when needed. The  "
            code { "use_eval" }
            " is one example of this. By default, Dioxus does not assume that the platform supports JavaScript, but it does provide a hook that allows users to opt into JavaScript when needed."
        }
        h2 { id: "performance",
            a { href: "#performance", class: "header", "Performance" }
        }
        p {
            "As Dioxus applications grow, they should remain relatively performant without the need for manual optimizations. There will be cases where manual optimizations are needed, but Dioxus should try to make these cases as rare as possible."
        }
        p {
            "One of the benefits of the core architecture of Dioxus is that it delivers reasonable performance even when components are rerendered often. It is based on a Virtual Dom which performs diffing which should prevent unnecessary re-renders even when large parts of the component tree are rerun. On top of this, Dioxus groups static parts of the RSX tree together to skip diffing them entirely."
        }
        h2 { id: "type-safety",
            a { href: "#type-safety", class: "header", "Type Safety" }
        }
        p {
            "As teams grow, the Type safety of Rust is a huge advantage. Dioxus should leverage this advantage to make it easy to build applications with large teams."
        }
        p {
            "To take full advantage of Rust's type system, Dioxus should try to avoid exposing public  "
            code { "Any" }
            " types and string-ly typed APIs where possible."
        }
        h2 { id: "developer-experience",
            a { href: "#developer-experience", class: "header", "Developer Experience" }
        }
        p { "Dioxus should be easy to learn and ergonomic to use." }
        ul {
            li {
                p {
                    "The API of Dioxus attempts to remain close to React's API where possible. This makes it easier for people to learn Dioxus if they already know React"
                }
            }
            li {
                p {
                    "We can avoid the tradeoff between simplicity and flexibility by providing multiple layers of API: One for the very common use case, one for low-level control"
                }
                ul {
                    li {
                        "Hooks: the hooks crate has the most common use cases, but "
                        code { "cx.hook" }
                        " provides a way to access the underlying persistent reference if needed."
                    }
                    li {
                        "The builder pattern in platform Configs: The builder pattern is used to default to the most common use case, but users can change the defaults if needed."
                    }
                }
            }
            li {
                p { "Documentation:" }
                ul {
                    li { "All public APIs should have rust documentation" }
                    li {
                        "Examples should be provided for all public features. These examples both serve as documentation and testing. They are checked by CI to ensure that they continue to compile"
                    }
                    li { "The most common workflows should be documented in the guide" }
                }
            }
        }
    }
}
#[component(no_case_check)]
pub fn ContributingRoadmap() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "roadmap--feature-set",
            a { href: "#roadmap--feature-set", class: "header", "Roadmap & Feature-set" }
        }
        p {
            "This feature set and roadmap can help you decide if what Dioxus can do today works for you."
        }
        p {
            "If a feature that you need doesn't exist or you want to contribute to projects on the roadmap, feel free to get involved by "
            a { href: "https://discord.gg/XgGxMSkvUM", "" }
            "."
        }
        p { "Generally, here's the status of each platform:" }
        ul {
            li {
                p {
                    strong { "Web" }
                    ": Dioxus is a great choice for pure web-apps – especially for CRUD/complex apps. However, it does lack the ecosystem of React, so you might be missing a component library or some useful hook."
                }
            }
            li {
                p {
                    strong { "SSR" }
                    ": Dioxus is a great choice for pre-rendering, hydration, and rendering HTML on a web endpoint. Be warned – the VirtualDom is not (currently) "
                    code { "Send + Sync" }
                    "."
                }
            }
            li {
                p {
                    strong { "Desktop" }
                    ": You can build very competent single-window desktop apps right now. However, multi-window apps require support from Dioxus core and are not ready."
                }
            }
            li {
                p {
                    strong { "Mobile" }
                    ": Mobile support is very young. You'll be figuring things out as you go and there are not many support crates for peripherals."
                }
            }
            li {
                p {
                    strong { "LiveView" }
                    ": LiveView support is very young. You'll be figuring things out as you go. Thankfully, none of it is too hard and any work can be upstreamed into Dioxus."
                }
            }
        }
        h2 { id: "features",
            a { href: "#features", class: "header", "Features" }
        }
        hr {}
        table {
            thead {
                th { "Feature" }
                th { "Status" }
                th { "Description" }
            }
            tr {
                th { "Conditional Rendering" }
                th { "x" }
                th { "if/then to hide/show component" }
            }
            tr {
                th { "Map, Iterator" }
                th { "x" }
                th { "map/filter/reduce to produce rsx!" }
            }
            tr {
                th { "Keyed Components" }
                th { "x" }
                th { "advanced diffing with keys" }
            }
            tr {
                th { "Web" }
                th { "x" }
                th { "renderer for web browser" }
            }
            tr {
                th { "Desktop (webview)" }
                th { "x" }
                th { "renderer for desktop" }
            }
            tr {
                th { "Shared State (Context)" }
                th { "x" }
                th { "share state through the tree" }
            }
            tr {
                th { "Hooks" }
                th { "x" }
                th { "memory cells in components" }
            }
            tr {
                th { "SSR" }
                th { "x" }
                th { "render directly to string" }
            }
            tr {
                th { "Component Children" }
                th { "x" }
                th { "cx.children() as a list of nodes" }
            }
            tr {
                th { "Headless components" }
                th { "x" }
                th { "components that don't return real elements" }
            }
            tr {
                th { "Fragments" }
                th { "x" }
                th { "multiple elements without a real root" }
            }
            tr {
                th { "Manual Props" }
                th { "x" }
                th { "Manually pass in props with spread syntax" }
            }
            tr {
                th { "Controlled Inputs" }
                th { "x" }
                th { "stateful wrappers around inputs" }
            }
            tr {
                th { "CSS/Inline Styles" }
                th { "x" }
                th { "syntax for inline styles/attribute groups" }
            }
            tr {
                th { "Custom elements" }
                th { "x" }
                th { "Define new element primitives" }
            }
            tr {
                th { "Suspense" }
                th { "x" }
                th { "schedule future render from future/promise" }
            }
            tr {
                th { "Integrated error handling" }
                th { "x" }
                th { "Gracefully handle errors with ? syntax" }
            }
            tr {
                th { "NodeRef" }
                th { "x" }
                th { "gain direct access to nodes" }
            }
            tr {
                th { "Re-hydration" }
                th { "x" }
                th { "Pre-render to HTML to speed up first contentful paint" }
            }
            tr {
                th { "Jank-Free Rendering" }
                th { "x" }
                th { "Large diffs are segmented across frames for silky-smooth transitions" }
            }
            tr {
                th { "Effects" }
                th { "x" }
                th { "Run effects after a component has been committed to render" }
            }
            tr {
                th { "Portals" }
                th { "*" }
                th { "Render nodes outside of the traditional tree structure" }
            }
            tr {
                th { "Cooperative Scheduling" }
                th { "*" }
                th { "Prioritize important events over non-important events" }
            }
            tr {
                th { "Server Components" }
                th { "*" }
                th { "Hybrid components for SPA and Server" }
            }
            tr {
                th { "Bundle Splitting" }
                th { "i" }
                th { "Efficiently and asynchronously load the app" }
            }
            tr {
                th { "Lazy Components" }
                th { "i" }
                th { "Dynamically load the new components as the page is loaded" }
            }
            tr {
                th { "1st class global state" }
                th { "x" }
                th { "redux/recoil/mobx on top of context" }
            }
            tr {
                th { "Runs natively" }
                th { "x" }
                th { "runs as a portable binary w/o a runtime (Node)" }
            }
            tr {
                th { "Subtree Memoization" }
                th { "x" }
                th { "skip diffing static element subtrees" }
            }
            tr {
                th { "High-efficiency templates" }
                th { "x" }
                th { "rsx! calls are translated to templates on the DOM's side" }
            }
            tr {
                th { "Compile-time correct" }
                th { "x" }
                th { "Throw errors on invalid template layouts" }
            }
            tr {
                th { "Heuristic Engine" }
                th { "x" }
                th { "track component memory usage to minimize future allocations" }
            }
            tr {
                th { "Fine-grained reactivity" }
                th { "i" }
                th { "Skip diffing for fine-grain updates" }
            }
        }
        ul {
            li { "x = implemented and working" }
            li { "* = actively being worked on" }
            li { "i = not yet implemented or being worked on" }
        }
        h2 { id: "roadmap",
            a { href: "#roadmap", class: "header", "Roadmap" }
        }
        p { "These Features are planned for the future of Dioxus:" }
        h3 { id: "core",
            a { href: "#core", class: "header", "Core" }
        }
        ul {
            li { "[" }
            li { "[" }
            li { "[" }
            li { "[" }
            li { "[" }
            li { "[" }
        }
        h3 { id: "ssr",
            a { href: "#ssr", class: "header", "SSR" }
        }
        ul {
            li { "[" }
            li { "[" }
        }
        h3 { id: "desktop",
            a { href: "#desktop", class: "header", "Desktop" }
        }
        ul {
            li { "[" }
            li { "[" }
            li { "[" }
        }
        h3 { id: "mobile",
            a { href: "#mobile", class: "header", "Mobile" }
        }
        ul {
            li {
                "["
                ul {
                    li { "[" }
                    li { "[" }
                    li { "[" }
                    li { "[" }
                    li { "[" }
                    li { "[" }
                    li { "[" }
                    li { "[" }
                }
            }
            li { "[" }
        }
        h3 { id: "bundling-cli",
            a { href: "#bundling-cli", class: "header", "Bundling (CLI)" }
        }
        ul {
            li { "[" }
            li { "[" }
            li { "[" }
            li { "[" }
            li { "[" }
            li { "[" }
            li { "[" }
            li { "[" }
            li { "[" }
        }
        h3 { id: "essential-hooks",
            a { href: "#essential-hooks", class: "header", "Essential hooks" }
        }
        ul {
            li { "[" }
            li { "[" }
            li { "[" }
        }
        h2 { id: "work-in-progress",
            a { href: "#work-in-progress", class: "header", "Work in Progress" }
        }
        h3 { id: "build-tool",
            a { href: "#build-tool", class: "header", "Build Tool" }
        }
        p {
            "We are currently working on our own build tool called "
            a { href: "https://github.com/DioxusLabs/dioxus/tree/master/packages/cli",
                ""
            }
            " which will support:"
        }
        ul {
            li { "an interactive TUI" }
            li { "on-the-fly reconfiguration" }
            li { "hot CSS reloading" }
            li { "two-way data binding between browser and source code" }
            li {
                "an interpreter for "
                code { "rsx!" }
            }
            li { "ability to publish to github/netlify/vercel" }
            li { "bundling for iOS/Desktop/etc" }
        }
        h3 { id: "server-component-support",
            a { href: "#server-component-support", class: "header", "Server Component Support" }
        }
        p {
            "While not currently fully implemented, the expectation is that LiveView apps can be a hybrid between Wasm and server-rendered where only portions of a page are \"live\" and the rest of the page is either server-rendered, statically generated, or handled by the host SPA."
        }
        h3 { id: "native-rendering",
            a { href: "#native-rendering", class: "header", "Native rendering" }
        }
        p {
            "We are currently working on a native renderer for Dioxus using WGPU called "
            a { href: "https://github.com/DioxusLabs/blitz/", "" }
            ". This will allow you to build apps that are rendered natively for iOS, Android, and Desktop."
        }
    }
}
#[component(no_case_check)]
pub fn MigrationIndex() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "03-migration-guide",
            a { href: "#03-migration-guide", class: "header", "0.3 Migration Guide" }
        }
        p {
            "This guide will outline the API changes between the  "
            code { "0.3" }
            " and  "
            code { "0.4" }
            " releases. The two major breaking changes in this release are how hot reloading works on desktop platforms and how the router works:"
        }
        ul {
            li {
                a { href: "migration/hot_reload", "" }
            }
            li {
                a { href: "migration/router", "" }
            }
        }
    }
}
#[component(no_case_check)]
pub fn MigrationRouter() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "router",
            a { href: "#router", class: "header", "Router" }
        }
        p {
            "The router has been entirely rewritten in the  "
            code { "0.4" }
            " release to provide type safe routes. This guide serves to help you upgrade your project to the new router. For more information on the router, see the "
            a { href: "../router", "" }
            "."
        }
        h2 { id: "defining-your-router",
            a { href: "#defining-your-router", class: "header", "Defining Your Router" }
        }
        p { "Previously, you defined your route with components:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">rsx! {{\n</span><span style=\"color:#c0c5ce;\">    Router::&lt;Route&gt; {{\n</span><span style=\"color:#c0c5ce;\">        Route {{ to: &quot;</span><span style=\"color:#a3be8c;\">/home</span><span style=\"color:#c0c5ce;\">&quot;, Home {{}} }}\n</span><span style=\"color:#c0c5ce;\">        Route {{ to: &quot;</span><span style=\"color:#a3be8c;\">/blog</span><span style=\"color:#c0c5ce;\">&quot;, Blog {{}} }}\n</span><span style=\"color:#c0c5ce;\">        </span><span style=\"color:#65737e;\">// BlogPost has a dynamic id\n</span><span style=\"color:#c0c5ce;\">        Route {{ to: &quot;</span><span style=\"color:#a3be8c;\">/blog/:id</span><span style=\"color:#c0c5ce;\">&quot;, BlogPost {{}} }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p { "Now you must define your routes as an enum of possible routes:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_router::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Routable, PartialEq, Debug, Clone)]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/home</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// This route will render the Home component with the HomeProps props. (make sure you have the props imported)\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// You can modify the props by passing extra arguments to the macro. For example, if you want the Home variant to render a component called Homepage, you could use:\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// #[route(&quot;/home&quot;, Homepage)]\n</span><span style=\"color:#c0c5ce;\">    Home {{}},\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    Blog {{}},\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// BlogPost has a dynamic id\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/blog/:id</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    BlogPost {{\n</span><span style=\"color:#c0c5ce;\">        id: </span><span style=\"color:#b48ead;\">usize\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Home</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Blog</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">BlogPost</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope, </span><span style=\"color:#bf616a;\">id</span><span style=\"color:#c0c5ce;\">: </span><span style=\"color:#b48ead;\">usize</span><span style=\"color:#c0c5ce;\">) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Note that you have access to id here in a type safe way without calling any extra functions!\n</span><span style=\"color:#c0c5ce;\">    todo!()\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "linking-to-routes",
            a { href: "#linking-to-routes", class: "header", "Linking to routes" }
        }
        p {
            "Now that routes are enums, you should use the enum as the route in Links. If you try to link to a route that does not exist, you will get a compiler error."
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_router::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Component</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        Link {{\n</span><span style=\"color:#c0c5ce;\">            to: Route::BlogPost {{ id: </span><span style=\"color:#d08770;\">123 </span><span style=\"color:#c0c5ce;\">}},\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">blog post</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "external-links",
            a { href: "#external-links", class: "header", "External Links" }
        }
        p { "To link to external routes, you can use a string:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_router::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Component</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        Link {{\n</span><span style=\"color:#c0c5ce;\">            to: &quot;</span><span style=\"color:#a3be8c;\">https://google.com</span><span style=\"color:#c0c5ce;\">&quot;,\n</span><span style=\"color:#c0c5ce;\">            &quot;</span><span style=\"color:#a3be8c;\">google</span><span style=\"color:#c0c5ce;\">&quot;\n</span><span style=\"color:#c0c5ce;\">        }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h2 { id: "use-router",
            a { href: "#use-router", class: "header", "use_router" }
        }
        p {
            "The  "
            code { "use_router" }
            " hook has been split into two separate hooks: the  "
            code { "use_route" }
            " hook and the  "
            code { "use_navigator" }
            " hook."
        }
        h3 { id: "use-route",
            a { href: "#use-route", class: "header", "use_route" }
        }
        p { "The new use_route hook lets you read the current route:" }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus::prelude::*;\n</span><span style=\"color:#b48ead;\">use </span><span style=\"color:#c0c5ce;\">dioxus_router::prelude::*;\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">derive</span><span style=\"color:#c0c5ce;\">(Clone, Routable)]\n</span><span style=\"color:#b48ead;\">enum </span><span style=\"color:#c0c5ce;\">Route {{\n</span><span style=\"color:#c0c5ce;\">    #[</span><span style=\"color:#bf616a;\">route</span><span style=\"color:#c0c5ce;\">(&quot;</span><span style=\"color:#a3be8c;\">/</span><span style=\"color:#c0c5ce;\">&quot;)]\n</span><span style=\"color:#c0c5ce;\">    Index {{}},\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">App</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">App</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        Router::&lt;Route&gt; {{}}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Index</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// Read from (and subscribe to the current route)\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> path = </span><span style=\"color:#96b5b4;\">use_route</span><span style=\"color:#c0c5ce;\">(&amp;cx).</span><span style=\"color:#96b5b4;\">unwrap</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h2 {{ &quot;</span><span style=\"color:#a3be8c;\">Current Path</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">        p {{ &quot;</span><span style=\"color:#a3be8c;\">{{path}}</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        h3 { id: "use-navigator",
            a { href: "#use-navigator", class: "header", "use_navigator" }
        }
        p {
            code { "use_navigator" }
            " lets you change the route programmatically:"
        }
        CodeBlock {
            contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">#[</span><span style=\"color:#bf616a;\">component</span><span style=\"color:#c0c5ce;\">]\n</span><span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">Home</span><span style=\"color:#c0c5ce;\">(</span><span style=\"color:#bf616a;\">cx</span><span style=\"color:#c0c5ce;\">: Scope) -&gt; Element {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#b48ead;\">let</span><span style=\"color:#c0c5ce;\"> nav = </span><span style=\"color:#96b5b4;\">use_navigator</span><span style=\"color:#c0c5ce;\">(cx);\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// push\n</span><span style=\"color:#c0c5ce;\">    nav.</span><span style=\"color:#96b5b4;\">push</span><span style=\"color:#c0c5ce;\">(Route::PageNotFound {{ route: vec![] }});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// replace\n</span><span style=\"color:#c0c5ce;\">    nav.</span><span style=\"color:#96b5b4;\">replace</span><span style=\"color:#c0c5ce;\">(Route::Home {{}});\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// go back\n</span><span style=\"color:#c0c5ce;\">    nav.</span><span style=\"color:#96b5b4;\">go_back</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// go forward\n</span><span style=\"color:#c0c5ce;\">    nav.</span><span style=\"color:#96b5b4;\">go_forward</span><span style=\"color:#c0c5ce;\">();\n</span><span style=\"color:#c0c5ce;\">\n</span><span style=\"color:#c0c5ce;\">    render! {{\n</span><span style=\"color:#c0c5ce;\">        h1 {{ &quot;</span><span style=\"color:#a3be8c;\">Welcome to the Dioxus Blog!</span><span style=\"color:#c0c5ce;\">&quot; }}\n</span><span style=\"color:#c0c5ce;\">    }}\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n",
        }
        p {
            "You can read more about programmatic navigation in the "
            a { href: "../router/reference/navigation/programmatic", "" }
            "."
        }
        h3 { id: "new-features",
            a { href: "#new-features", class: "header", "New features" }
        }
        p { "In addition to these changes, there have been many new features added to the router:" }
        ul {
            li {
                a { href: "../router/reference/static-generation", "" }
            }
            li {
                a { href: "../router/reference/layouts", "" }
            }
            li {
                a { href: "../router/reference/routes/nested", "" }
            }
        }
    }
}
#[component(no_case_check)]
pub fn MigrationHotReload() -> dioxus::prelude::Element {
    use dioxus::prelude::*;
    rsx! {
        h1 { id: "hot-reloading",
            a { href: "#hot-reloading", class: "header", "Hot reloading" }
        }
        p {
            "Desktop hot reloading has changed in the  "
            code { "0.4" }
            " release to use the "
            a { href: "../CLI", "" }
            " for all platforms."
        }
        p {
            "Previously, you may have included the  "
            code { "hot_reload_init!" }
            " macro in your main function. This is no longer needed."
        }
        p { "old:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    hot_reload_init!();\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// ...\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p { "new:" }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#b48ead;\">fn </span><span style=\"color:#8fa1b3;\">main</span><span style=\"color:#c0c5ce;\">() {{\n</span><span style=\"color:#c0c5ce;\">    </span><span style=\"color:#65737e;\">// ...\n</span><span style=\"color:#c0c5ce;\">}}\n</span></pre>\n" }
        p {
            "Now you can run your project with the dioxus CLI by passing the  "
            code { "--platform" }
            " flag:"
        }
        CodeBlock { contents: "<pre style=\"background-color:#2b303b;\">\n<span style=\"color:#c0c5ce;\">dx serve --platform desktop --hot-reload\n</span></pre>\n" }
    }
}

use super::*;
